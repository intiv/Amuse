
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\054\002\000\002\055" +
    "\002\000\002\002\014\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\056\002\000\002\003\005\000\002\003\004\000\002\003" +
    "\002\000\002\051\006\000\002\052\004\000\002\052\002" +
    "\000\002\053\005\000\002\053\002\000\002\025\004\000" +
    "\002\025\004\000\002\025\002\000\002\057\002\000\002" +
    "\022\011\000\002\060\002\000\002\022\011\000\002\022" +
    "\002\000\002\023\004\000\002\023\002\000\002\024\005" +
    "\000\002\024\002\000\002\041\006\000\002\036\006\000" +
    "\002\037\005\000\002\037\002\000\002\061\002\000\002" +
    "\062\002\000\002\004\014\000\002\063\002\000\002\005" +
    "\012\000\002\005\003\000\002\064\002\000\002\006\006" +
    "\000\002\006\002\000\002\065\002\000\002\066\002\000" +
    "\002\007\012\000\002\012\006\000\002\067\002\000\002" +
    "\070\002\000\002\010\016\000\002\011\004\000\002\071" +
    "\002\000\002\072\002\000\002\013\012\000\002\073\002" +
    "\000\002\014\011\000\002\015\003\000\002\015\002\000" +
    "\002\016\004\000\002\016\003\000\002\017\005\000\002" +
    "\017\003\000\002\017\005\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\002\000\002\050\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\003\000\002\045\003\000\002\045" +
    "\005\000\002\045\003\000\002\045\003\000\002\074\002" +
    "\000\002\075\002\000\002\026\014\000\002\031\005\000" +
    "\002\030\003\000\002\076\002\000\002\077\002\000\002" +
    "\032\014\000\002\034\005\000\002\034\002\000\002\035" +
    "\006\000\002\035\002\000\002\043\005\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\100\002\000\002\101\002\000\002\042\010\000\002\042" +
    "\004\000\002\102\002\000\002\040\006\000\002\040\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\014\011\uffe5\026\012\027\007\042\004\043" +
    "\005\001\002\000\014\014\uffa1\020\uffa1\022\uffa1\025\uffa1" +
    "\034\uffa1\001\002\000\014\014\uffa0\020\uffa0\022\uffa0\025" +
    "\uffa0\034\uffa0\001\002\000\004\011\037\001\002\000\014" +
    "\014\uff9f\020\uff9f\022\uff9f\025\uff9f\034\uff9f\001\002\000" +
    "\006\022\021\025\031\001\002\000\004\002\030\001\002" +
    "\000\004\025\013\001\002\000\004\013\014\001\002\000" +
    "\012\014\uffe3\027\007\042\004\043\005\001\002\000\004" +
    "\014\025\001\002\000\010\014\uffe1\020\020\022\021\001" +
    "\002\000\004\014\uffe4\001\002\000\010\027\007\042\004" +
    "\043\005\001\002\000\004\023\022\001\002\000\014\014" +
    "\uffa2\020\uffa2\022\uffa2\025\uffa2\034\uffa2\001\002\000\010" +
    "\014\uffe1\020\020\022\021\001\002\000\004\014\uffe2\001" +
    "\002\000\014\011\uffe7\026\uffe7\027\uffe7\042\uffe7\043\uffe7" +
    "\001\002\000\014\011\uffe5\026\012\027\007\042\004\043" +
    "\005\001\002\000\004\011\uffe6\001\002\000\004\002\001" +
    "\001\002\000\004\013\032\001\002\000\012\014\uffe3\027" +
    "\007\042\004\043\005\001\002\000\004\014\034\001\002" +
    "\000\014\011\uffe9\026\uffe9\027\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\014\011\uffe5\026\012\027\007\042\004\043\005" +
    "\001\002\000\004\011\uffe8\001\002\000\004\013\040\001" +
    "\002\000\004\014\041\001\002\000\004\015\042\001\002" +
    "\000\024\003\000\004\000\016\000\025\000\045\000\046" +
    "\000\050\000\051\000\055\000\001\002\000\024\003\057" +
    "\004\uffdc\016\ufff2\025\047\045\055\046\046\050\051\051" +
    "\uffcb\055\052\001\002\000\004\004\322\001\002\000\040" +
    "\003\057\004\uffdc\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016" +
    "\ufff2\017\ufff2\025\047\045\055\046\046\050\051\051\uffcb" +
    "\052\ufff2\055\052\001\002\000\004\013\uffcf\001\002\000" +
    "\016\013\172\022\272\027\007\034\uffdd\042\004\043\005" +
    "\001\002\000\040\003\057\004\uffdc\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047\045\055\046\046" +
    "\050\051\051\uffcb\052\ufff2\055\052\001\002\000\004\013" +
    "\266\001\002\000\040\003\057\004\uffdc\006\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047\045\055\046" +
    "\046\050\051\051\uffcb\052\ufff2\055\052\001\002\000\040" +
    "\003\057\004\uffdc\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016" +
    "\ufff2\017\ufff2\025\047\045\055\046\046\050\051\051\uffcb" +
    "\052\ufff2\055\052\001\002\000\040\003\057\004\uffdc\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047" +
    "\045\055\046\046\050\051\051\uffcb\052\ufff2\055\052\001" +
    "\002\000\004\013\uffd3\001\002\000\040\003\057\004\uffdc" +
    "\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025" +
    "\047\045\055\046\046\050\051\051\uffcb\052\ufff2\055\052" +
    "\001\002\000\040\003\057\004\uffdc\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047\045\055\046\046" +
    "\050\051\051\uffcb\052\ufff2\055\052\001\002\000\040\003" +
    "\057\004\uffdc\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2" +
    "\017\ufff2\025\047\045\055\046\046\050\051\051\uffcb\052" +
    "\ufff2\055\052\001\002\000\040\003\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\012\ufff5\016\ufff5\017\ufff5\025\ufff5\045" +
    "\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002" +
    "\000\004\051\204\001\002\000\040\003\057\004\uffdc\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047" +
    "\045\055\046\046\050\051\051\uffcb\052\ufff2\055\052\001" +
    "\002\000\004\016\065\001\002\000\014\002\uffff\026\uffff" +
    "\027\uffff\042\uffff\043\uffff\001\002\000\014\002\uffea\026" +
    "\072\027\007\042\004\043\005\001\002\000\004\002\ufffe" +
    "\001\002\000\014\002\uffea\026\072\027\007\042\004\043" +
    "\005\001\002\000\006\022\021\025\115\001\002\000\004" +
    "\025\075\001\002\000\014\002\uffea\026\072\027\007\042" +
    "\004\043\005\001\002\000\004\002\uffeb\001\002\000\004" +
    "\013\uffa9\001\002\000\004\013\077\001\002\000\012\014" +
    "\uffa5\027\007\042\004\043\005\001\002\000\004\014\110" +
    "\001\002\000\006\022\021\025\102\001\002\000\006\014" +
    "\uffa3\020\103\001\002\000\010\027\007\042\004\043\005" +
    "\001\002\000\004\014\uffa6\001\002\000\006\022\021\025" +
    "\106\001\002\000\006\014\uffa3\020\103\001\002\000\004" +
    "\014\uffa4\001\002\000\004\015\111\001\002\000\024\003" +
    "\057\004\uffdc\016\ufff2\025\047\045\055\046\046\050\051" +
    "\051\uffcb\055\052\001\002\000\004\016\uffa8\001\002\000" +
    "\004\016\114\001\002\000\014\002\uffa7\026\uffa7\027\uffa7" +
    "\042\uffa7\043\uffa7\001\002\000\004\013\uffae\001\002\000" +
    "\004\013\117\001\002\000\012\014\uffa5\027\007\042\004" +
    "\043\005\001\002\000\004\014\121\001\002\000\004\015" +
    "\122\001\002\000\024\003\057\004\uffdc\017\ufff2\025\047" +
    "\045\055\046\046\050\051\051\uffcb\055\052\001\002\000" +
    "\004\017\127\001\002\000\004\016\uffad\001\002\000\004" +
    "\016\126\001\002\000\014\002\uffac\026\uffac\027\uffac\042" +
    "\uffac\043\uffac\001\002\000\016\013\141\015\137\024\142" +
    "\025\132\041\133\044\140\001\002\000\050\003\uff9b\004" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\014\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\025\uff9b\045\uff9b\046\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\054\uff9b\055\uff9b\001\002\000\004" +
    "\016\uffab\001\002\000\062\003\uffb0\004\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\012\uffb0\013\172\014\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\025\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0" +
    "\055\uffb0\001\002\000\060\003\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\012\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\025\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\045" +
    "\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2" +
    "\001\002\000\060\003\uffb6\004\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\012\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\025\uffb6\035\uffb6\036\uffb6\037\152\040\151\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\001\002" +
    "\000\050\003\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c\012" +
    "\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\025\uff9c" +
    "\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055" +
    "\uff9c\001\002\000\004\016\uffaa\001\002\000\012\013\141" +
    "\016\161\025\132\041\133\001\002\000\050\003\uff9d\004" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\012\uff9d\014\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\025\uff9d\045\uff9d\046\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\001\002\000\010" +
    "\013\141\025\132\041\133\001\002\000\050\003\uff9e\004" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\012\uff9e\014\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\025\uff9e\045\uff9e\046\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\054\uff9e\055\uff9e\001\002\000\060" +
    "\003\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\014" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\025\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\045\uffaf\046\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\054\uffaf\055\uffaf\001\002\000\060\003\uffb3" +
    "\004\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\025\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\001\002\000\054\003\uffb9\004\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\012\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\025\uffb9\035\147\036\146\045\uffb9" +
    "\046\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\001" +
    "\002\000\010\013\141\025\132\041\133\001\002\000\010" +
    "\013\141\025\132\041\133\001\002\000\060\003\uffb8\004" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\025\uffb8\035\uffb8\036\uffb8\037" +
    "\152\040\151\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\055\uffb8\001\002\000\010\013\141\025\132\041" +
    "\133\001\002\000\010\013\141\025\132\041\133\001\002" +
    "\000\060\003\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5\012" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\045\uffb5\046\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\001\002\000\060" +
    "\003\uffb4\004\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\014" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\025\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\045\uffb4\046\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\054\uffb4\055\uffb4\001\002\000\060\003\uffb7" +
    "\004\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\014\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\035\uffb7\036\uffb7" +
    "\037\152\040\151\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\010\014\157\035\147" +
    "\036\146\001\002\000\060\003\uffb1\004\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\025\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\045" +
    "\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1" +
    "\001\002\000\006\016\uff9a\020\uff9a\001\002\000\050\003" +
    "\uff97\004\uff97\006\uff97\007\uff97\010\uff97\012\uff97\014\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\025\uff97\045\uff97\046" +
    "\uff97\050\uff97\051\uff97\052\uff97\054\uff97\055\uff97\001\002" +
    "\000\006\016\uff94\020\164\001\002\000\004\016\uff99\001" +
    "\002\000\010\013\141\025\132\041\133\001\002\000\006" +
    "\016\uff96\020\uff96\001\002\000\006\016\uff94\020\164\001" +
    "\002\000\004\016\uff95\001\002\000\004\016\171\001\002" +
    "\000\050\003\uff98\004\uff98\006\uff98\007\uff98\010\uff98\012" +
    "\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021\uff98\025\uff98" +
    "\045\uff98\046\uff98\050\uff98\051\uff98\052\uff98\054\uff98\055" +
    "\uff98\001\002\000\020\013\141\014\uffef\015\137\024\142" +
    "\025\132\041\133\044\140\001\002\000\006\014\uffed\020" +
    "\177\001\002\000\004\014\175\001\002\000\060\003\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\025\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\054\ufff1\055\ufff1\001\002\000\004\014\ufff0\001\002" +
    "\000\016\013\141\015\137\024\142\025\132\041\133\044" +
    "\140\001\002\000\006\014\uffed\020\177\001\002\000\004" +
    "\014\uffee\001\002\000\004\002\uffec\001\002\000\020\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\016\ufff8\017\ufff8\052\ufff8" +
    "\001\002\000\004\013\205\001\002\000\004\025\206\001" +
    "\002\000\004\014\207\001\002\000\004\053\uffca\001\002" +
    "\000\004\053\212\001\002\000\004\012\222\001\002\000" +
    "\016\013\141\015\137\024\142\025\132\041\133\044\140" +
    "\001\002\000\004\054\uffc8\001\002\000\004\054\215\001" +
    "\002\000\024\003\057\004\uffdc\025\047\045\055\046\046" +
    "\050\051\051\uffcb\052\ufff2\055\052\001\002\000\004\052" +
    "\217\001\002\000\006\012\uffc5\053\212\001\002\000\004" +
    "\012\uffc7\001\002\000\004\012\uffc6\001\002\000\040\003" +
    "\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\016\uffc9" +
    "\017\uffc9\025\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\055\uffc9\001\002\000\040\003\057\004\uffdc\006\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\047\045" +
    "\055\046\046\050\051\051\uffcb\052\ufff2\055\052\001\002" +
    "\000\020\006\ufff4\007\ufff4\010\ufff4\012\ufff4\016\ufff4\017" +
    "\ufff4\052\ufff4\001\002\000\020\006\ufff6\007\ufff6\010\ufff6" +
    "\012\ufff6\016\ufff6\017\ufff6\052\ufff6\001\002\000\020\006" +
    "\ufffd\007\ufffd\010\ufffd\012\ufffd\016\ufffd\017\ufffd\052\ufffd" +
    "\001\002\000\020\006\ufff3\007\ufff3\010\ufff3\012\ufff3\016" +
    "\ufff3\017\ufff3\052\ufff3\001\002\000\004\013\231\001\002" +
    "\000\012\024\232\025\237\033\233\041\235\001\002\000" +
    "\006\014\uffc1\021\uffc1\001\002\000\010\024\232\025\237" +
    "\041\235\001\002\000\006\014\uffc3\021\uffc3\001\002\000" +
    "\004\030\260\001\002\000\004\014\254\001\002\000\004" +
    "\030\240\001\002\000\010\024\241\025\244\041\243\001" +
    "\002\000\012\014\uffba\021\uffba\031\247\032\246\001\002" +
    "\000\006\014\uffc2\021\uffc2\001\002\000\012\014\uffba\021" +
    "\uffba\031\247\032\246\001\002\000\012\014\uffba\021\uffba" +
    "\031\247\032\246\001\002\000\006\014\uffbf\021\uffbf\001" +
    "\002\000\012\024\232\025\237\033\233\041\235\001\002" +
    "\000\012\024\232\025\237\033\233\041\235\001\002\000" +
    "\006\014\uffbc\021\uffbc\001\002\000\006\014\uffbb\021\uffbb" +
    "\001\002\000\006\014\uffbd\021\uffbd\001\002\000\006\014" +
    "\uffbe\021\uffbe\001\002\000\024\003\uffd2\004\uffd2\012\uffd2" +
    "\025\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\055\uffd2\001" +
    "\002\000\024\003\057\004\uffdc\012\ufff2\025\047\045\055" +
    "\046\046\050\051\051\uffcb\055\052\001\002\000\004\012" +
    "\257\001\002\000\040\003\uffd1\004\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\012\uffd1\016\uffd1\017\uffd1\025\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\001\002\000\010" +
    "\024\241\025\244\041\243\001\002\000\006\014\uffc0\021" +
    "\uffc0\001\002\000\006\014\uffc4\021\uffc4\001\002\000\020" +
    "\006\ufffa\007\ufffa\010\ufffa\012\ufffa\016\ufffa\017\ufffa\052" +
    "\ufffa\001\002\000\020\006\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\016\ufffc\017\ufffc\052\ufffc\001\002\000\020\006\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\016\ufff9\017\ufff9\052\ufff9\001\002" +
    "\000\016\013\141\015\137\024\142\025\132\041\133\044" +
    "\140\001\002\000\004\014\270\001\002\000\040\003\uffd0" +
    "\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\016\uffd0\017" +
    "\uffd0\025\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\055\uffd0\001\002\000\020\006\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\016\ufff7\017\ufff7\052\ufff7\001\002\000\004\041\301" +
    "\001\002\000\004\034\277\001\002\000\006\022\021\034" +
    "\275\001\002\000\016\013\141\015\137\024\142\025\132" +
    "\041\133\044\140\001\002\000\042\003\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\025\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\055" +
    "\uffe0\001\002\000\016\013\141\015\137\024\142\025\132" +
    "\041\133\044\140\001\002\000\040\003\uffdf\004\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\012\uffdf\016\uffdf\017\uffdf\025\uffdf" +
    "\045\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\055\uffdf\001" +
    "\002\000\004\023\302\001\002\000\004\034\uffde\001\002" +
    "\000\004\013\304\001\002\000\004\025\306\001\002\000" +
    "\004\021\307\001\002\000\010\027\007\042\004\043\005" +
    "\001\002\000\012\024\uffce\025\uffce\033\uffce\041\uffce\001" +
    "\002\000\012\024\232\025\237\033\233\041\235\001\002" +
    "\000\004\021\312\001\002\000\004\025\314\001\002\000" +
    "\004\014\316\001\002\000\004\047\315\001\002\000\004" +
    "\014\uffcc\001\002\000\024\003\057\004\uffdc\012\ufff2\025" +
    "\047\045\055\046\046\050\051\051\uffcb\055\052\001\002" +
    "\000\004\012\320\001\002\000\040\003\uffcd\004\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\012\uffcd\016\uffcd\017\uffcd\025\uffcd" +
    "\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\001" +
    "\002\000\020\006\ufffb\007\ufffb\010\ufffb\012\ufffb\016\ufffb" +
    "\017\ufffb\052\ufffb\001\002\000\004\013\323\001\002\000" +
    "\012\024\232\025\237\033\233\041\235\001\002\000\004" +
    "\014\325\001\002\000\004\005\uffdb\001\002\000\004\005" +
    "\327\001\002\000\030\003\057\004\uffdc\006\ufff2\007\ufff2" +
    "\010\ufff2\025\047\045\055\046\046\050\051\051\uffcb\055" +
    "\052\001\002\000\010\006\332\007\334\010\uffd4\001\002" +
    "\000\004\010\uffd7\001\002\000\004\005\345\001\002\000" +
    "\004\010\344\001\002\000\004\013\335\001\002\000\012" +
    "\024\232\025\237\033\233\041\235\001\002\000\004\014" +
    "\337\001\002\000\004\005\uffd9\001\002\000\004\005\341" +
    "\001\002\000\030\003\057\004\uffdc\006\ufff2\007\ufff2\010" +
    "\ufff2\025\047\045\055\046\046\050\051\051\uffcb\055\052" +
    "\001\002\000\010\006\332\007\334\010\uffd4\001\002\000" +
    "\004\010\uffd8\001\002\000\040\003\uffda\004\uffda\006\uffda" +
    "\007\uffda\010\uffda\012\uffda\016\uffda\017\uffda\025\uffda\045" +
    "\uffda\046\uffda\050\uffda\051\uffda\052\uffda\055\uffda\001\002" +
    "\000\024\003\uffd6\004\uffd6\010\uffd6\025\uffd6\045\uffd6\046" +
    "\uffd6\050\uffd6\051\uffd6\055\uffd6\001\002\000\024\003\057" +
    "\004\uffdc\010\ufff2\025\047\045\055\046\046\050\051\051" +
    "\uffcb\055\052\001\002\000\004\010\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\010\002\010\022\005\043\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\014\043\015\001\001" +
    "\000\002\001\001\000\004\024\016\001\001\000\002\001" +
    "\001\000\004\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\023\001\001\000\002\001\001\000" +
    "\004\060\025\001\001\000\006\022\026\043\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\032\043\015\001\001\000\002\001\001\000\004" +
    "\057\034\001\001\000\006\022\035\043\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\042\001\001\000\030\003\063\004" +
    "\052\007\044\010\047\012\055\013\057\036\053\041\062" +
    "\051\060\061\043\071\061\001\001\000\002\001\001\000" +
    "\030\003\320\004\052\007\044\010\047\012\055\013\057" +
    "\036\053\041\062\051\060\061\043\071\061\001\001\000" +
    "\004\067\302\001\001\000\006\037\272\043\273\001\001" +
    "\000\030\003\270\004\052\007\044\010\047\012\055\013" +
    "\057\036\053\041\062\051\060\061\043\071\061\001\001" +
    "\000\002\001\001\000\030\003\264\004\052\007\044\010" +
    "\047\012\055\013\057\036\053\041\062\051\060\061\043" +
    "\071\061\001\001\000\030\003\263\004\052\007\044\010" +
    "\047\012\055\013\057\036\053\041\062\051\060\061\043" +
    "\071\061\001\001\000\030\003\262\004\052\007\044\010" +
    "\047\012\055\013\057\036\053\041\062\051\060\061\043" +
    "\071\061\001\001\000\004\065\227\001\001\000\030\003" +
    "\226\004\052\007\044\010\047\012\055\013\057\036\053" +
    "\041\062\051\060\061\043\071\061\001\001\000\030\003" +
    "\225\004\052\007\044\010\047\012\055\013\057\036\053" +
    "\041\062\051\060\061\043\071\061\001\001\000\030\003" +
    "\224\004\052\007\044\010\047\012\055\013\057\036\053" +
    "\041\062\051\060\061\043\071\061\001\001\000\004\056" +
    "\222\001\001\000\002\001\001\000\030\003\202\004\052" +
    "\007\044\010\047\012\055\013\057\036\053\041\062\051" +
    "\060\061\043\071\061\001\001\000\002\001\001\000\004" +
    "\055\065\001\001\000\012\025\066\026\067\032\072\043" +
    "\070\001\001\000\002\001\001\000\012\025\201\026\067" +
    "\032\072\043\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\073\026\067\032\072\043\070\001\001" +
    "\000\002\001\001\000\004\076\075\001\001\000\002\001" +
    "\001\000\006\034\077\043\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\103\001\001\000\004\043" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\111\004\052\007\044\010\047\012\055\013\057" +
    "\036\053\041\062\051\060\061\043\071\061\001\001\000" +
    "\004\077\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\115\001\001\000\002\001\001\000\006\034" +
    "\117\043\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\122\004\052\007\044\010\047\012\055\013" +
    "\057\031\123\036\053\041\062\051\060\061\043\071\061" +
    "\001\001\000\002\001\001\000\004\075\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\130\042\127" +
    "\044\135\045\143\046\144\047\133\050\134\051\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\143\046\144\047\133\050\157" +
    "\051\142\001\001\000\002\001\001\000\012\045\143\046" +
    "\155\047\133\051\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\143\047\154\051\142\001\001\000\010\045\143\047\147" +
    "\051\142\001\001\000\002\001\001\000\006\045\153\051" +
    "\142\001\001\000\006\045\152\051\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\161\001\001\000\002" +
    "\001\001\000\004\040\162\001\001\000\004\101\167\001" +
    "\001\000\014\045\143\046\144\047\133\050\164\051\142" +
    "\001\001\000\004\102\165\001\001\000\004\040\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\042\127\044\172\045\143\046\144\047\133\050" +
    "\134\051\142\052\173\001\001\000\004\053\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\127\044\177\045\143\046\144\047\133\050\134" +
    "\051\142\001\001\000\004\053\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\207\001" +
    "\001\000\004\014\210\001\001\000\002\001\001\000\020" +
    "\042\127\044\212\045\143\046\144\047\133\050\134\051" +
    "\142\001\001\000\004\073\213\001\001\000\002\001\001" +
    "\000\030\003\215\004\052\007\044\010\047\012\055\013" +
    "\057\036\053\041\062\051\060\061\043\071\061\001\001" +
    "\000\002\001\001\000\006\014\220\015\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\223\004\052\007\044\010\047\012\055\013\057\036" +
    "\053\041\062\051\060\061\043\071\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\235\017\233\001\001" +
    "\000\002\001\001\000\004\017\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\241\001\001\000\004\021\252\001\001\000" +
    "\002\001\001\000\004\021\251\001\001\000\004\021\244" +
    "\001\001\000\002\001\001\000\006\016\250\017\233\001" +
    "\001\000\006\016\247\017\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\254\001\001\000\030\003\255\004\052\007\044" +
    "\010\047\012\055\013\057\036\053\041\062\051\060\061" +
    "\043\071\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\042\127\044\266\045\143\046\144\047\133\050" +
    "\134\051\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\042\127\044\275\045\143\046\144" +
    "\047\133\050\134\051\142\001\001\000\002\001\001\000" +
    "\020\042\127\044\277\045\143\046\144\047\133\050\134" +
    "\051\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\304\001\001" +
    "\000\002\001\001\000\004\043\273\001\001\000\004\070" +
    "\307\001\001\000\006\016\310\017\233\001\001\000\002" +
    "\001\001\000\004\011\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\316\004\052" +
    "\007\044\010\047\012\055\013\057\036\053\041\062\051" +
    "\060\061\043\071\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\323\017\233\001\001\000\002\001\001\000\004\062\325" +
    "\001\001\000\002\001\001\000\030\003\327\004\052\007" +
    "\044\010\047\012\055\013\057\036\053\041\062\051\060" +
    "\061\043\071\061\001\001\000\006\005\332\006\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\335\017\233\001\001\000" +
    "\002\001\001\000\004\063\337\001\001\000\002\001\001" +
    "\000\030\003\341\004\052\007\044\010\047\012\055\013" +
    "\057\036\053\041\062\051\060\061\043\071\061\001\001" +
    "\000\006\005\342\006\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\345\001\001\000\030\003\346" +
    "\004\052\007\044\010\047\012\055\013\057\036\053\041" +
    "\062\051\060\061\043\071\061\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";
        public int hayErrores = 0;
        public int contadorNodo = 0;
        public static Nodo padre;
        public TablaSimbolos tabla = new TablaSimbolos();
        public int contadorFunciones = 0;
         
        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                hayErrores = 1;
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                hayErrores = 1;
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                hayErrores = 1;
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
                hayErrores = 1;
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}

        public String operationValidation(Value e){
                try {
                        int p = e.tipo.indexOf("->");
                        boolean errores= false;
                        if(p>=0){
                                if(functionType(e, p).equals("num")){
                                        return 0+"";
                                }else{
                                        return "error";
                                }
                        }else{
                                Integer.parseInt(e.val);
                                return e.val;                                                        
                        }                                                                           
                } catch (NumberFormatException o) {
                        return "error";
                }
                
        }

        public String functionType(Value e, int indexReturn){
                if((e.tipo.substring(indexReturn+2).equals("num"))){
                        return "num";
                }else{
                        return "error";
                }
        }


        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 
                                
                                System.out.println("Fin main");
                                tabla.clearVars(contadorFunciones);
                                System.out.println(tabla.toString()); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= FUNC_HEAD MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= INIT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.add(val); RESULT = val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= FCALL NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= WRITE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FCALL ::= id parIzq FCALLARGS parDer 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = call; System.out.println("\tLlamado a funcion: "+call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name);
                        if(index == -1){
                                tabla.addVar(args+"->"+fun_type, fun_name, null);
                                contadorFunciones++;
                        }else{
                                System.err.println("Error en linea "+fun_nameleft+", columna "+fun_nameright+": Ya existe la función "+fun_name);
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC_HEAD ::= TIPO id parIzq TYPE_LIST parDer NT$3 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name);
                        if(index == -1){
                                tabla.addVar(args+"->void", fun_name, null);
                                contadorFunciones++;
                        }else{
                                System.err.println("Error en linea "+fun_nameleft+", columna "+fun_nameright+": Ya existe la función "+fun_name);
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNC_HEAD ::= voidType id parIzq TYPE_LIST parDer NT$4 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC_HEAD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPE_LIST ::= TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tipo + tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_LIST ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE_LIST2 ::= coma TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "x"+tipo+tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE_LIST2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INIT ::= id TIPO opAsig VALS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        int index = tabla.contains(i);
                        System.out.println("Asignacion: ID: "+i+", index: "+index);
                        if(index == -1){
                                if(v.tipo.equals("error")){
                                        System.err.println("Error en columna "+vright+", linea "+vleft+": Variable no declarada en inicialización");
                                }else{
                                        if(v.tipo.equals(t)){
                                                tabla.addVar(t, i, v);
                                                System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v.val);
                                                RESULT = i;
                                        }else{
                                                RESULT = "";
                                                System.err.println("Error en columna"+vright+", linea "+vleft+": Asignacion de "+v.tipo+" a variable de tipo " +t);
                                        }
                                }
                        }else{
                                RESULT = "";
                                System.err.println("Error en columna"+vright+", linea "+vleft+": Variable "+i+" ya fue declarada");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        int index = tabla.contains(i);
                        if(index>=0){
                                if(v.tipo.equals("error")){
                                        if(v.tipo.equals("notfound")){
                                                System.err.println("Error en linea "+vleft+", columna "+vright+": Variable no declarada en asignación");
                                        }else{
                                                System.err.println("Error en linea "+vleft+", columna "+vright+": Tipos incompatibles en operacion");
                                        }
                                }else{
                                        Simbolo sym = tabla.getSymbol(i);
                                        if(v.tipo.equals(sym.tipo)){
                                                tabla.assignValue(index, v);
                                                if(v.tipo.equals("boolean")){
                                                        System.out.println("Asignacion: Variable "+i+", valor: "+v.getBoolVal());
                                                }else if(v.tipo.equals("int")){
                                                        System.out.println("HEEEEY! ");
                                                        System.out.println("Asignacion: Variable "+i+", valor: "+v.getIntVal());
                                                }else if(v.tipo.equals("char")){
                                                        System.out.println("Asignacion: Variable "+i+", valor: "+v.getCharVal());
                                                }
                                        }else{
                                                System.err.println("Error en linea "+vleft+", columna "+vright+": Asignacion de "+v.tipo+" a variable de tipo "+sym.tipo);
                                        }
                                }
                        }else{
                                System.err.println("Error en linea "+vleft+", columna "+vright+": Asignación a variable no declarada");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIG2 ::= openBrk number closeBrk 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIG2 ::= 
            {
              Object RESULT =null;
		 RESULT = -1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= NT$5 ifstart parIzq COND parDer NT$6 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSIF ::= elseif parIzq COND parDer NT$7 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= elseclause ifthen NT$8 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= whilestart NT$9 parIzq COND parDer NT$10 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WRITE ::= writestart parIzq VALS parDer 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("\tWRITE Valor:"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =null;
 //System.out.println("TABLA SIMBOLOS ANTES DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 //System.out.println("TABLA SIMBOLOS DESPUES DE VAR DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= forstart NT$11 parIzq INIT pcoma NT$12 COND pcoma CONTADOR parDer EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		 
                        tabla.removeVar(id);  
                        //System.out.println("TABLA SIMBOLOS DESPUES DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTADOR ::= id contador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t Contador: id: "+i+", contador: "+cont);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECT ::= NT$13 selectstart parIzq id parDer NT$14 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$15 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPT ::= options VALS NT$15 colon EXP breaks OPT2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPT2 ::= OPT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPT2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND2 ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND3 ::= booleano COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // S ::= E 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E opSuma T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible types for operation");
                                                        }else{
                                                                RESULT = new Value("num", (Integer.parseInt(x) + Integer.parseInt(y))+"");
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E opResta T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible types for operation");
                                                        }else{
                                                                RESULT = new Value("num", (Integer.parseInt(x) - Integer.parseInt(y))+"");
                                                        }
                                                }                                                 
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= T 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= T opMult F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible types for operation");
                                                        }else{
                                                                RESULT = new Value("num", (Integer.parseInt(x) * Integer.parseInt(y))+"");
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T ::= T opDiv F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible types for operation");
                                                        }else{
                                                                RESULT = new Value("num", (Integer.parseInt(x) / Integer.parseInt(y))+"");
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T ::= F 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= number 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Value("num", n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= parIzq E parDer 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= id 
            {
              Value RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                int index = tabla.contains(i);
                                int resultado = 0;
                                if(index>=0){
                                        Simbolo sym = tabla.getSymbol(i);
                                        RESULT = sym.valor;
                                }else{
                                        RESULT = new Value("error", "notfound");
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= FCALL 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                calls.add(val);
                                int index = tabla.contains(val);
                                if(index >= 0) {
                                        Simbolo sym = tabla.getSymbol(val);
                                        RESULT = new Value(sym.tipo, sym.id);
                                }else{
                                        RESULT = new Value("error", "notfound");
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$16 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

                        // boolean rec = false;
                        // for(int i = 0; i < calls.size(); i++){
                        //         if(calls.get(i).equals(val)){
                        //                 rec = true;
                        //                 break;
                        //         }
                        // }
                        // if(rec){
                        //         System.out.println("La funcion "+val+" es recursiva");
                        // }
                        int index = tabla.contains(val);
                        if(index >= 0){
                                Simbolo funcion = tabla.getSymbol(val);
                                if(funcion.tipo.equals(args+"->"+t)){
                                        System.out.println("Funcion "+val+", tipo: "+args+"->"+t);
                                }else{
                                        System.err.println("Error en linea "+argsleft+", columna "+argsright+": Funcion "+val+" definida como "+(args+"->"+t)+" pero fue declarada como "+funcion.tipo);
                                }
                        }else{
                                System.err.println("Error en linea "+valleft+", columna "+valright+": Funcion "+val+" no declarada");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RETFUNC ::= TIPO id NT$16 parIzq ARGS parDer cbOpen RETFUNCBODY NT$17 cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETFUNCBODY ::= EXP ret RETVAL 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value retVal = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$18 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("VOID FUNCTION "+val+" START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
 
                        // boolean rec = false;
                        // for(int i = 0; i < calls.size(); i++){
                        //         if(calls.get(i).equals(val)){
                        //                 rec = true;
                        //                 break;
                        //         }
                        // }
                        // if(rec){
                        //         System.out.println("La funcion "+val+" es recursiva");
                        // }
                        int index = tabla.contains(val);
                        if(index >= 0){
                                Simbolo funcion = tabla.getSymbol(val);
                                if(funcion.tipo.equals(args+"->void")){
                                        System.out.println("FIN FUNCTION");
                                }else{
                                        System.err.println("Error en linea "+argsleft+", columna "+argsright+": Funcion "+val+" definida como "+(args+"->void")+" pero fue declarada como "+funcion.tipo);
                                }
                        }else{
                                System.err.println("Error en linea "+valleft+", columna "+valright+": Funcion no declarada");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VOIDFUNC ::= voidType id NT$18 parIzq ARGS parDer cbOpen EXP NT$19 cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARGS ::= TIPO id ARGS2 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = t+arg2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARGS ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARGS2 ::= coma TIPO id ARGS2 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "x"+t+arg2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARGS2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALS ::= booleano 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("bool", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALS ::= charval 
            {
              Value RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("char", ch.charAt(1)+""); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALS ::= S 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALS ::= ARRVAL 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("array", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$20 ::= 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$21 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 RESULT = arrayValue; arrayValue = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARRVAL ::= cbOpen S NT$20 ARRVAL2 NT$21 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARRVAL ::= cbOpen cbClose 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$22 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue += (", " + val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARRVAL2 ::= coma S NT$22 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
