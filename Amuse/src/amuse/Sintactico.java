
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\037\002\000\002\040" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\002\000\002\030\006\000\002\030\005" +
    "\000\002\041\002\000\002\042\002\000\002\004\014\000" +
    "\002\043\002\000\002\005\012\000\002\005\003\000\002" +
    "\044\002\000\002\006\006\000\002\006\002\000\002\045" +
    "\002\000\002\046\002\000\002\007\012\000\002\047\002" +
    "\000\002\050\002\000\002\051\002\000\002\010\017\000" +
    "\002\052\002\000\002\053\002\000\002\011\012\000\002" +
    "\012\010\000\002\012\007\000\002\013\004\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\015\004" +
    "\000\002\015\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\002\000\002\036\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\003\000\002\035\005" +
    "\000\002\054\002\000\002\020\005\000\002\055\002\000" +
    "\002\056\002\000\002\021\013\000\002\057\002\000\002" +
    "\022\006\000\002\023\003\000\002\060\002\000\002\024" +
    "\005\000\002\061\002\000\002\062\002\000\002\025\013" +
    "\000\002\026\005\000\002\026\002\000\002\027\004\000" +
    "\002\027\002\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\026\003\000\004\000\014\000\017\000\024\000\040\000" +
    "\044\000\045\000\046\000\052\000\001\002\000\026\003" +
    "\033\004\uffee\014\014\017\ufff5\024\032\040\015\044\uffe5" +
    "\045\uffe2\046\uffde\052\013\001\002\000\042\003\033\004" +
    "\uffee\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\014\017\ufff5" +
    "\020\ufff5\024\032\040\015\044\uffe5\045\uffe2\046\uffde\047" +
    "\ufff5\052\013\001\002\000\006\014\014\040\015\001\002" +
    "\000\054\003\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\024\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\052\uffc9\001\002\000\042\003\033\004\uffee" +
    "\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\014\017\ufff5\020" +
    "\ufff5\024\032\040\015\044\uffe5\045\uffe2\046\uffde\047\ufff5" +
    "\052\013\001\002\000\004\045\235\001\002\000\004\046" +
    "\220\001\002\000\042\003\033\004\uffee\006\ufff5\007\ufff5" +
    "\010\ufff5\013\ufff5\014\014\017\ufff5\020\ufff5\024\032\040" +
    "\015\044\uffe5\045\uffe2\046\uffde\047\ufff5\052\013\001\002" +
    "\000\004\044\210\001\002\000\054\003\uffcd\004\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd" +
    "\020\uffcd\024\uffcd\034\uffcd\035\uffcd\036\060\037\057\040" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd\001\002" +
    "\000\042\003\033\004\uffee\006\ufff5\007\ufff5\010\ufff5\013" +
    "\ufff5\014\014\017\ufff5\020\ufff5\024\032\040\015\044\uffe5" +
    "\045\uffe2\046\uffde\047\ufff5\052\013\001\002\000\004\004" +
    "\140\001\002\000\042\003\033\004\uffee\006\ufff5\007\ufff5" +
    "\010\ufff5\013\ufff5\014\014\017\ufff5\020\ufff5\024\032\040" +
    "\015\044\uffe5\045\uffe2\046\uffde\047\ufff5\052\013\001\002" +
    "\000\004\017\064\001\002\000\054\003\uffca\004\uffca\006" +
    "\uffca\007\uffca\010\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\020\uffca\024\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\052\uffca\001\002" +
    "\000\046\003\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\013" +
    "\uffd0\014\uffd0\017\uffd0\020\uffd0\024\uffd0\034\055\035\054" +
    "\040\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\052\uffd0\001" +
    "\002\000\012\033\042\041\041\042\043\043\044\001\002" +
    "\000\042\003\033\004\uffee\006\ufff5\007\ufff5\010\ufff5\013" +
    "\ufff5\014\014\017\ufff5\020\ufff5\024\032\040\015\044\uffe5" +
    "\045\uffe2\046\uffde\047\ufff5\052\013\001\002\000\042\003" +
    "\033\004\uffee\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\014" +
    "\017\ufff5\020\ufff5\024\032\040\015\044\uffe5\045\uffe2\046" +
    "\uffde\047\ufff5\052\013\001\002\000\042\003\033\004\uffee" +
    "\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\014\017\ufff5\020" +
    "\ufff5\024\032\040\015\044\uffe5\045\uffe2\046\uffde\047\ufff5" +
    "\052\013\001\002\000\020\006\ufffb\007\ufffb\010\ufffb\013" +
    "\ufffb\017\ufffb\020\ufffb\047\ufffb\001\002\000\020\006\ufff8" +
    "\007\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\047\ufff8\001" +
    "\002\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017\ufffa" +
    "\020\ufffa\047\ufffa\001\002\000\006\024\uffb6\033\uffb6\001" +
    "\002\000\010\023\047\024\052\040\051\001\002\000\006" +
    "\024\uffb5\033\uffb5\001\002\000\006\024\uffb4\033\uffb4\001" +
    "\002\000\004\033\046\001\002\000\010\023\047\024\052" +
    "\040\051\001\002\000\046\003\uffb1\004\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\013\uffb1\014\uffb1\017\uffb1\020\uffb1\022\uffb1" +
    "\024\uffb1\040\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051" +
    "\uffb1\052\uffb1\001\002\000\044\003\ufff0\004\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\013\ufff0\014\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\040\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\052\ufff0\001\002\000\046\003\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\013\uffb2\014\uffb2\017\uffb2\020\uffb2\022\uffb2" +
    "\024\uffb2\040\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051" +
    "\uffb2\052\uffb2\001\002\000\046\003\uffb3\004\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\022" +
    "\uffb3\024\uffb3\040\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\001\002\000\044\003\uffef\004\uffef\006" +
    "\uffef\007\uffef\010\uffef\013\uffef\014\uffef\017\uffef\020\uffef" +
    "\022\uffef\024\uffef\040\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\052\uffef\001\002\000\006\014\014\040\015\001\002" +
    "\000\006\014\014\040\015\001\002\000\054\003\uffcf\004" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\017\uffcf\020\uffcf\024\uffcf\034\uffcf\035\uffcf\036\060\037" +
    "\057\040\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\052\uffcf" +
    "\001\002\000\006\014\014\040\015\001\002\000\006\014" +
    "\014\040\015\001\002\000\054\003\uffcc\004\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\024\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052\uffcc\001\002\000" +
    "\054\003\uffcb\004\uffcb\006\uffcb\007\uffcb\010\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\020\uffcb\024\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\052\uffcb\001\002\000\054\003\uffce\004\uffce\006" +
    "\uffce\007\uffce\010\uffce\013\uffce\014\uffce\015\uffce\017\uffce" +
    "\020\uffce\024\uffce\034\uffce\035\uffce\036\060\037\057\040" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\052\uffce\001\002" +
    "\000\016\002\uffff\003\uffff\025\uffff\041\uffff\042\uffff\043" +
    "\uffff\001\002\000\016\002\ufff1\003\073\025\071\041\041" +
    "\042\043\043\044\001\002\000\016\002\ufff1\003\073\025" +
    "\071\041\041\042\043\043\044\001\002\000\004\002\ufffe" +
    "\001\002\000\016\002\ufff1\003\073\025\071\041\041\042" +
    "\043\043\044\001\002\000\004\024\uffbf\001\002\000\004" +
    "\024\uffc7\001\002\000\016\002\ufff1\003\073\025\071\041" +
    "\041\042\043\043\044\001\002\000\004\002\ufff2\001\002" +
    "\000\004\024\077\001\002\000\016\002\uffc6\003\uffc6\025" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002\000\004\014\100" +
    "\001\002\000\012\015\uffb9\041\041\042\043\043\044\001" +
    "\002\000\004\015\uffc5\001\002\000\004\024\103\001\002" +
    "\000\006\015\uffb7\021\104\001\002\000\012\015\uffb9\041" +
    "\041\042\043\043\044\001\002\000\004\015\uffba\001\002" +
    "\000\004\015\uffb8\001\002\000\004\015\110\001\002\000" +
    "\004\016\111\001\002\000\026\003\uffc4\004\uffc4\014\uffc4" +
    "\020\uffc4\024\uffc4\040\uffc4\044\uffc4\045\uffc4\046\uffc4\052" +
    "\uffc4\001\002\000\026\003\033\004\uffee\014\014\020\ufff5" +
    "\024\032\040\015\044\uffe5\045\uffe2\046\uffde\052\013\001" +
    "\002\000\004\020\116\001\002\000\004\017\115\001\002" +
    "\000\016\002\uffc3\003\uffc3\025\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\001\002\000\010\023\uffc2\024\uffc2\040\uffc2\001\002" +
    "\000\010\023\047\024\052\040\051\001\002\000\004\017" +
    "\uffc1\001\002\000\004\017\uffc0\001\002\000\004\024\124" +
    "\001\002\000\016\002\uffbe\003\uffbe\025\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\001\002\000\004\014\125\001\002\000\012" +
    "\015\uffb9\041\041\042\043\043\044\001\002\000\004\015" +
    "\uffbd\001\002\000\004\015\130\001\002\000\004\016\131" +
    "\001\002\000\026\003\uffbc\004\uffbc\014\uffbc\017\uffbc\024" +
    "\uffbc\040\uffbc\044\uffbc\045\uffbc\046\uffbc\052\uffbc\001\002" +
    "\000\026\003\033\004\uffee\014\014\017\ufff5\024\032\040" +
    "\015\044\uffe5\045\uffe2\046\uffde\052\013\001\002\000\004" +
    "\017\134\001\002\000\016\002\uffbb\003\uffbb\025\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\ufff3\001\002\000\020\006\ufffd\007\ufffd\010" +
    "\ufffd\013\ufffd\017\ufffd\020\ufffd\047\ufffd\001\002\000\004" +
    "\014\141\001\002\000\010\024\145\032\142\040\144\001" +
    "\002\000\006\024\145\040\144\001\002\000\006\015\uffd8" +
    "\022\uffd8\001\002\000\004\026\204\001\002\000\004\026" +
    "\172\001\002\000\004\015\147\001\002\000\004\005\uffed" +
    "\001\002\000\004\005\151\001\002\000\032\003\033\004" +
    "\uffee\006\ufff5\007\ufff5\010\ufff5\014\014\024\032\040\015" +
    "\044\uffe5\045\uffe2\046\uffde\052\013\001\002\000\010\006" +
    "\156\007\155\010\uffe6\001\002\000\004\010\uffe9\001\002" +
    "\000\004\010\171\001\002\000\004\014\162\001\002\000" +
    "\004\005\157\001\002\000\026\003\uffe8\004\uffe8\010\uffe8" +
    "\014\uffe8\024\uffe8\040\uffe8\044\uffe8\045\uffe8\046\uffe8\052" +
    "\uffe8\001\002\000\026\003\033\004\uffee\010\ufff5\014\014" +
    "\024\032\040\015\044\uffe5\045\uffe2\046\uffde\052\013\001" +
    "\002\000\004\010\uffe7\001\002\000\010\024\145\032\142" +
    "\040\144\001\002\000\004\015\164\001\002\000\004\005" +
    "\uffeb\001\002\000\004\005\166\001\002\000\032\003\033" +
    "\004\uffee\006\ufff5\007\ufff5\010\ufff5\014\014\024\032\040" +
    "\015\044\uffe5\045\uffe2\046\uffde\052\013\001\002\000\010" +
    "\006\156\007\155\010\uffe6\001\002\000\004\010\uffea\001" +
    "\002\000\042\003\uffec\004\uffec\006\uffec\007\uffec\010\uffec" +
    "\013\uffec\014\uffec\017\uffec\020\uffec\024\uffec\040\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\052\uffec\001\002\000\006" +
    "\024\175\040\174\001\002\000\006\015\uffd7\022\uffd7\001" +
    "\002\000\012\015\uffd1\022\uffd1\030\200\031\177\001\002" +
    "\000\012\015\uffd1\022\uffd1\030\200\031\177\001\002\000" +
    "\006\015\uffd5\022\uffd5\001\002\000\010\024\145\032\142" +
    "\040\144\001\002\000\010\024\145\032\142\040\144\001" +
    "\002\000\006\015\uffd3\022\uffd3\001\002\000\006\015\uffd2" +
    "\022\uffd2\001\002\000\006\015\uffd4\022\uffd4\001\002\000" +
    "\006\024\175\040\174\001\002\000\006\015\uffd6\022\uffd6" +
    "\001\002\000\006\015\uffd9\022\uffd9\001\002\000\020\006" +
    "\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\047\ufff6" +
    "\001\002\000\004\014\211\001\002\000\010\024\145\032" +
    "\142\040\144\001\002\000\004\015\213\001\002\000\026" +
    "\003\uffe4\004\uffe4\013\uffe4\014\uffe4\024\uffe4\040\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\052\uffe4\001\002\000\026\003\033" +
    "\004\uffee\013\ufff5\014\014\024\032\040\015\044\uffe5\045" +
    "\uffe2\046\uffde\052\013\001\002\000\004\013\216\001\002" +
    "\000\042\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\013" +
    "\uffe3\014\uffe3\017\uffe3\020\uffe3\024\uffe3\040\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\052\uffe3\001\002\000\020\006" +
    "\ufffc\007\ufffc\010\ufffc\013\ufffc\017\ufffc\020\ufffc\047\ufffc" +
    "\001\002\000\004\014\221\001\002\000\004\024\222\001" +
    "\002\000\004\015\223\001\002\000\004\050\uffdd\001\002" +
    "\000\004\050\226\001\002\000\004\013\234\001\002\000" +
    "\010\023\047\024\052\040\051\001\002\000\004\051\230" +
    "\001\002\000\026\003\033\004\uffee\014\014\024\032\040" +
    "\015\044\uffe5\045\uffe2\046\uffde\047\ufff5\052\013\001\002" +
    "\000\004\047\232\001\002\000\006\013\uffda\050\226\001" +
    "\002\000\004\013\uffdb\001\002\000\042\003\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\017\uffdc\020" +
    "\uffdc\024\uffdc\040\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\052\uffdc\001\002\000\004\014\236\001\002\000\004\024" +
    "\032\001\002\000\004\022\240\001\002\000\010\024\145" +
    "\032\142\040\144\001\002\000\004\022\uffe1\001\002\000" +
    "\004\022\243\001\002\000\010\024\145\032\142\040\144" +
    "\001\002\000\004\015\245\001\002\000\026\003\uffe0\004" +
    "\uffe0\013\uffe0\014\uffe0\024\uffe0\040\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\052\uffe0\001\002\000\026\003\033\004\uffee\013" +
    "\ufff5\014\014\024\032\040\015\044\uffe5\045\uffe2\046\uffde" +
    "\052\013\001\002\000\004\013\250\001\002\000\042\003" +
    "\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf" +
    "\017\uffdf\020\uffdf\024\uffdf\040\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\052\uffdf\001\002\000\020\006\ufff7\007\ufff7" +
    "\010\ufff7\013\ufff7\017\ufff7\020\ufff7\047\ufff7\001\002\000" +
    "\010\015\253\034\055\035\054\001\002\000\054\003\uffc8" +
    "\004\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\017\uffc8\020\uffc8\024\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052" +
    "\uffc8\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\013\ufff9" +
    "\017\ufff9\020\ufff9\047\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\011\001\001\000\036\003\026\004" +
    "\025\007\020\010\033\011\015\030\034\033\030\034\022" +
    "\035\027\036\023\041\024\045\021\047\016\052\017\001" +
    "\001\000\036\003\253\004\025\007\020\010\033\011\015" +
    "\030\034\033\030\034\022\035\027\036\023\041\024\045" +
    "\021\047\016\052\017\001\001\000\010\033\251\034\022" +
    "\035\027\001\001\000\002\001\001\000\036\003\250\004" +
    "\025\007\020\010\033\011\015\030\034\033\030\034\022" +
    "\035\027\036\023\041\024\045\021\047\016\052\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\216" +
    "\004\025\007\020\010\033\011\015\030\034\033\030\034" +
    "\022\035\027\036\023\041\024\045\021\047\016\052\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\206\004\025\007\020\010\033\011\015\030\034\033\030" +
    "\034\022\035\027\036\023\041\024\045\021\047\016\052" +
    "\017\001\001\000\002\001\001\000\036\003\136\004\025" +
    "\007\020\010\033\011\015\030\034\033\030\034\022\035" +
    "\027\036\023\041\024\045\021\047\016\052\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\044\001\001\000\036\003\037\004\025\007\020" +
    "\010\033\011\015\030\034\033\030\034\022\035\027\036" +
    "\023\041\024\045\021\047\016\052\017\001\001\000\036" +
    "\003\036\004\025\007\020\010\033\011\015\030\034\033" +
    "\030\034\022\035\027\036\023\041\024\045\021\047\016" +
    "\052\017\001\001\000\036\003\035\004\025\007\020\010" +
    "\033\011\015\030\034\033\030\034\022\035\027\036\023" +
    "\041\024\045\021\047\016\052\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\062\035\027\001\001" +
    "\000\006\034\055\035\027\001\001\000\002\001\001\000" +
    "\004\035\061\001\001\000\004\035\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\064\001\001\000\012\017\066\020\067\024\065\032\071" +
    "\001\001\000\012\017\135\020\067\024\065\032\071\001" +
    "\001\000\002\001\001\000\012\017\134\020\067\024\065" +
    "\032\071\001\001\000\004\060\121\001\001\000\004\054" +
    "\074\001\001\000\012\017\073\020\067\024\065\032\071" +
    "\001\001\000\002\001\001\000\004\021\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\100\032\101" +
    "\001\001\000\004\055\106\001\001\000\002\001\001\000" +
    "\004\027\104\001\001\000\006\026\105\032\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\111\001\001\000\040\003\112" +
    "\004\025\007\020\010\033\011\015\022\113\030\034\033" +
    "\030\034\022\035\027\036\023\041\024\045\021\047\016" +
    "\052\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\116\001\001\000\006\023\117" +
    "\031\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\125\032\101\001\001\000\004\061\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\131" +
    "\001\001\000\036\003\132\004\025\007\020\010\033\011" +
    "\015\030\034\033\030\034\022\035\027\036\023\041\024" +
    "\045\021\047\016\052\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\145\014\142\001" +
    "\001\000\004\014\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\147\001\001\000\002\001\001\000\036\003\151\004\025" +
    "\007\020\010\033\011\015\030\034\033\030\034\022\035" +
    "\027\036\023\041\024\045\021\047\016\052\017\001\001" +
    "\000\006\005\153\006\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\157\001\001\000\036\003\160\004\025\007\020\010" +
    "\033\011\015\030\034\033\030\034\022\035\027\036\023" +
    "\041\024\045\021\047\016\052\017\001\001\000\002\001" +
    "\001\000\006\013\162\014\142\001\001\000\002\001\001" +
    "\000\004\043\164\001\001\000\002\001\001\000\036\003" +
    "\166\004\025\007\020\010\033\011\015\030\034\033\030" +
    "\034\022\035\027\036\023\041\024\045\021\047\016\052" +
    "\017\001\001\000\006\005\167\006\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\172\001\001\000" +
    "\002\001\001\000\004\016\202\001\001\000\004\016\175" +
    "\001\001\000\002\001\001\000\006\013\201\014\142\001" +
    "\001\000\006\013\200\014\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\211\014\142\001\001\000" +
    "\002\001\001\000\004\046\213\001\001\000\036\003\214" +
    "\004\025\007\020\010\033\011\015\030\034\033\030\034" +
    "\022\035\027\036\023\041\024\045\021\047\016\052\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\223\001\001\000\004\012\224\001\001\000" +
    "\002\001\001\000\004\031\226\001\001\000\002\001\001" +
    "\000\036\003\230\004\025\007\020\010\033\011\015\030" +
    "\034\033\030\034\022\035\027\036\023\041\024\045\021" +
    "\047\016\052\017\001\001\000\002\001\001\000\004\012" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\236\001\001\000\002\001\001\000" +
    "\006\013\240\014\142\001\001\000\004\050\241\001\001" +
    "\000\002\001\001\000\006\013\243\014\142\001\001\000" +
    "\002\001\001\000\004\051\245\001\001\000\036\003\246" +
    "\004\025\007\020\010\033\011\015\030\034\033\030\034" +
    "\022\035\027\036\023\041\024\045\021\047\016\052\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right));
                        if(s.right>=0)
                                m.append(", columna "+(s.left));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.right)+", column "+cur_token.left);
                System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= error EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= FOR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= S EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG ::= id opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= NT$2 ifstart parIzq COND parDer NT$3 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSIF ::= elseif parIzq COND parDer NT$4 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= elseclause ifthen NT$5 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= NT$6 whilestart parIzq COND parDer NT$7 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= NT$8 forstart parIzq ASIG pcoma COND NT$9 pcoma COND parDer NT$10 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SELECT ::= NT$11 selectstart parIzq id parDer NT$12 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // S ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("El valor de E: "+e.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$13 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETFUNC ::= TIPO NT$13 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETFUNC2 ::= id parIzq ARGS NT$14 parDer cbOpen NT$15 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETFUNCBODY ::= EXP ret NT$16 RETVAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$17 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VOIDFUNC ::= voidType NT$17 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$18 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VOIDFUNC2 ::= id parIzq ARGS NT$18 parDer cbOpen NT$19 EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARGS2 ::= coma ARGS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALS ::= number 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
