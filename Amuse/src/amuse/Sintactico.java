
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\055\002\000\002\056" +
    "\002\000\002\002\014\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\057\002\000\002\003\005\000\002\003\004\000\002\003" +
    "\002\000\002\051\004\000\002\052\005\000\002\052\005" +
    "\000\002\052\002\000\002\053\004\000\002\053\002\000" +
    "\002\054\005\000\002\054\002\000\002\025\004\000\002" +
    "\025\004\000\002\025\002\000\002\060\002\000\002\022" +
    "\011\000\002\061\002\000\002\022\011\000\002\022\002" +
    "\000\002\023\004\000\002\023\002\000\002\024\005\000" +
    "\002\024\002\000\002\041\006\000\002\034\006\000\002" +
    "\040\005\000\002\040\002\000\002\062\002\000\002\063" +
    "\002\000\002\004\014\000\002\064\002\000\002\005\012" +
    "\000\002\005\003\000\002\065\002\000\002\006\006\000" +
    "\002\006\002\000\002\066\002\000\002\067\002\000\002" +
    "\007\012\000\002\012\006\000\002\070\002\000\002\071" +
    "\002\000\002\010\016\000\002\011\004\000\002\072\002" +
    "\000\002\073\002\000\002\013\012\000\002\074\002\000" +
    "\002\014\011\000\002\015\003\000\002\015\002\000\002" +
    "\016\004\000\002\016\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\002\000\002\050\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\003\000\002\047\005\000\002\047" +
    "\005\000\002\047\003\000\002\045\003\000\002\045\005" +
    "\000\002\045\003\000\002\075\002\000\002\076\002\000" +
    "\002\026\014\000\002\030\005\000\002\027\003\000\002" +
    "\077\002\000\002\100\002\000\002\031\014\000\002\032" +
    "\005\000\002\032\002\000\002\033\006\000\002\033\002" +
    "\000\002\043\005\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\042\006\000\002\042" +
    "\006\000\002\042\006\000\002\036\004\000\002\036\002" +
    "\000\002\037\004\000\002\037\004\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\014\011\uffe2\026\012\027\007\042\004\043" +
    "\005\001\002\000\014\014\uff9f\020\uff9f\022\uff9f\025\uff9f" +
    "\034\uff9f\001\002\000\014\014\uff9e\020\uff9e\022\uff9e\025" +
    "\uff9e\034\uff9e\001\002\000\004\011\037\001\002\000\014" +
    "\014\uff9d\020\uff9d\022\uff9d\025\uff9d\034\uff9d\001\002\000" +
    "\006\022\020\025\031\001\002\000\004\002\030\001\002" +
    "\000\004\025\013\001\002\000\004\013\014\001\002\000" +
    "\012\014\uffe0\027\007\042\004\043\005\001\002\000\004" +
    "\014\025\001\002\000\010\014\uffde\020\021\022\020\001" +
    "\002\000\004\014\uffe1\001\002\000\004\023\024\001\002" +
    "\000\010\027\007\042\004\043\005\001\002\000\010\014" +
    "\uffde\020\021\022\020\001\002\000\004\014\uffdf\001\002" +
    "\000\014\014\uffa0\020\uffa0\022\uffa0\025\uffa0\034\uffa0\001" +
    "\002\000\014\011\uffe4\026\uffe4\027\uffe4\042\uffe4\043\uffe4" +
    "\001\002\000\014\011\uffe2\026\012\027\007\042\004\043" +
    "\005\001\002\000\004\011\uffe3\001\002\000\004\002\001" +
    "\001\002\000\004\013\032\001\002\000\012\014\uffe0\027" +
    "\007\042\004\043\005\001\002\000\004\014\034\001\002" +
    "\000\014\011\uffe6\026\uffe6\027\uffe6\042\uffe6\043\uffe6\001" +
    "\002\000\014\011\uffe2\026\012\027\007\042\004\043\005" +
    "\001\002\000\004\011\uffe5\001\002\000\004\013\040\001" +
    "\002\000\004\014\041\001\002\000\004\015\042\001\002" +
    "\000\024\003\000\004\000\016\000\025\000\045\000\046" +
    "\000\050\000\051\000\055\000\001\002\000\024\003\060" +
    "\004\uffd9\016\ufff2\025\050\045\056\046\046\050\052\051" +
    "\uffc8\055\053\001\002\000\040\003\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\012\ufff5\016\ufff5\017\ufff5\025\ufff5\045" +
    "\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002" +
    "\000\004\004\333\001\002\000\004\013\uffcc\001\002\000" +
    "\040\003\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\016\ufff2\017\ufff2\025\050\045\056\046\046\050\052\051" +
    "\uffc8\052\ufff2\055\053\001\002\000\054\003\uffee\004\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\201\016\uffee\017" +
    "\uffee\022\304\025\uffee\027\007\034\uffda\042\004\043\005" +
    "\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\055\uffee\001" +
    "\002\000\040\003\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\016\ufff2\017\ufff2\025\050\045\056\046\046\050" +
    "\052\051\uffc8\052\ufff2\055\053\001\002\000\004\013\277" +
    "\001\002\000\040\003\060\004\uffd9\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\016\ufff2\017\ufff2\025\050\045\056\046\046" +
    "\050\052\051\uffc8\052\ufff2\055\053\001\002\000\040\003" +
    "\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2" +
    "\017\ufff2\025\050\045\056\046\046\050\052\051\uffc8\052" +
    "\ufff2\055\053\001\002\000\040\003\060\004\uffd9\006\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\050\045" +
    "\056\046\046\050\052\051\uffc8\052\ufff2\055\053\001\002" +
    "\000\004\013\uffd0\001\002\000\040\003\060\004\uffd9\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2\025\050" +
    "\045\056\046\046\050\052\051\uffc8\052\ufff2\055\053\001" +
    "\002\000\040\003\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\016\ufff2\017\ufff2\025\050\045\056\046\046\050" +
    "\052\051\uffc8\052\ufff2\055\053\001\002\000\040\003\060" +
    "\004\uffd9\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017" +
    "\ufff2\025\050\045\056\046\046\050\052\051\uffc8\052\ufff2" +
    "\055\053\001\002\000\004\051\217\001\002\000\040\003" +
    "\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2" +
    "\017\ufff2\025\050\045\056\046\046\050\052\051\uffc8\052" +
    "\ufff2\055\053\001\002\000\004\016\065\001\002\000\014" +
    "\002\uffff\026\uffff\027\uffff\042\uffff\043\uffff\001\002\000" +
    "\014\002\uffe7\026\072\027\007\042\004\043\005\001\002" +
    "\000\004\002\ufffe\001\002\000\014\002\uffe7\026\072\027" +
    "\007\042\004\043\005\001\002\000\006\022\020\025\115" +
    "\001\002\000\004\025\075\001\002\000\014\002\uffe7\026" +
    "\072\027\007\042\004\043\005\001\002\000\004\002\uffe8" +
    "\001\002\000\004\013\uffa7\001\002\000\004\013\077\001" +
    "\002\000\012\014\uffa3\027\007\042\004\043\005\001\002" +
    "\000\004\014\110\001\002\000\006\022\020\025\102\001" +
    "\002\000\006\014\uffa1\020\103\001\002\000\010\027\007" +
    "\042\004\043\005\001\002\000\004\014\uffa4\001\002\000" +
    "\006\022\020\025\106\001\002\000\006\014\uffa1\020\103" +
    "\001\002\000\004\014\uffa2\001\002\000\004\015\111\001" +
    "\002\000\024\003\060\004\uffd9\016\ufff2\025\050\045\056" +
    "\046\046\050\052\051\uffc8\055\053\001\002\000\004\016" +
    "\uffa6\001\002\000\004\016\114\001\002\000\014\002\uffa5" +
    "\026\uffa5\027\uffa5\042\uffa5\043\uffa5\001\002\000\004\013" +
    "\uffac\001\002\000\004\013\117\001\002\000\012\014\uffa3" +
    "\027\007\042\004\043\005\001\002\000\004\014\121\001" +
    "\002\000\004\015\122\001\002\000\024\003\060\004\uffd9" +
    "\017\ufff2\025\050\045\056\046\046\050\052\051\uffc8\055" +
    "\053\001\002\000\004\017\127\001\002\000\004\016\uffab" +
    "\001\002\000\004\016\126\001\002\000\014\002\uffaa\026" +
    "\uffaa\027\uffaa\042\uffaa\043\uffaa\001\002\000\016\013\140" +
    "\015\142\024\143\025\132\041\134\044\141\001\002\000" +
    "\060\003\uffad\004\uffad\006\uffad\007\uffad\010\uffad\012\uffad" +
    "\014\uffad\016\uffad\017\uffad\020\uffad\021\uffad\025\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\045\uffad\046\uffad\050\uffad" +
    "\051\uffad\052\uffad\054\uffad\055\uffad\001\002\000\004\016" +
    "\uffa9\001\002\000\064\003\uffee\004\uffee\006\uffee\007\uffee" +
    "\010\uffee\012\uffee\013\201\014\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\202\025\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\054" +
    "\uffee\055\uffee\001\002\000\050\003\uff99\004\uff99\006\uff99" +
    "\007\uff99\010\uff99\012\uff99\014\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\025\uff99\045\uff99\046\uff99\050\uff99\051\uff99" +
    "\052\uff99\054\uff99\055\uff99\001\002\000\060\003\uffaf\004" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\014\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\025\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\054\uffaf\055\uffaf\001\002\000\060\003\uffb3\004\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\025\uffb3\035\uffb3\036\uffb3\037\152\040" +
    "\151\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3" +
    "\055\uffb3\001\002\000\050\003\uff9a\004\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\025\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\054\uff9a\055\uff9a\001\002\000\004\016\uffa8\001\002" +
    "\000\010\013\140\025\132\041\134\001\002\000\050\003" +
    "\uff9b\004\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\014\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\025\uff9b\045\uff9b\046" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\055\uff9b\001\002" +
    "\000\014\013\140\024\160\025\132\041\134\044\157\001" +
    "\002\000\050\003\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\012\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\025" +
    "\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c" +
    "\055\uff9c\001\002\000\060\003\uffb0\004\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\012\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\025\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\045" +
    "\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0" +
    "\001\002\000\054\003\uffb6\004\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\012\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\025\uffb6\035\147\036\146\045\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\054\uffb6\055\uffb6\001\002\000\010\013\140" +
    "\025\132\041\134\001\002\000\010\013\140\025\132\041" +
    "\134\001\002\000\060\003\uffb5\004\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\012\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\025\uffb5\035\uffb5\036\uffb5\037\152\040\151\045\uffb5" +
    "\046\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\001" +
    "\002\000\010\013\140\025\132\041\134\001\002\000\010" +
    "\013\140\025\132\041\134\001\002\000\060\003\uffb2\004" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\025\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\055\uffb2\001\002\000\060\003\uffb1\004\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\025\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1" +
    "\055\uffb1\001\002\000\060\003\uffb4\004\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\012\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\025\uffb4\035\uffb4\036\uffb4\037\152\040\151\045" +
    "\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4" +
    "\001\002\000\006\016\uff94\020\162\001\002\000\006\016" +
    "\uff94\020\162\001\002\000\006\016\uff94\020\162\001\002" +
    "\000\004\016\172\001\002\000\014\013\140\024\166\025" +
    "\132\041\134\044\165\001\002\000\004\016\uff95\001\002" +
    "\000\006\016\uff94\020\162\001\002\000\006\016\uff94\020" +
    "\162\001\002\000\006\016\uff94\020\162\001\002\000\004" +
    "\016\uff92\001\002\000\004\016\uff91\001\002\000\004\016" +
    "\uff93\001\002\000\050\003\uff97\004\uff97\006\uff97\007\uff97" +
    "\010\uff97\012\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\025\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052\uff97" +
    "\054\uff97\055\uff97\001\002\000\004\016\174\001\002\000" +
    "\050\003\uff96\004\uff96\006\uff96\007\uff96\010\uff96\012\uff96" +
    "\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\025\uff96\045" +
    "\uff96\046\uff96\050\uff96\051\uff96\052\uff96\054\uff96\055\uff96" +
    "\001\002\000\004\016\176\001\002\000\050\003\uff98\004" +
    "\uff98\006\uff98\007\uff98\010\uff98\012\uff98\014\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\025\uff98\045\uff98\046\uff98\050" +
    "\uff98\051\uff98\052\uff98\054\uff98\055\uff98\001\002\000\010" +
    "\014\200\035\147\036\146\001\002\000\060\003\uffae\004" +
    "\uffae\006\uffae\007\uffae\010\uffae\012\uffae\014\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\025\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae" +
    "\054\uffae\055\uffae\001\002\000\020\013\140\014\uffec\015" +
    "\142\024\143\025\132\041\134\044\141\001\002\000\004" +
    "\041\204\001\002\000\060\003\ufff1\004\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\025\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\045" +
    "\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1" +
    "\001\002\000\004\023\205\001\002\000\060\003\ufff0\004" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\025\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\054\ufff0\055\ufff0\001\002\000\006\014\uffea\020\212\001" +
    "\002\000\004\014\210\001\002\000\060\003\uffef\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\012\uffef\014\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\025\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\054" +
    "\uffef\055\uffef\001\002\000\004\014\uffed\001\002\000\016" +
    "\013\140\015\142\024\143\025\132\041\134\044\141\001" +
    "\002\000\006\014\uffea\020\212\001\002\000\004\014\uffeb" +
    "\001\002\000\004\002\uffe9\001\002\000\020\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\016\ufff8\017\ufff8\052\ufff8\001\002" +
    "\000\004\013\220\001\002\000\004\025\221\001\002\000" +
    "\004\014\222\001\002\000\004\053\uffc7\001\002\000\004" +
    "\053\225\001\002\000\004\012\235\001\002\000\016\013" +
    "\140\015\142\024\143\025\132\041\134\044\141\001\002" +
    "\000\004\054\uffc5\001\002\000\004\054\230\001\002\000" +
    "\024\003\060\004\uffd9\025\050\045\056\046\046\050\052" +
    "\051\uffc8\052\ufff2\055\053\001\002\000\004\052\232\001" +
    "\002\000\006\012\uffc2\053\225\001\002\000\004\012\uffc4" +
    "\001\002\000\004\012\uffc3\001\002\000\040\003\uffc6\004" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\016\uffc6\017\uffc6" +
    "\025\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\055" +
    "\uffc6\001\002\000\020\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\016\ufff6\017\ufff6\052\ufff6\001\002\000\020\006\ufffd\007" +
    "\ufffd\010\ufffd\012\ufffd\016\ufffd\017\ufffd\052\ufffd\001\002" +
    "\000\020\006\ufff3\007\ufff3\010\ufff3\012\ufff3\016\ufff3\017" +
    "\ufff3\052\ufff3\001\002\000\004\013\242\001\002\000\012" +
    "\024\243\025\247\033\244\041\246\001\002\000\006\014" +
    "\uffbe\021\uffbe\001\002\000\010\024\243\025\247\041\246" +
    "\001\002\000\006\014\uffc0\021\uffc0\001\002\000\004\030" +
    "\271\001\002\000\004\030\255\001\002\000\004\014\251" +
    "\001\002\000\024\003\uffcf\004\uffcf\012\uffcf\025\uffcf\045" +
    "\uffcf\046\uffcf\050\uffcf\051\uffcf\055\uffcf\001\002\000\024" +
    "\003\060\004\uffd9\012\ufff2\025\050\045\056\046\046\050" +
    "\052\051\uffc8\055\053\001\002\000\004\012\254\001\002" +
    "\000\040\003\uffce\004\uffce\006\uffce\007\uffce\010\uffce\012" +
    "\uffce\016\uffce\017\uffce\025\uffce\045\uffce\046\uffce\050\uffce" +
    "\051\uffce\052\uffce\055\uffce\001\002\000\010\024\256\025" +
    "\261\041\260\001\002\000\012\014\uffb7\021\uffb7\031\264" +
    "\032\263\001\002\000\006\014\uffbf\021\uffbf\001\002\000" +
    "\012\014\uffb7\021\uffb7\031\264\032\263\001\002\000\012" +
    "\014\uffb7\021\uffb7\031\264\032\263\001\002\000\006\014" +
    "\uffbc\021\uffbc\001\002\000\012\024\243\025\247\033\244" +
    "\041\246\001\002\000\012\024\243\025\247\033\244\041" +
    "\246\001\002\000\006\014\uffb9\021\uffb9\001\002\000\006" +
    "\014\uffb8\021\uffb8\001\002\000\006\014\uffba\021\uffba\001" +
    "\002\000\006\014\uffbb\021\uffbb\001\002\000\010\024\256" +
    "\025\261\041\260\001\002\000\006\014\uffbd\021\uffbd\001" +
    "\002\000\006\014\uffc1\021\uffc1\001\002\000\020\006\ufffa" +
    "\007\ufffa\010\ufffa\012\ufffa\016\ufffa\017\ufffa\052\ufffa\001" +
    "\002\000\020\006\ufffc\007\ufffc\010\ufffc\012\ufffc\016\ufffc" +
    "\017\ufffc\052\ufffc\001\002\000\020\006\ufff9\007\ufff9\010" +
    "\ufff9\012\ufff9\016\ufff9\017\ufff9\052\ufff9\001\002\000\016" +
    "\013\140\015\142\024\143\025\132\041\134\044\141\001" +
    "\002\000\004\014\301\001\002\000\040\003\uffcd\004\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\012\uffcd\016\uffcd\017\uffcd\025" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd" +
    "\001\002\000\020\006\ufff7\007\ufff7\010\ufff7\012\ufff7\016" +
    "\ufff7\017\ufff7\052\ufff7\001\002\000\004\034\312\001\002" +
    "\000\004\041\310\001\002\000\006\022\020\034\306\001" +
    "\002\000\016\013\140\015\142\024\143\025\132\041\134" +
    "\044\141\001\002\000\042\003\uffdd\004\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\012\uffdd\016\uffdd\017\uffdd\021\uffdd\025\uffdd" +
    "\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd\001" +
    "\002\000\004\023\311\001\002\000\042\003\ufff0\004\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\016\ufff0\017\ufff0\025" +
    "\ufff0\034\uffdb\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\055\ufff0\001\002\000\016\013\140\015\142\024\143\025" +
    "\132\041\134\044\141\001\002\000\040\003\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\016\uffdc\017\uffdc\025" +
    "\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\055\uffdc" +
    "\001\002\000\020\006\ufffb\007\ufffb\010\ufffb\012\ufffb\016" +
    "\ufffb\017\ufffb\052\ufffb\001\002\000\004\013\316\001\002" +
    "\000\004\025\320\001\002\000\004\021\321\001\002\000" +
    "\010\027\007\042\004\043\005\001\002\000\012\024\uffcb" +
    "\025\uffcb\033\uffcb\041\uffcb\001\002\000\012\024\243\025" +
    "\247\033\244\041\246\001\002\000\004\021\324\001\002" +
    "\000\004\025\326\001\002\000\004\014\330\001\002\000" +
    "\004\047\327\001\002\000\004\014\uffc9\001\002\000\024" +
    "\003\060\004\uffd9\012\ufff2\025\050\045\056\046\046\050" +
    "\052\051\uffc8\055\053\001\002\000\004\012\332\001\002" +
    "\000\040\003\uffca\004\uffca\006\uffca\007\uffca\010\uffca\012" +
    "\uffca\016\uffca\017\uffca\025\uffca\045\uffca\046\uffca\050\uffca" +
    "\051\uffca\052\uffca\055\uffca\001\002\000\004\013\334\001" +
    "\002\000\012\024\243\025\247\033\244\041\246\001\002" +
    "\000\004\014\336\001\002\000\004\005\uffd8\001\002\000" +
    "\004\005\340\001\002\000\030\003\060\004\uffd9\006\ufff2" +
    "\007\ufff2\010\ufff2\025\050\045\056\046\046\050\052\051" +
    "\uffc8\055\053\001\002\000\010\006\345\007\344\010\uffd1" +
    "\001\002\000\004\010\uffd4\001\002\000\004\010\360\001" +
    "\002\000\004\013\351\001\002\000\004\005\346\001\002" +
    "\000\024\003\uffd3\004\uffd3\010\uffd3\025\uffd3\045\uffd3\046" +
    "\uffd3\050\uffd3\051\uffd3\055\uffd3\001\002\000\024\003\060" +
    "\004\uffd9\010\ufff2\025\050\045\056\046\046\050\052\051" +
    "\uffc8\055\053\001\002\000\004\010\uffd2\001\002\000\012" +
    "\024\243\025\247\033\244\041\246\001\002\000\004\014" +
    "\353\001\002\000\004\005\uffd6\001\002\000\004\005\355" +
    "\001\002\000\030\003\060\004\uffd9\006\ufff2\007\ufff2\010" +
    "\ufff2\025\050\045\056\046\046\050\052\051\uffc8\055\053" +
    "\001\002\000\010\006\345\007\344\010\uffd1\001\002\000" +
    "\004\010\uffd5\001\002\000\040\003\uffd7\004\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\012\uffd7\016\uffd7\017\uffd7\025\uffd7\045" +
    "\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\001\002" +
    "\000\040\003\060\004\uffd9\006\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\016\ufff2\017\ufff2\025\050\045\056\046\046\050\052" +
    "\051\uffc8\052\ufff2\055\053\001\002\000\020\006\ufff4\007" +
    "\ufff4\010\ufff4\012\ufff4\016\ufff4\017\ufff4\052\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\010\002\010\022\005\043\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\014\043\015\001\001" +
    "\000\002\001\001\000\004\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\021\001\001\000\004" +
    "\024\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\025\001\001\000\006\022\026\043\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\032\043\015\001\001\000\002\001\001\000\004" +
    "\060\034\001\001\000\006\022\035\043\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\042\001\001\000\030\003\063\004" +
    "\053\007\046\010\050\012\056\013\060\034\054\041\062" +
    "\051\043\062\044\072\061\001\001\000\004\057\360\001" +
    "\001\000\002\001\001\000\004\070\314\001\001\000\030" +
    "\003\313\004\053\007\046\010\050\012\056\013\060\034" +
    "\054\041\062\051\043\062\044\072\061\001\001\000\010" +
    "\040\302\043\304\052\202\001\001\000\030\003\301\004" +
    "\053\007\046\010\050\012\056\013\060\034\054\041\062" +
    "\051\043\062\044\072\061\001\001\000\002\001\001\000" +
    "\030\003\275\004\053\007\046\010\050\012\056\013\060" +
    "\034\054\041\062\051\043\062\044\072\061\001\001\000" +
    "\030\003\274\004\053\007\046\010\050\012\056\013\060" +
    "\034\054\041\062\051\043\062\044\072\061\001\001\000" +
    "\030\003\273\004\053\007\046\010\050\012\056\013\060" +
    "\034\054\041\062\051\043\062\044\072\061\001\001\000" +
    "\004\066\240\001\001\000\030\003\237\004\053\007\046" +
    "\010\050\012\056\013\060\034\054\041\062\051\043\062" +
    "\044\072\061\001\001\000\030\003\236\004\053\007\046" +
    "\010\050\012\056\013\060\034\054\041\062\051\043\062" +
    "\044\072\061\001\001\000\030\003\235\004\053\007\046" +
    "\010\050\012\056\013\060\034\054\041\062\051\043\062" +
    "\044\072\061\001\001\000\002\001\001\000\030\003\215" +
    "\004\053\007\046\010\050\012\056\013\060\034\054\041" +
    "\062\051\043\062\044\072\061\001\001\000\002\001\001" +
    "\000\004\056\065\001\001\000\012\025\066\026\067\031" +
    "\072\043\070\001\001\000\002\001\001\000\012\025\214" +
    "\026\067\031\072\043\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\073\026\067\031\072\043\070" +
    "\001\001\000\002\001\001\000\004\077\075\001\001\000" +
    "\002\001\001\000\006\032\077\043\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\103\001\001\000" +
    "\004\043\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\111\004\053\007\046\010\050\012\056" +
    "\013\060\034\054\041\062\051\043\062\044\072\061\001" +
    "\001\000\004\100\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\115\001\001\000\002\001\001\000" +
    "\006\032\117\043\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\122\004\053\007\046\010\050\012" +
    "\056\013\060\030\123\034\054\041\062\051\043\062\044" +
    "\072\061\001\001\000\002\001\001\000\004\076\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\027\130" +
    "\042\132\044\136\045\143\046\144\047\134\050\135\051" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\045\143\046\176\047\134\051\127\001\001\000\002\001" +
    "\001\000\014\045\143\046\144\047\134\050\155\051\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\143\047\154\051\127\001\001\000\010" +
    "\045\143\047\147\051\127\001\001\000\002\001\001\000" +
    "\006\045\153\051\127\001\001\000\006\045\152\051\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\174\001\001\000\004\036\172\001\001" +
    "\000\004\036\160\001\001\000\002\001\001\000\016\037" +
    "\162\045\143\046\144\047\134\050\163\051\127\001\001" +
    "\000\002\001\001\000\004\036\170\001\001\000\004\036" +
    "\167\001\001\000\004\036\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\042" +
    "\132\044\205\045\143\046\144\047\134\050\135\051\127" +
    "\053\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\132\044\212\045\143\046\144\047\134\050\135" +
    "\051\127\001\001\000\004\054\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\222\001" +
    "\001\000\004\014\223\001\001\000\002\001\001\000\020" +
    "\042\132\044\225\045\143\046\144\047\134\050\135\051" +
    "\127\001\001\000\004\074\226\001\001\000\002\001\001" +
    "\000\030\003\230\004\053\007\046\010\050\012\056\013" +
    "\060\034\054\041\062\051\043\062\044\072\061\001\001" +
    "\000\002\001\001\000\006\014\233\015\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\247\017\244\001\001\000\002\001\001" +
    "\000\004\017\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\251" +
    "\001\001\000\030\003\252\004\053\007\046\010\050\012" +
    "\056\013\060\034\054\041\062\051\043\062\044\072\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\256\001\001\000\004\021\267\001\001\000\002\001\001" +
    "\000\004\021\266\001\001\000\004\021\261\001\001\000" +
    "\002\001\001\000\006\016\265\017\244\001\001\000\006" +
    "\016\264\017\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\042\132" +
    "\044\277\045\143\046\144\047\134\050\135\051\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\132\044\306\045\143\046\144\047\134\050\135" +
    "\051\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\042\132\044\312\045\143\046\144" +
    "\047\134\050\135\051\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\316\001\001" +
    "\000\002\001\001\000\004\043\304\001\001\000\004\071" +
    "\321\001\001\000\006\016\322\017\244\001\001\000\002" +
    "\001\001\000\004\011\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\330\004\053" +
    "\007\046\010\050\012\056\013\060\034\054\041\062\051" +
    "\043\062\044\072\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\334\017\244\001" +
    "\001\000\002\001\001\000\004\063\336\001\001\000\002" +
    "\001\001\000\030\003\340\004\053\007\046\010\050\012" +
    "\056\013\060\034\054\041\062\051\043\062\044\072\061" +
    "\001\001\000\006\005\342\006\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\346\001\001\000\030\003\347\004\053\007" +
    "\046\010\050\012\056\013\060\034\054\041\062\051\043" +
    "\062\044\072\061\001\001\000\002\001\001\000\006\016" +
    "\351\017\244\001\001\000\002\001\001\000\004\064\353" +
    "\001\001\000\002\001\001\000\030\003\355\004\053\007" +
    "\046\010\050\012\056\013\060\034\054\041\062\051\043" +
    "\062\044\072\061\001\001\000\006\005\356\006\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\361" +
    "\004\053\007\046\010\050\012\056\013\060\034\054\041" +
    "\062\051\043\062\044\072\061\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";
        public int hayErrores = 0;
        public int contadorNodo = 0;
        public static Nodo padre;
        public TablaSimbolos tabla = new TablaSimbolos();
        public ArrayList<Array> arreglos = new ArrayList();
        public int contadorFunciones = 0;
        public ArrayList<Cuadruplo> cuadruplos = new ArrayList();
        public int contadorTemporales=0;
         
        public void gen(String op, String arg1, String arg2, String res){
                cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
        }

        public void gen(String op, String res){
                cuadruplos.add(new Cuadruplo(op, res));
        }

        public String nuevoTemp(){
                return "t"+contadorTemporales;
        }

        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                hayErrores = 1;
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                hayErrores = 1;
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                hayErrores = 1;
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
                hayErrores = 1;
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}

        public String operationValidation(Value e){
                try {
                        int p = e.tipo.indexOf("->");
                        boolean errores= false;
                        if(p>=0){
                                if(functionType(e, p).equals("num")){
                                        return 0+"";
                                }else{
                                        return "error";
                                }
                        }else{
                                Integer.parseInt(e.val);
                                return e.val;                                                        
                        }                                                                           
                } catch (NumberFormatException o) {
                        return "error";
                }
                
        }

        public String functionType(Value e, int indexReturn){
                if((e.tipo.substring(indexReturn+2).equals("num"))){
                        return "num";
                }else{
                        return "error";
                }
        }

        public void printError(int linea, int columna, String val1, String val2, String tipo){
                switch (tipo) {
                        case "DetailVariable":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t"+val2+" "+val1);
                                break;
                        case "notfound":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Variable no declarada asignada a "+val1);
                                break;
                        case "out of bounds":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Indice de arreglo "+val1+" esta fuera de alcance");
                                break;
                        case "incompatible":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Asignacion de variable "+val1+" con operacion aritmetica con tipos incompatibles");
                                break;
                        case "tipos":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Asignacion de "+val1+" a variable de tipo "+val2);
                                break;
                        case "notDeclared":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t La variable "+val1+" no ha sido declarada");
                        default: 
                                break;
                }
        }


        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 
                                System.out.println("Fin main");
                                tabla.disableVars(contadorFunciones);
                                System.out.println(tabla.toString()); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= FUNC_HEAD MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= INIT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= IdF NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= WRITE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdF ::= id TypeIdF 
            {
              Value RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		    
                                int index = tabla.contains(call);
                                if(val == -3){
                                        int resultado = 0;
                                        if(index>=0){
                                                Simbolo sym = tabla.getSymbol(call);
                                                RESULT = sym.valor;
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                        }
                                }else if(val == -2){
                                        calls.add(call);
                                        if(index >= 0) {
                                                Simbolo sym = tabla.getSymbol(call);
                                                RESULT = new Value(sym.tipo, sym.id);
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                        }
                                }else {
                                        int ind = tabla.getIndexVal(call);
                                        System.out.println(call+"[val: "+val+"] 0->"+arreglos.get(ind).fin);
                                        if(index >= 0) {
                                                if(ind >= 0){
                                                        if(val>=0 && val<=arreglos.get(ind).fin){
                                                                RESULT = arreglos.get(ind).getValue(val);
                                                        }else{ 
                                                                RESULT = new Value("error", "out of bounds");
                                                        }
                                                }else{
                                                        RESULT = new Value("error", "not array");
                                                }
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                        }
                                        
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IdF",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeIdF ::= openBrk number closeBrk 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                if(Integer.parseInt(n)>=0){
                                                        RESULT = Integer.parseInt(n); 
                                                }else{
                                                        RESULT = -1; 
                                                }

                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeIdF ::= parIzq FCALLARGS parDer 
            {
              Integer RESULT =null;
		 RESULT = -2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeIdF ::= 
            {
              Integer RESULT =null;
		 RESULT = -3; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name);
                        if(index == -1){
                                tabla.addVar(args+"->"+fun_type, fun_name, null);
                                contadorFunciones++;
                        }else{
                                printError(fun_nameleft,fun_nameright,fun_name, "Ya existe la función","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC_HEAD ::= TIPO id parIzq TYPE_LIST parDer NT$3 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name);
                        if(index == -1){
                                tabla.addVar(args+"->void", fun_name, null);
                                contadorFunciones++;
                        }else{
                                printError(fun_nameleft,fun_nameright,fun_name, "Ya existe la función","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC_HEAD ::= voidType id parIzq TYPE_LIST parDer NT$4 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNC_HEAD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE_LIST ::= TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tipo + tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE_LIST ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE_LIST2 ::= coma TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "x"+tipo+tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE_LIST2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INIT ::= id TIPO opAsig VALS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        int index = tabla.contains(i);
                        System.out.println("Asignacion: ID: "+i+", index: "+index);
                        if(index == -1){
                                //si no existe la variable revisa si el valor tiene error
                                if(v.tipo.equals("error")){
                                        System.out.println("["+vleft+", "+vright+"] id: "+i+" v.val "+v.val+" v.tipo "+v.tipo);
                                        printError(vleft,vright,i,"",v.tipo);
                                }else{  
                                        int ind = t.indexOf("array");
                                        if(ind!=-1){
                                                String tipo = t.substring(0,ind-1);
                                                if(v.tipo.equals("array")){
                                                        // que sea asignado a un conjunto de elementos entre corchetes("array")
                                                        // Cuando es array el contenido de VALS = Value(tipo->"array", val->"{5,6,7}")
                                                        // Cuando es array el contenido de TIPO = "num array"
                                                        try{
                                                                String[] contenido = v.val.split(",");
                                                                Array m = new Array(0,contenido.length-1,tipo);
                                                                int cont = 0;
                                                                if(tipo.equals("num")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                m.addInt(cont,Integer.parseInt(contenido[j]));
                                                                                cont++;
                                                                        }
                                                                }else if(tipo.equals("char")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                m.addChar(cont,contenido[j].charAt(1));
                                                                                cont++;
                                                                        }
                                                                }else if(tipo.equals("bool")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                if(contenido[j].equals("true") || contenido[j].equals("false")){
                                                                                        m.addBool(cont,contenido[j]);
                                                                                }
                                                                                m.addBool(cont,contenido[j]);
                                                                                cont++;
                                                                        }
                                                                }
                                                                v.setVal(arreglos.size()+"");
                                                                arreglos.add(m);
                                                                tabla.addVar(t, i, v);
                                                        }catch(Exception e){
                                                                printError(vleft,vright,i,"Tipos incompatibles en "+tipo,"DetailVariable");
                                                        }
                                                }else{
                                                        printError((vleft+1),vright,v.tipo,t,"tipos");
                                                }
                                        }else{
                                                if(v.tipo.equals(t)){
                                                        tabla.addVar(t, i, v);
                                                        gen(":=", v.val, "", i);
                                                        System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v.val);
                                                        RESULT = i;
                                                }else{
                                                        RESULT = "";
                                                        printError((vleft+1),vright,v.tipo,t,"tipos");
                                                }
                                        }
                                }
                        }else{
                                RESULT = "";
                                printError(vleft,vright,i,"","notDeclared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int asig2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int asig2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer asig2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        int index = tabla.contains(i);
                        if(index>=0){
                                if(!v.tipo.equals("error")){
                                        if(asig2 != -1){
                                                //Cuando esta aqui la unica validacion que necesita es que el valor singular del array sea igualado a otro del mismo
                                                int arrayIndex;
                                                arrayIndex = tabla.getIndexVal(i);
                                                if(v.tipo.equals(arreglos.get(arrayIndex).tipo) && arrayIndex>0){
                                                        arreglos.get(arrayIndex).assignValue(asig2,v.val);
                                                }else{
                                                        printError((vleft+1),vright,v.tipo,arreglos.get(arrayIndex).tipo,"tipos");
                                                }
                                        }else{
                                                Simbolo sym = tabla.getSymbol(i);
                                                if(v.tipo.equals(sym.tipo)){
                                                        tabla.assignValue(index, v);
                                                        gen(":=", v.val, "", sym.id);
                                                        if(v.tipo.equals("boolean")){
                                                                System.out.println("Asignacion: Variable "+i+", valor: "+v.getBoolVal());
                                                        }else if(v.tipo.equals("num")){
                                                                System.out.println("Asignacion: Variable "+i+", valor: "+v.getIntVal());
                                                        }else if(v.tipo.equals("char")){
                                                                System.out.println("Asignacion: Variable "+i+", valor: "+v.getCharVal());
                                                        }
                                                }else{ 
                                                        printError((vleft+1), vright, v.tipo, sym.tipo,"tipos");
                                                }
                                        }
                                }else{ 
                                        printError(vleft+1,vright,i,"",v.tipo);
                                }
                        }else{
                                printError(vleft,vright,i,"","notDeclared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIG2 ::= openBrk number closeBrk 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                        if(Integer.parseInt(n)>=0){
                                                                RESULT = Integer.parseInt(n); 
                                                        }else{
                                                                RESULT = -2; 
                                                        } 
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIG2 ::= 
            {
              Integer RESULT =null;
		 RESULT = -1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= NT$5 ifstart parIzq COND parDer NT$6 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSIF ::= elseif parIzq COND parDer NT$7 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= elseclause ifthen NT$8 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= whilestart NT$9 parIzq COND parDer NT$10 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WRITE ::= writestart parIzq VALS parDer 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("\tWRITE Valor:"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$11 ::= 
            {
              Object RESULT =null;
 //System.out.println("TABLA SIMBOLOS ANTES DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 //System.out.println("TABLA SIMBOLOS DESPUES DE VAR DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= forstart NT$11 parIzq INIT pcoma NT$12 COND pcoma CONTADOR parDer EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		 
                        tabla.removeVar(id);  
                        //System.out.println("TABLA SIMBOLOS DESPUES DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTADOR ::= id contador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t Contador: id: "+i+", contador: "+cont);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SELECT ::= NT$13 selectstart parIzq id parDer NT$14 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPT ::= options VALS NT$15 colon EXP breaks OPT2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPT2 ::= OPT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPT2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND2 ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND3 ::= booleano COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // S ::= E 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E opSuma T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                gen("+", e.val, t.val, nuevoTemp());
                                                                RESULT = new Value("num", (Integer.parseInt(x) + Integer.parseInt(y))+"");
                                                        }
                                                }
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E opResta T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                gen("-", e.val, t.val, nuevoTemp());
                                                                RESULT = new Value("num", (Integer.parseInt(x) - Integer.parseInt(y))+"");
                                                        }
                                                }                                                 
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= T 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= T opMult F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                gen("*", t.val, f.val, nuevoTemp());
                                                                RESULT = new Value("num", (Integer.parseInt(x) * Integer.parseInt(y))+"");
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T ::= T opDiv F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                gen("/", t.val, f.val, nuevoTemp());
                                                                RESULT = new Value("num", (Integer.parseInt(x) / Integer.parseInt(y))+"");
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T ::= F 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=f; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= number 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("num", n); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // F ::= parIzq E parDer 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // F ::= IdF 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

                        // boolean rec = false;
                        // for(int i = 0; i < calls.size(); i++){
                        //         if(calls.get(i).equals(val)){
                        //                 rec = true;
                        //                 break;
                        //         }
                        // }
                        // if(rec){
                        //         System.out.println("La funcion "+val+" es recursiva");
                        // }
                        int index = tabla.contains(val);
                        if(index >= 0){
                                Simbolo funcion = tabla.getSymbol(val);
                                if(funcion.tipo.equals(args+"->"+t)){
                                        System.out.println("Funcion "+val+", tipo: "+args+"->"+t);
                                }else{
                                        printError(argsleft, argsright, (args+"->"+t), "Funcion "+val+" de tipo "+funcion.tipo+" ha sido utilizada como ","DetailVariable");
                                }
                        }else{
                                printError(valleft, valright, val, "No ha sido declarada la función ","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RETFUNC ::= TIPO id NT$16 parIzq ARGS parDer cbOpen RETFUNCBODY NT$17 cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RETFUNCBODY ::= EXP ret RETVAL 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value retVal = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$18 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("VOID FUNCTION "+val+" START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
 
                        // boolean rec = false;
                        // for(int i = 0; i < calls.size(); i++){
                        //         if(calls.get(i).equals(val)){
                        //                 rec = true;
                        //                 break;
                        //         }
                        // }
                        // if(rec){
                        //         System.out.println("La funcion "+val+" es recursiva");
                        // }
                        int index = tabla.contains(val);
                        if(index >= 0){
                                Simbolo funcion = tabla.getSymbol(val);
                                if(funcion.tipo.equals(args+"->void")){
                                        System.out.println("FIN FUNCTION");
                                }else{
                                        printError(argsleft, argsright, funcion.tipo, "Error en funcion de tipo "+args+"->VOID como ","DetailVariable");
                                }
                        }else{
                                printError(valleft, valright, val, "Funcion no declarada ","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VOIDFUNC ::= voidType id NT$18 parIzq ARGS parDer cbOpen EXP NT$19 cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARGS ::= TIPO id ARGS2 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = t+arg2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARGS ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARGS2 ::= coma TIPO id ARGS2 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "x"+t+arg2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARGS2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALS ::= booleano 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("bool", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALS ::= charval 
            {
              Value RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("char", ch.charAt(1)+""); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALS ::= S 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALS ::= ARRVAL0 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("array", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARRVAL0 ::= cbOpen S ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += v.val + "";
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARRVAL0 ::= cbOpen booleano ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += v + "";
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARRVAL0 ::= cbOpen charval ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += v + "";
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARRVAL2 ::= coma ARRVAL3 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARRVAL3 ::= S ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                                arrayValue += (v.val+",");
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARRVAL3 ::= booleano ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                                arrayValue += (v+","); 
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARRVAL3 ::= charval ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                                arrayValue += (v+",");
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
