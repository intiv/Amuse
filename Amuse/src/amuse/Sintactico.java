
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\052\002\000\002\053" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\054\002\000\002\003\005\000\002\003" +
    "\004\000\002\003\002\000\002\055\002\000\002\047\007" +
    "\000\002\050\004\000\002\050\002\000\002\051\005\000" +
    "\002\051\002\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\002\000\002\033\006\000\002\031" +
    "\006\000\002\032\005\000\002\032\002\000\002\036\005" +
    "\000\002\037\003\000\002\037\002\000\002\056\002\000" +
    "\002\057\002\000\002\004\014\000\002\060\002\000\002" +
    "\005\012\000\002\005\003\000\002\061\002\000\002\006" +
    "\006\000\002\006\002\000\002\062\002\000\002\063\002" +
    "\000\002\007\012\000\002\064\002\000\002\011\007\000" +
    "\002\065\002\000\002\066\002\000\002\067\002\000\002" +
    "\010\017\000\002\070\002\000\002\071\002\000\002\012" +
    "\012\000\002\013\010\000\002\013\007\000\002\014\004" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\016\004\000\002\016\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\002\000\002\046\003\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\044\005" +
    "\000\002\044\005\000\002\044\003\000\002\045\003\000" +
    "\002\045\005\000\002\072\002\000\002\021\005\000\002" +
    "\073\002\000\002\074\002\000\002\022\013\000\002\075" +
    "\002\000\002\024\006\000\002\023\003\000\002\076\002" +
    "\000\002\025\005\000\002\077\002\000\002\026\012\000" +
    "\002\027\005\000\002\027\002\000\002\030\006\000\002" +
    "\030\002\000\002\042\005\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\100\002\000\002\101\002\000\002\040\010\000\002" +
    "\040\004\000\002\102\002\000\002\035\006\000\002\035" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\030\003\000\004\000\014\000\017\000\026\000\043\000" +
    "\047\000\050\000\051\000\052\000\056\000\001\002\000" +
    "\030\003\037\004\uffdf\014\014\017\ufff1\026\036\043\016" +
    "\047\uffd6\050\uffd1\051\uffd3\052\uffcd\056\013\001\002\000" +
    "\044\003\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1\013\ufff1" +
    "\014\014\017\ufff1\020\ufff1\026\036\043\016\047\uffd6\050" +
    "\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013\001\002\000\006" +
    "\014\014\043\016\001\002\000\044\003\037\004\uffdf\006" +
    "\ufff1\007\ufff1\010\ufff1\013\ufff1\014\014\017\ufff1\020\ufff1" +
    "\026\036\043\016\047\uffd6\050\uffd1\051\uffd3\052\uffcd\053" +
    "\ufff1\056\013\001\002\000\064\003\uffb8\004\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\026\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\004\052\306\001\002" +
    "\000\044\003\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1\013" +
    "\ufff1\014\014\017\ufff1\020\ufff1\026\036\043\016\047\uffd6" +
    "\050\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013\001\002\000" +
    "\004\047\276\001\002\000\004\050\261\001\002\000\044" +
    "\003\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014" +
    "\014\017\ufff1\020\ufff1\026\036\043\016\047\uffd6\050\uffd1" +
    "\051\uffd3\052\uffcd\053\ufff1\056\013\001\002\000\004\051" +
    "\254\001\002\000\064\003\uffbc\004\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\026\uffbc\037\uffbc\040\uffbc\041\120\042\117" +
    "\043\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\044\003\037\004\uffdf\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\014\014\017\ufff1\020\ufff1\026" +
    "\036\043\016\047\uffd6\050\uffd1\051\uffd3\052\uffcd\053\ufff1" +
    "\056\013\001\002\000\004\004\204\001\002\000\044\003" +
    "\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\014" +
    "\017\ufff1\020\ufff1\026\036\043\016\047\uffd6\050\uffd1\051" +
    "\uffd3\052\uffcd\053\ufff1\056\013\001\002\000\044\003\ufff4" +
    "\004\ufff4\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\ufff4\017" +
    "\ufff4\020\ufff4\026\ufff4\043\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\056\ufff4\001\002\000\044\003\037\004" +
    "\uffdf\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\014\017\ufff1" +
    "\020\ufff1\026\036\043\016\047\uffd6\050\uffd1\051\uffd3\052" +
    "\uffcd\053\ufff1\056\013\001\002\000\004\017\124\001\002" +
    "\000\064\003\uffb9\004\uffb9\006\uffb9\007\uffb9\010\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\026\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9" +
    "\001\002\000\060\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\026\uffbf\037\115\040\114\043\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\001\002" +
    "\000\016\014\ufff0\023\050\030\052\036\uffe3\044\046\045" +
    "\047\001\002\000\044\003\037\004\uffdf\006\ufff1\007\ufff1" +
    "\010\ufff1\013\ufff1\014\014\017\ufff1\020\ufff1\026\036\043" +
    "\016\047\uffd6\050\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013" +
    "\001\002\000\044\003\037\004\uffdf\006\ufff1\007\ufff1\010" +
    "\ufff1\013\ufff1\014\014\017\ufff1\020\ufff1\026\036\043\016" +
    "\047\uffd6\050\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013\001" +
    "\002\000\044\003\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1" +
    "\013\ufff1\014\014\017\ufff1\020\ufff1\026\036\043\016\047" +
    "\uffd6\050\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013\001\002" +
    "\000\020\006\ufffb\007\ufffb\010\ufffb\013\ufffb\017\ufffb\020" +
    "\ufffb\053\ufffb\001\002\000\020\006\ufff7\007\ufff7\010\ufff7" +
    "\013\ufff7\017\ufff7\020\ufff7\053\ufff7\001\002\000\020\006" +
    "\ufff8\007\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\053\ufff8" +
    "\001\002\000\004\014\104\001\002\000\010\023\uffa5\026" +
    "\uffa5\036\uffa5\001\002\000\010\023\uffa4\026\uffa4\036\uffa4" +
    "\001\002\000\004\043\102\001\002\000\004\036\100\001" +
    "\002\000\010\023\uffa3\026\uffa3\036\uffa3\001\002\000\006" +
    "\023\055\036\054\001\002\000\016\014\014\016\064\025" +
    "\065\026\060\043\016\046\063\001\002\000\004\024\056" +
    "\001\002\000\010\023\uffa6\026\uffa6\036\uffa6\001\002\000" +
    "\054\003\uff9e\004\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\026" +
    "\uff9e\043\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\055\uff9e\056\uff9e\001\002\000\054\003\uffa2\004\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\026\uffa2\043\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\054\003\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\026\uff9f\043\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\055\uff9f\056\uff9f\001\002\000\044\003\uffe6\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\017\uffe6\020" +
    "\uffe6\026\uffe6\043\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\056\uffe6\001\002\000\054\003\uffa0\004\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\026\uffa0\043\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\001\002" +
    "\000\010\014\014\017\066\043\016\001\002\000\054\003" +
    "\uffa1\004\uffa1\006\uffa1\007\uffa1\010\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\026\uffa1\043" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\054\003\uff9a\004\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\026\uff9a\043\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\001\002\000\006" +
    "\017\uff9d\021\uff9d\001\002\000\006\017\uff97\021\072\001" +
    "\002\000\004\017\uff9c\001\002\000\006\014\014\043\016" +
    "\001\002\000\006\017\uff99\021\uff99\001\002\000\006\017" +
    "\uff97\021\072\001\002\000\004\017\uff98\001\002\000\004" +
    "\017\077\001\002\000\054\003\uff9b\004\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\026\uff9b\043\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\001\002\000\016" +
    "\014\014\016\064\025\065\026\060\043\016\046\063\001" +
    "\002\000\046\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\017\uffe5\020\uffe5\022\uffe5\026\uffe5\043" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5" +
    "\001\002\000\004\024\103\001\002\000\004\036\uffe4\001" +
    "\002\000\020\014\014\015\uffed\016\064\025\065\026\060" +
    "\043\016\046\063\001\002\000\006\015\uffeb\021\111\001" +
    "\002\000\004\015\107\001\002\000\044\003\uffef\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\013\uffef\014\uffef\017\uffef\020" +
    "\uffef\026\uffef\043\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\056\uffef\001\002\000\004\015\uffee\001\002\000" +
    "\016\014\014\016\064\025\065\026\060\043\016\046\063" +
    "\001\002\000\006\015\uffeb\021\111\001\002\000\004\015" +
    "\uffec\001\002\000\006\014\014\043\016\001\002\000\006" +
    "\014\014\043\016\001\002\000\064\003\uffbe\004\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\026\uffbe\037\uffbe\040\uffbe\041" +
    "\120\042\117\043\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\055\uffbe\056\uffbe\001\002\000\006\014\014\043" +
    "\016\001\002\000\006\014\014\043\016\001\002\000\064" +
    "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\026\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\001\002" +
    "\000\064\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba\013" +
    "\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\026\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba" +
    "\001\002\000\064\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\026\uffbd\037\uffbd\040\uffbd\041\120\042\117\043" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd" +
    "\056\uffbd\001\002\000\016\002\uffff\003\uffff\027\uffff\030" +
    "\uffff\044\uffff\045\uffff\001\002\000\016\002\uffe7\003\133" +
    "\027\131\030\052\044\046\045\047\001\002\000\016\002" +
    "\uffe7\003\133\027\131\030\052\044\046\045\047\001\002" +
    "\000\004\002\ufffe\001\002\000\016\002\uffe7\003\133\027" +
    "\131\030\052\044\046\045\047\001\002\000\004\026\uffae" +
    "\001\002\000\006\023\055\026\uffb6\001\002\000\016\002" +
    "\uffe7\003\133\027\131\030\052\044\046\045\047\001\002" +
    "\000\004\002\uffe8\001\002\000\004\026\137\001\002\000" +
    "\016\002\uffb5\003\uffb5\027\uffb5\030\uffb5\044\uffb5\045\uffb5" +
    "\001\002\000\004\014\140\001\002\000\012\015\uffa9\030" +
    "\052\044\046\045\047\001\002\000\004\015\uffb4\001\002" +
    "\000\006\023\055\026\143\001\002\000\006\015\uffa7\021" +
    "\144\001\002\000\010\030\052\044\046\045\047\001\002" +
    "\000\004\015\uffaa\001\002\000\006\023\055\026\147\001" +
    "\002\000\006\015\uffa7\021\144\001\002\000\004\015\uffa8" +
    "\001\002\000\004\015\152\001\002\000\004\016\153\001" +
    "\002\000\030\003\uffb3\004\uffb3\014\uffb3\020\uffb3\026\uffb3" +
    "\043\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\056\uffb3\001" +
    "\002\000\030\003\037\004\uffdf\014\014\020\ufff1\026\036" +
    "\043\016\047\uffd6\050\uffd1\051\uffd3\052\uffcd\056\013\001" +
    "\002\000\004\020\160\001\002\000\004\017\157\001\002" +
    "\000\016\002\uffb2\003\uffb2\027\uffb2\030\uffb2\044\uffb2\045" +
    "\uffb2\001\002\000\016\014\uffb1\016\uffb1\025\uffb1\026\uffb1" +
    "\043\uffb1\046\uffb1\001\002\000\016\014\014\016\064\025" +
    "\065\026\060\043\016\046\063\001\002\000\004\017\uffb0" +
    "\001\002\000\004\017\uffaf\001\002\000\004\026\166\001" +
    "\002\000\016\002\uffad\003\uffad\027\uffad\030\uffad\044\uffad" +
    "\045\uffad\001\002\000\004\014\167\001\002\000\012\015" +
    "\uffa9\030\052\044\046\045\047\001\002\000\004\015\uffac" +
    "\001\002\000\004\015\172\001\002\000\004\016\173\001" +
    "\002\000\030\003\037\004\uffdf\014\014\017\ufff1\026\036" +
    "\043\016\047\uffd6\050\uffd1\051\uffd3\052\uffcd\056\013\001" +
    "\002\000\004\017\175\001\002\000\016\002\uffab\003\uffab" +
    "\027\uffab\030\uffab\044\uffab\045\uffab\001\002\000\004\002" +
    "\uffea\001\002\000\004\002\uffe9\001\002\000\020\006\ufff2" +
    "\007\ufff2\010\ufff2\013\ufff2\017\ufff2\020\ufff2\053\ufff2\001" +
    "\002\000\044\003\037\004\uffdf\006\ufff1\007\ufff1\010\ufff1" +
    "\013\ufff1\014\014\017\ufff1\020\ufff1\026\036\043\016\047" +
    "\uffd6\050\uffd1\051\uffd3\052\uffcd\053\ufff1\056\013\001\002" +
    "\000\020\006\ufff3\007\ufff3\010\ufff3\013\ufff3\017\ufff3\020" +
    "\ufff3\053\ufff3\001\002\000\020\006\ufffd\007\ufffd\010\ufffd" +
    "\013\ufffd\017\ufffd\020\ufffd\053\ufffd\001\002\000\004\014" +
    "\205\001\002\000\010\026\212\035\206\043\210\001\002" +
    "\000\006\026\212\043\210\001\002\000\006\015\uffc7\022" +
    "\uffc7\001\002\000\004\031\250\001\002\000\004\015\225" +
    "\001\002\000\004\031\213\001\002\000\006\026\216\043" +
    "\215\001\002\000\006\015\uffc6\022\uffc6\001\002\000\012" +
    "\015\uffc0\022\uffc0\033\221\034\220\001\002\000\012\015" +
    "\uffc0\022\uffc0\033\221\034\220\001\002\000\006\015\uffc4" +
    "\022\uffc4\001\002\000\010\026\212\035\206\043\210\001" +
    "\002\000\010\026\212\035\206\043\210\001\002\000\006" +
    "\015\uffc2\022\uffc2\001\002\000\006\015\uffc1\022\uffc1\001" +
    "\002\000\006\015\uffc3\022\uffc3\001\002\000\004\005\uffde" +
    "\001\002\000\004\005\227\001\002\000\034\003\037\004" +
    "\uffdf\006\ufff1\007\ufff1\010\ufff1\014\014\026\036\043\016" +
    "\047\uffd6\050\uffd1\051\uffd3\052\uffcd\056\013\001\002\000" +
    "\010\006\234\007\233\010\uffd7\001\002\000\004\010\uffda" +
    "\001\002\000\004\010\247\001\002\000\004\014\240\001" +
    "\002\000\004\005\235\001\002\000\030\003\uffd9\004\uffd9" +
    "\010\uffd9\014\uffd9\026\uffd9\043\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\056\uffd9\001\002\000\030\003\037\004\uffdf" +
    "\010\ufff1\014\014\026\036\043\016\047\uffd6\050\uffd1\051" +
    "\uffd3\052\uffcd\056\013\001\002\000\004\010\uffd8\001\002" +
    "\000\010\026\212\035\206\043\210\001\002\000\004\015" +
    "\242\001\002\000\004\005\uffdc\001\002\000\004\005\244" +
    "\001\002\000\034\003\037\004\uffdf\006\ufff1\007\ufff1\010" +
    "\ufff1\014\014\026\036\043\016\047\uffd6\050\uffd1\051\uffd3" +
    "\052\uffcd\056\013\001\002\000\010\006\234\007\233\010" +
    "\uffd7\001\002\000\004\010\uffdb\001\002\000\044\003\uffdd" +
    "\004\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\014\uffdd\017" +
    "\uffdd\020\uffdd\026\uffdd\043\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\056\uffdd\001\002\000\006\026\216\043" +
    "\215\001\002\000\006\015\uffc5\022\uffc5\001\002\000\006" +
    "\015\uffc8\022\uffc8\001\002\000\020\006\ufff5\007\ufff5\010" +
    "\ufff5\013\ufff5\017\ufff5\020\ufff5\053\ufff5\001\002\000\004" +
    "\014\255\001\002\000\004\026\256\001\002\000\004\015" +
    "\257\001\002\000\044\003\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\013\uffd2\014\uffd2\017\uffd2\020\uffd2\026\uffd2\043" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2" +
    "\001\002\000\020\006\ufffc\007\ufffc\010\ufffc\013\ufffc\017" +
    "\ufffc\020\ufffc\053\ufffc\001\002\000\004\014\262\001\002" +
    "\000\004\026\264\001\002\000\004\022\265\001\002\000" +
    "\006\023\050\036\uffe3\001\002\000\010\026\212\035\206" +
    "\043\210\001\002\000\004\022\uffd0\001\002\000\004\022" +
    "\270\001\002\000\010\026\212\035\206\043\210\001\002" +
    "\000\004\015\272\001\002\000\030\003\uffcf\004\uffcf\013" +
    "\uffcf\014\uffcf\026\uffcf\043\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\056\uffcf\001\002\000\030\003\037\004\uffdf\013" +
    "\ufff1\014\014\026\036\043\016\047\uffd6\050\uffd1\051\uffd3" +
    "\052\uffcd\056\013\001\002\000\004\013\275\001\002\000" +
    "\044\003\uffce\004\uffce\006\uffce\007\uffce\010\uffce\013\uffce" +
    "\014\uffce\017\uffce\020\uffce\026\uffce\043\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\056\uffce\001\002\000\004" +
    "\014\277\001\002\000\010\026\212\035\206\043\210\001" +
    "\002\000\004\015\301\001\002\000\030\003\uffd5\004\uffd5" +
    "\013\uffd5\014\uffd5\026\uffd5\043\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\056\uffd5\001\002\000\030\003\037\004\uffdf" +
    "\013\ufff1\014\014\026\036\043\016\047\uffd6\050\uffd1\051" +
    "\uffd3\052\uffcd\056\013\001\002\000\004\013\304\001\002" +
    "\000\044\003\uffd4\004\uffd4\006\uffd4\007\uffd4\010\uffd4\013" +
    "\uffd4\014\uffd4\017\uffd4\020\uffd4\026\uffd4\043\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\056\uffd4\001\002\000" +
    "\020\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6" +
    "\053\ufff6\001\002\000\004\014\307\001\002\000\004\026" +
    "\310\001\002\000\004\015\311\001\002\000\004\054\uffcc" +
    "\001\002\000\004\054\314\001\002\000\004\013\322\001" +
    "\002\000\016\014\014\016\064\025\065\026\060\043\016" +
    "\046\063\001\002\000\004\055\316\001\002\000\030\003" +
    "\037\004\uffdf\014\014\026\036\043\016\047\uffd6\050\uffd1" +
    "\051\uffd3\052\uffcd\053\ufff1\056\013\001\002\000\004\053" +
    "\320\001\002\000\006\013\uffc9\054\314\001\002\000\004" +
    "\013\uffca\001\002\000\044\003\uffcb\004\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\026\uffcb" +
    "\043\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\056" +
    "\uffcb\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\013\ufff9" +
    "\017\ufff9\020\ufff9\053\ufff9\001\002\000\010\015\325\037" +
    "\115\040\114\001\002\000\064\003\uffb7\004\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\026\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\020\006\ufffa\007\ufffa" +
    "\010\ufffa\013\ufffa\017\ufffa\020\ufffa\053\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\011\001\001\000\046\003\032\004" +
    "\027\007\022\010\037\011\031\012\017\031\040\033\014" +
    "\043\034\044\024\045\033\046\025\047\030\056\026\062" +
    "\020\064\023\065\021\070\016\001\001\000\046\003\325" +
    "\004\027\007\022\010\037\011\031\012\017\031\040\033" +
    "\014\043\034\044\024\045\033\046\025\047\030\056\026" +
    "\062\020\064\023\065\021\070\016\001\001\000\010\043" +
    "\323\044\024\045\033\001\001\000\046\003\322\004\027" +
    "\007\022\010\037\011\031\012\017\031\040\033\014\043" +
    "\034\044\024\045\033\046\025\047\030\056\026\062\020" +
    "\064\023\065\021\070\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\304\004\027\007\022\010\037" +
    "\011\031\012\017\031\040\033\014\043\034\044\024\045" +
    "\033\046\025\047\030\056\026\062\020\064\023\065\021" +
    "\070\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\257\004\027\007\022\010\037\011\031\012\017" +
    "\031\040\033\014\043\034\044\024\045\033\046\025\047" +
    "\030\056\026\062\020\064\023\065\021\070\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\252\004" +
    "\027\007\022\010\037\011\031\012\017\031\040\033\014" +
    "\043\034\044\024\045\033\046\025\047\030\056\026\062" +
    "\020\064\023\065\021\070\016\001\001\000\002\001\001" +
    "\000\046\003\202\004\027\007\022\010\037\011\031\012" +
    "\017\031\040\033\014\043\034\044\024\045\033\046\025" +
    "\047\030\056\026\062\020\064\023\065\021\070\016\001" +
    "\001\000\004\054\200\001\001\000\046\003\177\004\027" +
    "\007\022\010\037\011\031\012\017\031\040\033\014\043" +
    "\034\044\024\045\033\046\025\047\030\056\026\062\020" +
    "\064\023\065\021\070\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\050\042\052" +
    "\055\044\001\001\000\046\003\043\004\027\007\022\010" +
    "\037\011\031\012\017\031\040\033\014\043\034\044\024" +
    "\045\033\046\025\047\030\056\026\062\020\064\023\065" +
    "\021\070\016\001\001\000\046\003\042\004\027\007\022" +
    "\010\037\011\031\012\017\031\040\033\014\043\034\044" +
    "\024\045\033\046\025\047\030\056\026\062\020\064\023" +
    "\065\021\070\016\001\001\000\046\003\041\004\027\007" +
    "\022\010\037\011\031\012\017\031\040\033\014\043\034" +
    "\044\024\045\033\046\025\047\030\056\026\062\020\064" +
    "\023\065\021\070\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\056\041" +
    "\061\043\034\044\024\045\033\046\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\043\034\044\024\045\033\046\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\067\001\001" +
    "\000\004\035\070\001\001\000\004\101\075\001\001\000" +
    "\012\043\034\044\024\045\033\046\072\001\001\000\004" +
    "\102\073\001\001\000\004\035\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\040\056" +
    "\041\100\043\034\044\024\045\033\046\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\040\056\041\104\043\034\044\024\045\033\046\060\050" +
    "\105\001\001\000\004\051\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\056\041" +
    "\111\043\034\044\024\045\033\046\060\001\001\000\004" +
    "\051\112\001\001\000\002\001\001\000\006\044\122\045" +
    "\033\001\001\000\006\044\115\045\033\001\001\000\002" +
    "\001\001\000\004\045\121\001\001\000\004\045\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\124\001\001\000\012\020\126\021\127\025" +
    "\125\042\131\001\001\000\012\020\176\021\127\025\125" +
    "\042\131\001\001\000\002\001\001\000\012\020\175\021" +
    "\127\025\125\042\131\001\001\000\004\076\163\001\001" +
    "\000\004\072\134\001\001\000\012\020\133\021\127\025" +
    "\125\042\131\001\001\000\002\001\001\000\004\022\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\140\042\141\001\001\000\004\073\150\001\001\000\002" +
    "\001\001\000\004\030\144\001\001\000\004\042\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\153\001\001\000\050\003\154\004\027" +
    "\007\022\010\037\011\031\012\017\024\155\031\040\033" +
    "\014\043\034\044\024\045\033\046\025\047\030\056\026" +
    "\062\020\064\023\065\021\070\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\160" +
    "\001\001\000\020\023\161\040\056\041\162\043\034\044" +
    "\024\045\033\046\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\167\042\141\001\001\000\004" +
    "\077\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\173\004\027\007\022\010\037\011\031\012\017" +
    "\031\040\033\014\043\034\044\024\045\033\046\025\047" +
    "\030\056\026\062\020\064\023\065\021\070\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\201\004\027" +
    "\007\022\010\037\011\031\012\017\031\040\033\014\043" +
    "\034\044\024\045\033\046\025\047\030\056\026\062\020" +
    "\064\023\065\021\070\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\210\015\206" +
    "\001\001\000\004\015\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\213\001\001\000\002\001\001\000\004\017\223\001" +
    "\001\000\004\017\216\001\001\000\002\001\001\000\006" +
    "\014\222\015\206\001\001\000\006\014\221\015\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\225\001\001\000\002\001\001\000\046\003" +
    "\227\004\027\007\022\010\037\011\031\012\017\031\040" +
    "\033\014\043\034\044\024\045\033\046\025\047\030\056" +
    "\026\062\020\064\023\065\021\070\016\001\001\000\006" +
    "\005\231\006\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\235" +
    "\001\001\000\046\003\236\004\027\007\022\010\037\011" +
    "\031\012\017\031\040\033\014\043\034\044\024\045\033" +
    "\046\025\047\030\056\026\062\020\064\023\065\021\070" +
    "\016\001\001\000\002\001\001\000\006\014\240\015\206" +
    "\001\001\000\002\001\001\000\004\060\242\001\001\000" +
    "\002\001\001\000\046\003\244\004\027\007\022\010\037" +
    "\011\031\012\017\031\040\033\014\043\034\044\024\045" +
    "\033\046\025\047\030\056\026\062\020\064\023\065\021" +
    "\070\016\001\001\000\006\005\245\006\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\262\001\001\000\002\001\001\000\004\032\050\001\001" +
    "\000\006\014\265\015\206\001\001\000\004\066\266\001" +
    "\001\000\002\001\001\000\006\014\270\015\206\001\001" +
    "\000\002\001\001\000\004\067\272\001\001\000\046\003" +
    "\273\004\027\007\022\010\037\011\031\012\017\031\040" +
    "\033\014\043\034\044\024\045\033\046\025\047\030\056" +
    "\026\062\020\064\023\065\021\070\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\277\015\206\001\001\000\002\001\001\000\004\063\301" +
    "\001\001\000\046\003\302\004\027\007\022\010\037\011" +
    "\031\012\017\031\040\033\014\043\034\044\024\045\033" +
    "\046\025\047\030\056\026\062\020\064\023\065\021\070" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\311\001\001\000\004\013\312\001\001" +
    "\000\002\001\001\000\016\040\056\041\314\043\034\044" +
    "\024\045\033\046\060\001\001\000\002\001\001\000\046" +
    "\003\316\004\027\007\022\010\037\011\031\012\017\031" +
    "\040\033\014\043\034\044\024\045\033\046\025\047\030" +
    "\056\026\062\020\064\023\065\021\070\016\001\001\000" +
    "\002\001\001\000\004\013\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";

       public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= INIT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= FCALL NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= WRITE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = call; System.out.println("\tLlamado a funcion: "+call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALL ::= id NT$3 parIzq FCALLARGS parDer 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INIT ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\tAsignacion: id: "+i+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIG2 ::= openBrk number closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIG2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BRKS ::= openBrk BRKS2 closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BRKS2 ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BRKS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= NT$4 ifstart parIzq COND parDer NT$5 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSIF ::= elseif parIzq COND parDer NT$6 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= elseclause ifthen NT$7 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= NT$8 whilestart parIzq COND parDer NT$9 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WRITE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WRITE ::= NT$10 writestart parIzq id parDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("\tVariable:"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= NT$11 forstart parIzq ASIG pcoma COND NT$12 pcoma COND parDer NT$13 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SELECT ::= NT$14 selectstart parIzq id parDer NT$15 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$16 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETFUNC ::= TIPO NT$16 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETFUNC2 ::= id parIzq ARGS NT$17 parDer cbOpen NT$18 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$19 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETFUNCBODY ::= EXP ret NT$19 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$20 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VOIDFUNC ::= voidType NT$20 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$21 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VOIDFUNC2 ::= id parIzq ARGS NT$21 parDer cbOpen EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		 
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGS2 ::= coma TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALS ::= charval 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ch; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALS ::= ARRVAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$22 ::= 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 RESULT = arrayValue; arrayValue = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARRVAL ::= cbOpen S NT$22 ARRVAL2 NT$23 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARRVAL ::= cbOpen cbClose 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$24 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue += (", " + val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARRVAL2 ::= coma S NT$24 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
