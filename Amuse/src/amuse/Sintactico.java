
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\050\002\000\002\051" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\052\002\000\002\003\005\000\002\003" +
    "\004\000\002\003\002\000\002\053\002\000\002\045\007" +
    "\000\002\046\004\000\002\046\002\000\002\047\005\000" +
    "\002\047\002\000\002\021\004\000\002\021\004\000\002" +
    "\021\002\000\002\034\006\000\002\032\006\000\002\033" +
    "\005\000\002\033\002\000\002\054\002\000\002\055\002" +
    "\000\002\004\014\000\002\056\002\000\002\005\012\000" +
    "\002\005\003\000\002\057\002\000\002\006\006\000\002" +
    "\006\002\000\002\060\002\000\002\061\002\000\002\007" +
    "\012\000\002\011\006\000\002\062\002\000\002\063\002" +
    "\000\002\064\002\000\002\010\020\000\002\065\002\000" +
    "\002\066\002\000\002\012\012\000\002\067\002\000\002" +
    "\013\011\000\002\014\003\000\002\014\002\000\002\015" +
    "\004\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\016\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\002\000\002\044\003\000\002\041\005\000\002\041" +
    "\005\000\002\041\003\000\002\042\005\000\002\042\005" +
    "\000\002\042\003\000\002\043\003\000\002\043\005\000" +
    "\002\022\004\000\002\070\002\000\002\023\012\000\002" +
    "\071\002\000\002\025\006\000\002\024\003\000\002\026" +
    "\004\000\002\072\002\000\002\027\012\000\002\073\002" +
    "\000\002\030\006\000\002\030\002\000\002\074\002\000" +
    "\002\031\007\000\002\031\002\000\002\040\005\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\075\002\000\002\076\002\000" +
    "\002\036\010\000\002\036\004\000\002\077\002\000\002" +
    "\035\006\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\030\003\000\004\000\014\000\017\000\026\000\042\000" +
    "\046\000\047\000\050\000\051\000\055\000\001\002\000" +
    "\030\003\036\004\uffe3\014\015\017\ufff1\026\035\042\016" +
    "\046\037\047\031\050\034\051\uffd2\055\013\001\002\000" +
    "\044\003\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1\013\ufff1" +
    "\014\015\017\ufff1\020\ufff1\026\035\042\016\046\037\047" +
    "\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000\044" +
    "\003\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014" +
    "\015\017\ufff1\020\ufff1\026\035\042\016\046\037\047\031" +
    "\050\034\051\uffd2\052\ufff1\055\013\001\002\000\006\014" +
    "\015\042\016\001\002\000\064\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\026\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\055\uffb9\001\002\000\044\003\036\004\uffe3" +
    "\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\015\017\ufff1\020" +
    "\ufff1\026\035\042\016\046\037\047\031\050\034\051\uffd2" +
    "\052\ufff1\055\013\001\002\000\004\051\305\001\002\000" +
    "\044\003\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1\013\ufff1" +
    "\014\015\017\ufff1\020\ufff1\026\035\042\016\046\037\047" +
    "\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000\064" +
    "\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\026\uffbd" +
    "\036\uffbd\037\uffbd\040\156\041\155\042\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002" +
    "\000\004\004\256\001\002\000\044\003\036\004\uffe3\006" +
    "\ufff1\007\ufff1\010\ufff1\013\ufff1\014\015\017\ufff1\020\ufff1" +
    "\026\035\042\016\046\037\047\031\050\034\051\uffd2\052" +
    "\ufff1\055\013\001\002\000\044\003\036\004\uffe3\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\014\015\017\ufff1\020\ufff1\026" +
    "\035\042\016\046\037\047\031\050\034\051\uffd2\052\ufff1" +
    "\055\013\001\002\000\044\003\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\017\ufff4\020\ufff4\026\ufff4" +
    "\042\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\055" +
    "\ufff4\001\002\000\044\003\036\004\uffe3\006\ufff1\007\ufff1" +
    "\010\ufff1\013\ufff1\014\015\017\ufff1\020\ufff1\026\035\042" +
    "\016\046\037\047\031\050\034\051\uffd2\052\ufff1\055\013" +
    "\001\002\000\004\017\200\001\002\000\004\014\uffd6\001" +
    "\002\000\064\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba" +
    "\013\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\026\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\001\002\000\060\003\uffc0\004\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\026\uffc0\036\153\037\152\042\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001" +
    "\002\000\004\014\147\001\002\000\016\014\ufff0\023\104" +
    "\030\105\035\uffe4\043\101\044\102\001\002\000\044\003" +
    "\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\015" +
    "\017\ufff1\020\ufff1\026\035\042\016\046\037\047\031\050" +
    "\034\051\uffd2\052\ufff1\055\013\001\002\000\004\014\uffda" +
    "\001\002\000\044\003\036\004\uffe3\006\ufff1\007\ufff1\010" +
    "\ufff1\013\ufff1\014\015\017\ufff1\020\ufff1\026\035\042\016" +
    "\046\037\047\031\050\034\051\uffd2\052\ufff1\055\013\001" +
    "\002\000\044\003\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1" +
    "\013\ufff1\014\015\017\ufff1\020\ufff1\026\035\042\016\046" +
    "\037\047\031\050\034\051\uffd2\052\ufff1\055\013\001\002" +
    "\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017\ufffa\020" +
    "\ufffa\052\ufffa\001\002\000\020\006\ufff7\007\ufff7\010\ufff7" +
    "\013\ufff7\017\ufff7\020\ufff7\052\ufff7\001\002\000\004\014" +
    "\045\001\002\000\012\025\046\026\053\034\047\042\051" +
    "\001\002\000\006\015\uffc8\022\uffc8\001\002\000\010\025" +
    "\046\026\053\042\051\001\002\000\006\015\uffca\022\uffca" +
    "\001\002\000\004\031\074\001\002\000\004\015\070\001" +
    "\002\000\004\031\054\001\002\000\010\025\055\026\060" +
    "\042\057\001\002\000\012\015\uffc1\022\uffc1\032\063\033" +
    "\062\001\002\000\006\015\uffc9\022\uffc9\001\002\000\012" +
    "\015\uffc1\022\uffc1\032\063\033\062\001\002\000\012\015" +
    "\uffc1\022\uffc1\032\063\033\062\001\002\000\006\015\uffc6" +
    "\022\uffc6\001\002\000\012\025\046\026\053\034\047\042" +
    "\051\001\002\000\012\025\046\026\053\034\047\042\051" +
    "\001\002\000\006\015\uffc3\022\uffc3\001\002\000\006\015" +
    "\uffc2\022\uffc2\001\002\000\006\015\uffc4\022\uffc4\001\002" +
    "\000\006\015\uffc5\022\uffc5\001\002\000\030\003\uffd9\004" +
    "\uffd9\013\uffd9\014\uffd9\026\uffd9\042\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\055\uffd9\001\002\000\030\003\036\004" +
    "\uffe3\013\ufff1\014\015\026\035\042\016\046\037\047\031" +
    "\050\034\051\uffd2\055\013\001\002\000\004\013\073\001" +
    "\002\000\044\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\013\uffd8\014\uffd8\017\uffd8\020\uffd8\026\uffd8\042\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\001\002" +
    "\000\010\025\055\026\060\042\057\001\002\000\006\015" +
    "\uffc7\022\uffc7\001\002\000\006\015\uffcb\022\uffcb\001\002" +
    "\000\020\006\ufffd\007\ufffd\010\ufffd\013\ufffd\017\ufffd\020" +
    "\ufffd\052\ufffd\001\002\000\004\014\137\001\002\000\010" +
    "\023\uffa7\026\uffa7\035\uffa7\001\002\000\010\023\uffa6\026" +
    "\uffa6\035\uffa6\001\002\000\004\035\135\001\002\000\004" +
    "\042\133\001\002\000\010\023\uffa5\026\uffa5\035\uffa5\001" +
    "\002\000\006\023\110\035\107\001\002\000\016\014\015" +
    "\016\117\025\120\026\113\042\016\045\116\001\002\000" +
    "\004\024\111\001\002\000\010\023\uffa8\026\uffa8\035\uffa8" +
    "\001\002\000\054\003\uffa0\004\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\026\uffa0\042\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\054\uffa0\055\uffa0\001\002\000\054\003\uffa4" +
    "\004\uffa4\006\uffa4\007\uffa4\010\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\026\uffa4\042\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\055" +
    "\uffa4\001\002\000\054\003\uffa1\004\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\013\uffa1\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\026\uffa1\042\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\054\uffa1\055\uffa1\001\002\000\046\003" +
    "\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\026\uffe7\042\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\055\uffe7\001\002\000\054" +
    "\003\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\026\uffa2" +
    "\042\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\054" +
    "\uffa2\055\uffa2\001\002\000\010\014\015\017\121\042\016" +
    "\001\002\000\054\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\026\uffa3\042\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\054\uffa3\055\uffa3\001\002\000\054\003\uff9c" +
    "\004\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\026\uff9c\042\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055" +
    "\uff9c\001\002\000\006\017\uff9f\021\uff9f\001\002\000\006" +
    "\017\uff99\021\125\001\002\000\004\017\uff9e\001\002\000" +
    "\006\014\015\042\016\001\002\000\006\017\uff9b\021\uff9b" +
    "\001\002\000\006\017\uff99\021\125\001\002\000\004\017" +
    "\uff9a\001\002\000\004\017\132\001\002\000\054\003\uff9d" +
    "\004\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\026\uff9d\042\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055" +
    "\uff9d\001\002\000\004\024\134\001\002\000\004\035\uffe5" +
    "\001\002\000\016\014\015\016\117\025\120\026\113\042" +
    "\016\045\116\001\002\000\044\003\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\013\uffe6\014\uffe6\017\uffe6\020\uffe6\026" +
    "\uffe6\042\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\001\002\000\020\014\015\015\uffed\016\117\025" +
    "\120\026\113\042\016\045\116\001\002\000\006\015\uffeb" +
    "\021\144\001\002\000\004\015\142\001\002\000\044\003" +
    "\uffef\004\uffef\006\uffef\007\uffef\010\uffef\013\uffef\014\uffef" +
    "\017\uffef\020\uffef\026\uffef\042\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\055\uffef\001\002\000\004\015\uffee" +
    "\001\002\000\016\014\015\016\117\025\120\026\113\042" +
    "\016\045\116\001\002\000\006\015\uffeb\021\144\001\002" +
    "\000\004\015\uffec\001\002\000\016\014\015\016\117\025" +
    "\120\026\113\042\016\045\116\001\002\000\004\015\151" +
    "\001\002\000\044\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\026\uffd7\042\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\001" +
    "\002\000\006\014\015\042\016\001\002\000\006\014\015" +
    "\042\016\001\002\000\064\003\uffbf\004\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\026\uffbf\036\uffbf\037\uffbf\040\156\041" +
    "\155\042\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\054\uffbf\055\uffbf\001\002\000\006\014\015\042\016\001" +
    "\002\000\006\014\015\042\016\001\002\000\064\003\uffbc" +
    "\004\uffbc\006\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\026\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002\000\064" +
    "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\026\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\001\002" +
    "\000\064\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\026\uffbe\036\uffbe\037\uffbe\040\156\041\155\042\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe" +
    "\001\002\000\004\014\163\001\002\000\004\026\165\001" +
    "\002\000\004\022\166\001\002\000\010\030\105\043\101" +
    "\044\102\001\002\000\012\025\046\026\053\034\047\042" +
    "\051\001\002\000\004\022\uffd5\001\002\000\004\022\171" +
    "\001\002\000\012\025\046\026\053\034\047\042\051\001" +
    "\002\000\004\015\173\001\002\000\004\012\174\001\002" +
    "\000\030\003\uffd4\004\uffd4\013\uffd4\014\uffd4\026\uffd4\042" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\001\002" +
    "\000\030\003\036\004\uffe3\013\ufff1\014\015\026\035\042" +
    "\016\046\037\047\031\050\034\051\uffd2\055\013\001\002" +
    "\000\004\013\177\001\002\000\044\003\uffd3\004\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\017\uffd3\020\uffd3" +
    "\026\uffd3\042\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\055\uffd3\001\002\000\014\002\uffff\027\uffff\030\uffff" +
    "\043\uffff\044\uffff\001\002\000\014\002\uffe8\027\206\030" +
    "\105\043\101\044\102\001\002\000\004\002\ufffe\001\002" +
    "\000\014\002\uffe8\027\206\030\105\043\101\044\102\001" +
    "\002\000\006\023\110\026\233\001\002\000\014\002\uffe8" +
    "\027\206\030\105\043\101\044\102\001\002\000\004\026" +
    "\210\001\002\000\014\002\uffb1\027\uffb1\030\uffb1\043\uffb1" +
    "\044\uffb1\001\002\000\004\014\uffb0\001\002\000\004\014" +
    "\212\001\002\000\012\015\uffac\030\105\043\101\044\102" +
    "\001\002\000\004\015\225\001\002\000\006\023\110\026" +
    "\215\001\002\000\006\015\uffae\021\uffae\001\002\000\006" +
    "\015\uffa9\021\217\001\002\000\010\030\105\043\101\044" +
    "\102\001\002\000\004\015\uffad\001\002\000\006\023\110" +
    "\026\222\001\002\000\006\015\uffab\021\uffab\001\002\000" +
    "\006\015\uffa9\021\217\001\002\000\004\015\uffaa\001\002" +
    "\000\004\016\226\001\002\000\030\003\036\004\uffe3\014" +
    "\015\017\ufff1\026\035\042\016\046\037\047\031\050\034" +
    "\051\uffd2\055\013\001\002\000\004\017\230\001\002\000" +
    "\014\002\uffaf\027\uffaf\030\uffaf\043\uffaf\044\uffaf\001\002" +
    "\000\004\002\uffe9\001\002\000\014\002\uffb7\027\uffb7\030" +
    "\uffb7\043\uffb7\044\uffb7\001\002\000\004\014\uffb6\001\002" +
    "\000\004\014\235\001\002\000\012\015\uffac\030\105\043" +
    "\101\044\102\001\002\000\004\015\237\001\002\000\004" +
    "\016\240\001\002\000\030\003\036\004\uffe3\014\015\020" +
    "\ufff1\026\035\042\016\046\037\047\031\050\034\051\uffd2" +
    "\055\013\001\002\000\004\020\244\001\002\000\004\017" +
    "\243\001\002\000\014\002\uffb5\027\uffb5\030\uffb5\043\uffb5" +
    "\044\uffb5\001\002\000\016\014\uffb4\016\uffb4\025\uffb4\026" +
    "\uffb4\042\uffb4\045\uffb4\001\002\000\016\014\015\016\117" +
    "\025\120\026\113\042\016\045\116\001\002\000\004\017" +
    "\uffb3\001\002\000\004\017\uffb2\001\002\000\004\002\uffea" +
    "\001\002\000\020\006\ufff2\007\ufff2\010\ufff2\013\ufff2\017" +
    "\ufff2\020\ufff2\052\ufff2\001\002\000\044\003\036\004\uffe3" +
    "\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\015\017\ufff1\020" +
    "\ufff1\026\035\042\016\046\037\047\031\050\034\051\uffd2" +
    "\052\ufff1\055\013\001\002\000\020\006\ufff3\007\ufff3\010" +
    "\ufff3\013\ufff3\017\ufff3\020\ufff3\052\ufff3\001\002\000\020" +
    "\006\ufffc\007\ufffc\010\ufffc\013\ufffc\017\ufffc\020\ufffc\052" +
    "\ufffc\001\002\000\020\006\ufff5\007\ufff5\010\ufff5\013\ufff5" +
    "\017\ufff5\020\ufff5\052\ufff5\001\002\000\004\014\257\001" +
    "\002\000\012\025\046\026\053\034\047\042\051\001\002" +
    "\000\004\015\261\001\002\000\004\005\uffe2\001\002\000" +
    "\004\005\263\001\002\000\034\003\036\004\uffe3\006\ufff1" +
    "\007\ufff1\010\ufff1\014\015\026\035\042\016\046\037\047" +
    "\031\050\034\051\uffd2\055\013\001\002\000\010\006\270" +
    "\007\267\010\uffdb\001\002\000\004\010\uffde\001\002\000" +
    "\004\010\303\001\002\000\004\014\274\001\002\000\004" +
    "\005\271\001\002\000\030\003\uffdd\004\uffdd\010\uffdd\014" +
    "\uffdd\026\uffdd\042\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\055\uffdd\001\002\000\030\003\036\004\uffe3\010\ufff1\014" +
    "\015\026\035\042\016\046\037\047\031\050\034\051\uffd2" +
    "\055\013\001\002\000\004\010\uffdc\001\002\000\012\025" +
    "\046\026\053\034\047\042\051\001\002\000\004\015\276" +
    "\001\002\000\004\005\uffe0\001\002\000\004\005\300\001" +
    "\002\000\034\003\036\004\uffe3\006\ufff1\007\ufff1\010\ufff1" +
    "\014\015\026\035\042\016\046\037\047\031\050\034\051" +
    "\uffd2\055\013\001\002\000\010\006\270\007\267\010\uffdb" +
    "\001\002\000\004\010\uffdf\001\002\000\044\003\uffe1\004" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\026\uffe1\042\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\055\uffe1\001\002\000\020\006\ufffb\007\ufffb" +
    "\010\ufffb\013\ufffb\017\ufffb\020\ufffb\052\ufffb\001\002\000" +
    "\004\014\306\001\002\000\004\026\307\001\002\000\004" +
    "\015\310\001\002\000\004\053\uffd1\001\002\000\004\053" +
    "\313\001\002\000\004\013\323\001\002\000\016\014\015" +
    "\016\117\025\120\026\113\042\016\045\116\001\002\000" +
    "\004\054\uffcf\001\002\000\004\054\316\001\002\000\030" +
    "\003\036\004\uffe3\014\015\026\035\042\016\046\037\047" +
    "\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000\004" +
    "\052\320\001\002\000\006\013\uffcc\053\313\001\002\000" +
    "\004\013\uffce\001\002\000\004\013\uffcd\001\002\000\044" +
    "\003\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\014" +
    "\uffd0\017\uffd0\020\uffd0\026\uffd0\042\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\055\uffd0\001\002\000\020\006" +
    "\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\052\ufff6" +
    "\001\002\000\010\015\326\036\153\037\152\001\002\000" +
    "\064\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\026" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\001" +
    "\002\000\020\006\ufff8\007\ufff8\010\ufff8\013\ufff8\017\ufff8" +
    "\020\ufff8\052\ufff8\001\002\000\020\006\ufff9\007\ufff9\010" +
    "\ufff9\013\ufff9\017\ufff9\020\ufff9\052\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\011\001\001\000\040\003\027\004" +
    "\024\007\020\010\037\011\026\012\016\032\040\034\013" +
    "\041\032\042\021\043\031\044\023\045\025\054\022\065" +
    "\017\001\001\000\040\003\327\004\024\007\020\010\037" +
    "\011\026\012\016\032\040\034\013\041\032\042\021\043" +
    "\031\044\023\045\025\054\022\065\017\001\001\000\040" +
    "\003\326\004\024\007\020\010\037\011\026\012\016\032" +
    "\040\034\013\041\032\042\021\043\031\044\023\045\025" +
    "\054\022\065\017\001\001\000\010\041\324\042\021\043" +
    "\031\001\001\000\002\001\001\000\040\003\323\004\024" +
    "\007\020\010\037\011\026\012\016\032\040\034\013\041" +
    "\032\042\021\043\031\044\023\045\025\054\022\065\017" +
    "\001\001\000\002\001\001\000\040\003\303\004\024\007" +
    "\020\010\037\011\026\012\016\032\040\034\013\041\032" +
    "\042\021\043\031\044\023\045\025\054\022\065\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\254" +
    "\004\024\007\020\010\037\011\026\012\016\032\040\034" +
    "\013\041\032\042\021\043\031\044\023\045\025\054\022" +
    "\065\017\001\001\000\040\003\253\004\024\007\020\010" +
    "\037\011\026\012\016\032\040\034\013\041\032\042\021" +
    "\043\031\044\023\045\025\054\022\065\017\001\001\000" +
    "\004\052\251\001\001\000\040\003\250\004\024\007\020" +
    "\010\037\011\026\012\016\032\040\034\013\041\032\042" +
    "\021\043\031\044\023\045\025\054\022\065\017\001\001" +
    "\000\002\001\001\000\004\062\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\102" +
    "\040\105\053\077\001\001\000\040\003\076\004\024\007" +
    "\020\010\037\011\026\012\016\032\040\034\013\041\032" +
    "\042\021\043\031\044\023\045\025\054\022\065\017\001" +
    "\001\000\004\060\043\001\001\000\040\003\042\004\024" +
    "\007\020\010\037\011\026\012\016\032\040\034\013\041" +
    "\032\042\021\043\031\044\023\045\025\054\022\065\017" +
    "\001\001\000\040\003\041\004\024\007\020\010\037\011" +
    "\026\012\016\032\040\034\013\041\032\042\021\043\031" +
    "\044\023\045\025\054\022\065\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\051" +
    "\016\047\001\001\000\002\001\001\000\004\016\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\055\001\001\000\004\020" +
    "\066\001\001\000\002\001\001\000\004\020\065\001\001" +
    "\000\004\020\060\001\001\000\002\001\001\000\006\015" +
    "\064\016\047\001\001\000\006\015\063\016\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\070\001\001\000\040\003\071" +
    "\004\024\007\020\010\037\011\026\012\016\032\040\034" +
    "\013\041\032\042\021\043\031\044\023\045\025\054\022" +
    "\065\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\036\111\037\114\041" +
    "\032\042\021\043\031\044\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\041\032\042\021\043\031\044\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\122\001\001\000\004" +
    "\035\123\001\001\000\004\076\130\001\001\000\012\041" +
    "\032\042\021\043\031\044\125\001\001\000\004\077\126" +
    "\001\001\000\004\035\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\111\037\135\041\032\042\021\043" +
    "\031\044\113\001\001\000\002\001\001\000\020\036\111" +
    "\037\137\041\032\042\021\043\031\044\113\046\140\001" +
    "\001\000\004\047\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\036\111\037\144\041" +
    "\032\042\021\043\031\044\113\001\001\000\004\047\145" +
    "\001\001\000\002\001\001\000\016\036\111\037\147\041" +
    "\032\042\021\043\031\044\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\160\043\031\001\001\000" +
    "\006\042\153\043\031\001\001\000\002\001\001\000\004" +
    "\043\157\001\001\000\004\043\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\163\001\001\000\002\001\001\000\004\040" +
    "\105\001\001\000\006\015\166\016\047\001\001\000\004" +
    "\063\167\001\001\000\002\001\001\000\006\015\171\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\174\001\001\000\040\003\175\004\024\007\020\010" +
    "\037\011\026\012\016\032\040\034\013\041\032\042\021" +
    "\043\031\044\023\045\025\054\022\065\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\200\001\001" +
    "\000\012\021\201\022\202\026\204\040\203\001\001\000" +
    "\002\001\001\000\012\021\247\022\202\026\204\040\203" +
    "\001\001\000\004\023\231\001\001\000\012\021\230\022" +
    "\202\026\204\040\203\001\001\000\004\027\206\001\001" +
    "\000\002\001\001\000\004\072\210\001\001\000\002\001" +
    "\001\000\006\030\212\040\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\215\001\001\000\004\031" +
    "\217\001\001\000\004\040\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\222\001\001\000\004\031" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\226\004\024\007\020\010\037\011\026\012\016\032" +
    "\040\034\013\041\032\042\021\043\031\044\023\045\025" +
    "\054\022\065\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\233" +
    "\001\001\000\002\001\001\000\006\030\235\040\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\240" +
    "\004\024\007\020\010\037\011\026\012\016\025\241\032" +
    "\040\034\013\041\032\042\021\043\031\044\023\045\025" +
    "\054\022\065\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\244\001\001\000\020" +
    "\024\245\036\111\037\246\041\032\042\021\043\031\044" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\252\004\024\007" +
    "\020\010\037\011\026\012\016\032\040\034\013\041\032" +
    "\042\021\043\031\044\023\045\025\054\022\065\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\257\016\047\001\001\000" +
    "\002\001\001\000\004\055\261\001\001\000\002\001\001" +
    "\000\040\003\263\004\024\007\020\010\037\011\026\012" +
    "\016\032\040\034\013\041\032\042\021\043\031\044\023" +
    "\045\025\054\022\065\017\001\001\000\006\005\265\006" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\271\001\001\000" +
    "\040\003\272\004\024\007\020\010\037\011\026\012\016" +
    "\032\040\034\013\041\032\042\021\043\031\044\023\045" +
    "\025\054\022\065\017\001\001\000\002\001\001\000\006" +
    "\015\274\016\047\001\001\000\002\001\001\000\004\056" +
    "\276\001\001\000\002\001\001\000\040\003\300\004\024" +
    "\007\020\010\037\011\026\012\016\032\040\034\013\041" +
    "\032\042\021\043\031\044\023\045\025\054\022\065\017" +
    "\001\001\000\006\005\301\006\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\310\001" +
    "\001\000\004\013\311\001\001\000\002\001\001\000\016" +
    "\036\111\037\313\041\032\042\021\043\031\044\113\001" +
    "\001\000\004\067\314\001\001\000\002\001\001\000\040" +
    "\003\316\004\024\007\020\010\037\011\026\012\016\032" +
    "\040\034\013\041\032\042\021\043\031\044\023\045\025" +
    "\054\022\065\017\001\001\000\002\001\001\000\006\013" +
    "\321\014\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";

       public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= INIT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= FCALL NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= WRITE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = call; System.out.println("\tLlamado a funcion: "+call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALL ::= id NT$3 parIzq FCALLARGS parDer 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INIT ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\tAsignacion: id: "+i+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG2 ::= openBrk number closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIG2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= NT$4 ifstart parIzq COND parDer NT$5 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSIF ::= elseif parIzq COND parDer NT$6 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= elseclause ifthen NT$7 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WHILE ::= whilestart NT$8 parIzq COND parDer NT$9 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WRITE ::= writestart parIzq VALS parDer 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("\tWRITE Valor:"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= forstart NT$10 parIzq INIT pcoma COND NT$11 pcoma COND parDer begin NT$12 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECT ::= NT$13 selectstart parIzq id parDer NT$14 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$15 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPT ::= options VALS NT$15 colon EXP breaks OPT2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPT2 ::= OPT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPT2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND2 ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND3 ::= booleano COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETFUNC ::= TIPO RETFUNC2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$16 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("FUNCTION "+val+" START ");  calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETFUNC2 ::= id NT$16 parIzq ARGS parDer cbOpen RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETFUNCBODY ::= EXP ret NT$17 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VOIDFUNC ::= voidType VOIDFUNC2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$18 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("VOID FUNCTION "+val+" START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VOIDFUNC2 ::= id NT$18 parIzq ARGS parDer cbOpen EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		 
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$19 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\tArgumento - tipo: "+t+", id: "+i); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGS ::= TIPO id NT$19 ARGS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$20 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\tArgumento - tipo: "+t+", id: "+i); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGS2 ::= coma TIPO id NT$20 ARGS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= charval 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ch; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALS ::= ARRVAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$21 ::= 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 RESULT = arrayValue; arrayValue = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRVAL ::= cbOpen S NT$21 ARRVAL2 NT$22 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRVAL ::= cbOpen cbClose 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$23 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue += (", " + val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARRVAL2 ::= coma S NT$23 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
