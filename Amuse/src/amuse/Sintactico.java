
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\033\002\000\002\034" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\002\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\002\000\002\030\006\000\002\030\005\000\002\035\002" +
    "\000\002\036\002\000\002\004\014\000\002\037\002\000" +
    "\002\005\012\000\002\005\003\000\002\040\002\000\002" +
    "\006\006\000\002\006\002\000\002\041\002\000\002\042" +
    "\002\000\002\007\012\000\002\043\002\000\002\044\002" +
    "\000\002\045\002\000\002\010\017\000\002\046\002\000" +
    "\002\047\002\000\002\011\012\000\002\012\010\000\002" +
    "\012\007\000\002\013\004\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\015\004\000\002\015\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\002\000" +
    "\002\050\002\000\002\020\005\000\002\051\002\000\002" +
    "\052\002\000\002\021\013\000\002\053\002\000\002\022" +
    "\006\000\002\023\003\000\002\054\002\000\002\024\005" +
    "\000\002\055\002\000\002\056\002\000\002\025\013\000" +
    "\002\026\005\000\002\026\002\000\002\027\004\000\002" +
    "\027\002\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\022\003\000\004\000\017\000\024\000\040\000\041\000" +
    "\042\000\046\000\001\002\000\022\003\023\004\uffef\017" +
    "\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\046\020\001\002" +
    "\000\004\040\225\001\002\000\036\003\023\004\uffef\006" +
    "\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\024\015" +
    "\040\uffe6\041\uffe3\042\uffdf\043\ufff6\046\020\001\002\000" +
    "\012\034\217\035\111\036\113\037\114\001\002\000\036" +
    "\003\023\004\uffef\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017" +
    "\ufff6\020\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\043\ufff6" +
    "\046\020\001\002\000\004\004\170\001\002\000\036\003" +
    "\023\004\uffef\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6" +
    "\020\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\043\ufff6\046" +
    "\020\001\002\000\036\003\023\004\uffef\006\ufff6\007\ufff6" +
    "\010\ufff6\013\ufff6\017\ufff6\020\ufff6\024\015\040\uffe6\041" +
    "\uffe3\042\uffdf\043\ufff6\046\020\001\002\000\036\003\023" +
    "\004\uffef\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020" +
    "\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\043\ufff6\046\020" +
    "\001\002\000\036\003\023\004\uffef\006\ufff6\007\ufff6\010" +
    "\ufff6\013\ufff6\017\ufff6\020\ufff6\024\015\040\uffe6\041\uffe3" +
    "\042\uffdf\043\ufff6\046\020\001\002\000\036\003\023\004" +
    "\uffef\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6" +
    "\024\015\040\uffe6\041\uffe3\042\uffdf\043\ufff6\046\020\001" +
    "\002\000\004\017\105\001\002\000\004\042\065\001\002" +
    "\000\004\041\030\001\002\000\004\014\031\001\002\000" +
    "\004\024\015\001\002\000\004\022\033\001\002\000\010" +
    "\024\040\025\036\033\034\001\002\000\006\024\040\025" +
    "\036\001\002\000\006\015\uffd9\022\uffd9\001\002\000\004" +
    "\027\062\001\002\000\004\022\uffe2\001\002\000\004\027" +
    "\041\001\002\000\006\024\044\025\043\001\002\000\006" +
    "\015\uffd8\022\uffd8\001\002\000\012\015\uffd2\022\uffd2\031" +
    "\047\032\046\001\002\000\012\015\uffd2\022\uffd2\031\047" +
    "\032\046\001\002\000\006\015\uffd6\022\uffd6\001\002\000" +
    "\010\024\040\025\036\033\034\001\002\000\010\024\040" +
    "\025\036\033\034\001\002\000\006\015\uffd4\022\uffd4\001" +
    "\002\000\006\015\uffd3\022\uffd3\001\002\000\006\015\uffd5" +
    "\022\uffd5\001\002\000\004\022\054\001\002\000\010\024" +
    "\040\025\036\033\034\001\002\000\004\015\056\001\002" +
    "\000\022\003\uffe1\004\uffe1\013\uffe1\024\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\046\uffe1\001\002\000\022\003\023\004\uffef" +
    "\013\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\046\020\001" +
    "\002\000\004\013\061\001\002\000\036\003\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\013\uffe0\017\uffe0\020\uffe0\024" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\046\uffe0\001\002" +
    "\000\006\024\044\025\043\001\002\000\006\015\uffd7\022" +
    "\uffd7\001\002\000\006\015\uffda\022\uffda\001\002\000\004" +
    "\014\066\001\002\000\004\024\067\001\002\000\004\015" +
    "\070\001\002\000\004\044\uffde\001\002\000\004\044\073" +
    "\001\002\000\004\013\104\001\002\000\010\023\074\024" +
    "\077\025\076\001\002\000\042\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\013\uffbb\017\uffbb\020\uffbb\022\uffbb\024" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb" +
    "\001\002\000\004\045\100\001\002\000\042\003\uffbc\004" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\013\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\024\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\001\002\000\042\003\uffbd\004\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\013\uffbd\017\uffbd\020\uffbd\022\uffbd\024" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd" +
    "\001\002\000\022\003\023\004\uffef\024\015\040\uffe6\041" +
    "\uffe3\042\uffdf\043\ufff6\046\020\001\002\000\004\043\102" +
    "\001\002\000\006\013\uffdb\044\073\001\002\000\004\013" +
    "\uffdc\001\002\000\036\003\uffdd\004\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\013\uffdd\017\uffdd\020\uffdd\024\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\046\uffdd\001\002\000\016\002\uffff" +
    "\003\uffff\026\uffff\035\uffff\036\uffff\037\uffff\001\002\000" +
    "\016\002\ufff2\003\117\026\116\035\111\036\113\037\114" +
    "\001\002\000\016\002\ufff2\003\117\026\116\035\111\036" +
    "\113\037\114\001\002\000\004\002\ufffe\001\002\000\006" +
    "\024\uffc0\034\uffc0\001\002\000\016\002\ufff2\003\117\026" +
    "\116\035\111\036\113\037\114\001\002\000\006\024\uffbf" +
    "\034\uffbf\001\002\000\006\024\uffbe\034\uffbe\001\002\000" +
    "\004\024\uffd1\001\002\000\004\024\uffc9\001\002\000\016" +
    "\002\ufff2\003\117\026\116\035\111\036\113\037\114\001" +
    "\002\000\004\002\ufff3\001\002\000\004\024\123\001\002" +
    "\000\016\002\uffc8\003\uffc8\026\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\004\014\124\001\002\000\012\015\uffc3" +
    "\035\111\036\113\037\114\001\002\000\004\015\uffc7\001" +
    "\002\000\004\024\127\001\002\000\006\015\uffc1\021\130" +
    "\001\002\000\012\015\uffc3\035\111\036\113\037\114\001" +
    "\002\000\004\015\uffc4\001\002\000\004\015\uffc2\001\002" +
    "\000\004\015\134\001\002\000\004\016\135\001\002\000" +
    "\022\003\uffc6\004\uffc6\017\uffc6\024\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\046\uffc6\001\002\000\022\003\023\004\uffef\017" +
    "\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\046\020\001\002" +
    "\000\004\017\140\001\002\000\016\002\uffc5\003\uffc5\026" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\004\024\143" +
    "\001\002\000\016\002\uffd0\003\uffd0\026\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\001\002\000\004\014\144\001\002\000\012" +
    "\015\uffc3\035\111\036\113\037\114\001\002\000\004\015" +
    "\uffcf\001\002\000\004\015\147\001\002\000\004\016\150" +
    "\001\002\000\022\003\uffce\004\uffce\020\uffce\024\uffce\040" +
    "\uffce\041\uffce\042\uffce\046\uffce\001\002\000\022\003\023" +
    "\004\uffef\020\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\046" +
    "\020\001\002\000\004\017\160\001\002\000\004\020\154" +
    "\001\002\000\010\023\uffcc\024\uffcc\025\uffcc\001\002\000" +
    "\010\023\074\024\077\025\076\001\002\000\004\017\uffcb" +
    "\001\002\000\004\017\uffca\001\002\000\016\002\uffcd\003" +
    "\uffcd\026\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002\000\004" +
    "\002\ufff5\001\002\000\004\002\ufff4\001\002\000\020\006" +
    "\ufff7\007\ufff7\010\ufff7\013\ufff7\017\ufff7\020\ufff7\043\ufff7" +
    "\001\002\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017" +
    "\ufffa\020\ufffa\043\ufffa\001\002\000\020\006\ufffb\007\ufffb" +
    "\010\ufffb\013\ufffb\017\ufffb\020\ufffb\043\ufffb\001\002\000" +
    "\020\006\ufffd\007\ufffd\010\ufffd\013\ufffd\017\ufffd\020\ufffd" +
    "\043\ufffd\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\013" +
    "\ufff9\017\ufff9\020\ufff9\043\ufff9\001\002\000\004\014\171" +
    "\001\002\000\010\024\040\025\036\033\034\001\002\000" +
    "\004\015\173\001\002\000\004\005\uffee\001\002\000\004" +
    "\005\175\001\002\000\026\003\023\004\uffef\006\ufff6\007" +
    "\ufff6\010\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf\046\020" +
    "\001\002\000\010\006\202\007\201\010\uffe7\001\002\000" +
    "\004\010\uffea\001\002\000\004\010\215\001\002\000\004" +
    "\014\206\001\002\000\004\005\203\001\002\000\022\003" +
    "\uffe9\004\uffe9\010\uffe9\024\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\046\uffe9\001\002\000\022\003\023\004\uffef\010\ufff6\024" +
    "\015\040\uffe6\041\uffe3\042\uffdf\046\020\001\002\000\004" +
    "\010\uffe8\001\002\000\010\024\040\025\036\033\034\001" +
    "\002\000\004\015\210\001\002\000\004\005\uffec\001\002" +
    "\000\004\005\212\001\002\000\026\003\023\004\uffef\006" +
    "\ufff6\007\ufff6\010\ufff6\024\015\040\uffe6\041\uffe3\042\uffdf" +
    "\046\020\001\002\000\010\006\202\007\201\010\uffe7\001" +
    "\002\000\004\010\uffeb\001\002\000\036\003\uffed\004\uffed" +
    "\006\uffed\007\uffed\010\uffed\013\uffed\017\uffed\020\uffed\024" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\046\uffed\001\002" +
    "\000\020\006\ufff8\007\ufff8\010\ufff8\013\ufff8\017\ufff8\020" +
    "\ufff8\043\ufff8\001\002\000\010\023\074\024\077\025\076" +
    "\001\002\000\004\034\221\001\002\000\010\023\074\024" +
    "\077\025\076\001\002\000\040\003\ufff1\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\017\ufff1\020\ufff1\022\ufff1\024" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\046\ufff1\001\002" +
    "\000\040\003\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\013" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\024\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\046\ufff0\001\002\000\020\006\ufffc\007" +
    "\ufffc\010\ufffc\013\ufffc\017\ufffc\020\ufffc\043\ufffc\001\002" +
    "\000\004\014\226\001\002\000\010\024\040\025\036\033" +
    "\034\001\002\000\004\015\230\001\002\000\022\003\uffe5" +
    "\004\uffe5\013\uffe5\024\uffe5\040\uffe5\041\uffe5\042\uffe5\046" +
    "\uffe5\001\002\000\022\003\023\004\uffef\013\ufff6\024\015" +
    "\040\uffe6\041\uffe3\042\uffdf\046\020\001\002\000\004\013" +
    "\233\001\002\000\036\003\uffe4\004\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\013\uffe4\017\uffe4\020\uffe4\024\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\046\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\011\001\001\000\026\003\024\004" +
    "\020\007\013\010\015\011\023\030\021\035\016\041\012" +
    "\043\026\046\025\001\001\000\002\001\001\000\026\003" +
    "\223\004\020\007\013\010\015\011\023\030\021\035\016" +
    "\041\012\043\026\046\025\001\001\000\004\032\217\001" +
    "\001\000\026\003\215\004\020\007\013\010\015\011\023" +
    "\030\021\035\016\041\012\043\026\046\025\001\001\000" +
    "\002\001\001\000\026\003\166\004\020\007\013\010\015" +
    "\011\023\030\021\035\016\041\012\043\026\046\025\001" +
    "\001\000\026\003\165\004\020\007\013\010\015\011\023" +
    "\030\021\035\016\041\012\043\026\046\025\001\001\000" +
    "\026\003\164\004\020\007\013\010\015\011\023\030\021" +
    "\035\016\041\012\043\026\046\025\001\001\000\026\003" +
    "\163\004\020\007\013\010\015\011\023\030\021\035\016" +
    "\041\012\043\026\046\025\001\001\000\026\003\162\004" +
    "\020\007\013\010\015\011\023\030\021\035\016\041\012" +
    "\043\026\046\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\031" +
    "\001\001\000\002\001\001\000\006\013\036\014\034\001" +
    "\001\000\004\014\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\052\001\001\000\002\001\001\000" +
    "\004\015\041\001\001\000\002\001\001\000\004\016\051" +
    "\001\001\000\004\016\044\001\001\000\002\001\001\000" +
    "\006\013\050\014\034\001\001\000\006\013\047\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\054\014\034\001\001" +
    "\000\002\001\001\000\004\045\056\001\001\000\026\003" +
    "\057\004\020\007\013\010\015\011\023\030\021\035\016" +
    "\041\012\043\026\046\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\070\001\001\000\004\012\071" +
    "\001\001\000\002\001\001\000\004\031\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\100\004\020\007\013\010\015\011" +
    "\023\030\021\035\016\041\012\043\026\046\025\001\001" +
    "\000\002\001\001\000\004\012\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\105\001\001\000\012" +
    "\017\107\020\111\024\106\032\114\001\001\000\012\017" +
    "\161\020\111\024\106\032\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\160\020\111\024\106\032" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\140\001\001\000\004\054\120\001\001\000\012\017" +
    "\117\020\111\024\106\032\114\001\001\000\002\001\001" +
    "\000\004\025\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\124\032\125\001\001\000\004\055\132" +
    "\001\001\000\002\001\001\000\004\027\130\001\001\000" +
    "\006\026\131\032\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\135\001\001\000\026\003\136\004\020\007\013\010\015" +
    "\011\023\030\021\035\016\041\012\043\026\046\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\144\032\125\001\001\000\004\051\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\150\001\001\000" +
    "\030\003\152\004\020\007\013\010\015\011\023\022\151" +
    "\030\021\035\016\041\012\043\026\046\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\154\001\001" +
    "\000\006\023\155\031\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\171\014\034\001\001\000\002\001\001\000" +
    "\004\036\173\001\001\000\002\001\001\000\026\003\175" +
    "\004\020\007\013\010\015\011\023\030\021\035\016\041" +
    "\012\043\026\046\025\001\001\000\006\005\177\006\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\203\001\001\000\026" +
    "\003\204\004\020\007\013\010\015\011\023\030\021\035" +
    "\016\041\012\043\026\046\025\001\001\000\002\001\001" +
    "\000\006\013\206\014\034\001\001\000\002\001\001\000" +
    "\004\037\210\001\001\000\002\001\001\000\026\003\212" +
    "\004\020\007\013\010\015\011\023\030\021\035\016\041" +
    "\012\043\026\046\025\001\001\000\006\005\213\006\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\222\001\001\000\002\001\001\000\004" +
    "\031\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\226\014\034" +
    "\001\001\000\002\001\001\000\004\042\230\001\001\000" +
    "\026\003\231\004\020\007\013\010\015\011\023\030\021" +
    "\035\016\041\012\043\026\046\025\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right+1));
                        if(s.right>=0)
                                m.append(", columna "+(s.left+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.right)+", column "+cur_token.left);
                System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= error EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= FOR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIG ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG ::= id opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= NT$2 ifstart parIzq COND parDer NT$3 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSIF ::= elseif parIzq COND parDer NT$4 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= elseclause ifthen NT$5 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WHILE ::= NT$6 whilestart parIzq COND parDer NT$7 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= NT$8 forstart parIzq ASIG pcoma COND NT$9 pcoma COND parDer NT$10 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SELECT ::= NT$11 selectstart parIzq id parDer NT$12 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETFUNC ::= TIPO NT$13 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETFUNC2 ::= id parIzq ARGS NT$14 parDer cbOpen NT$15 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$16 ::= 
            {
              Object RESULT =null;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETFUNCBODY ::= EXP ret NT$16 RETVAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$17 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VOIDFUNC ::= voidType NT$17 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$18 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VOIDFUNC2 ::= id parIzq ARGS NT$18 parDer cbOpen NT$19 EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARGS2 ::= coma ARGS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALS ::= number 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
