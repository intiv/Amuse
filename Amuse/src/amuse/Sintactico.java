
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\045\002\000\002\046" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\002\000\002\047\002\000\002\042" +
    "\007\000\002\043\004\000\002\043\002\000\002\044\005" +
    "\000\002\044\002\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\002\000\002\030\006\000\002" +
    "\030\005\000\002\030\007\000\002\030\006\000\002\050" +
    "\002\000\002\033\006\000\002\033\004\000\002\051\002" +
    "\000\002\052\002\000\002\004\014\000\002\053\002\000" +
    "\002\005\012\000\002\005\003\000\002\054\002\000\002" +
    "\006\006\000\002\006\002\000\002\055\002\000\002\056" +
    "\002\000\002\007\012\000\002\057\002\000\002\060\002" +
    "\000\002\061\002\000\002\010\017\000\002\062\002\000" +
    "\002\063\002\000\002\011\012\000\002\012\010\000\002" +
    "\012\007\000\002\013\004\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\015\004\000\002\015\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\002\000" +
    "\002\041\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\003\000\002\040\003\000\002\040\005\000\002\064\002" +
    "\000\002\020\005\000\002\065\002\000\002\066\002\000" +
    "\002\021\013\000\002\067\002\000\002\070\002\000\002" +
    "\023\007\000\002\022\003\000\002\071\002\000\002\024" +
    "\005\000\002\072\002\000\002\073\002\000\002\025\013" +
    "\000\002\026\005\000\002\026\002\000\002\027\006\000" +
    "\002\027\002\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\074\002\000\002\034\006\000\002\075\002" +
    "\000\002\031\005\000\002\031\002\000\002\076\002\000" +
    "\002\032\006\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\026\003\000\004\000\014\000\017\000\026\000\042\000" +
    "\046\000\047\000\050\000\054\000\001\002\000\026\003" +
    "\034\004\uffe2\014\014\017\ufff4\026\033\042\015\046\uffd9" +
    "\047\uffd6\050\uffd2\054\013\001\002\000\042\003\034\004" +
    "\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017\ufff4" +
    "\020\ufff4\026\033\042\015\046\uffd9\047\uffd6\050\uffd2\051" +
    "\ufff4\054\013\001\002\000\006\014\014\042\015\001\002" +
    "\000\062\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\026\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\001\002" +
    "\000\042\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\013" +
    "\ufff4\014\014\017\ufff4\020\ufff4\026\033\042\015\046\uffd9" +
    "\047\uffd6\050\uffd2\051\ufff4\054\013\001\002\000\004\046" +
    "\307\001\002\000\004\050\272\001\002\000\042\003\034" +
    "\004\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017" +
    "\ufff4\020\ufff4\026\033\042\015\046\uffd9\047\uffd6\050\uffd2" +
    "\051\ufff4\054\013\001\002\000\004\047\254\001\002\000" +
    "\062\003\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\026" +
    "\uffc1\036\uffc1\037\uffc1\040\120\041\117\042\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\001\002\000" +
    "\042\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\014\014\017\ufff4\020\ufff4\026\033\042\015\046\uffd9\047" +
    "\uffd6\050\uffd2\051\ufff4\054\013\001\002\000\004\004\204" +
    "\001\002\000\042\003\034\004\uffe2\006\ufff4\007\ufff4\010" +
    "\ufff4\013\ufff4\014\014\017\ufff4\020\ufff4\026\033\042\015" +
    "\046\uffd9\047\uffd6\050\uffd2\051\ufff4\054\013\001\002\000" +
    "\042\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\014\014\017\ufff4\020\ufff4\026\033\042\015\046\uffd9\047" +
    "\uffd6\050\uffd2\051\ufff4\054\013\001\002\000\004\017\124" +
    "\001\002\000\062\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe" +
    "\001\002\000\056\003\uffc4\004\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\026\uffc4\036\115\037\114\042\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\001\002\000\016" +
    "\014\ufff3\023\047\035\045\043\044\044\046\045\050\001" +
    "\002\000\042\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4" +
    "\013\ufff4\014\014\017\ufff4\020\ufff4\026\033\042\015\046" +
    "\uffd9\047\uffd6\050\uffd2\051\ufff4\054\013\001\002\000\042" +
    "\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014" +
    "\014\017\ufff4\020\ufff4\026\033\042\015\046\uffd9\047\uffd6" +
    "\050\uffd2\051\ufff4\054\013\001\002\000\042\003\034\004" +
    "\uffe2\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017\ufff4" +
    "\020\ufff4\026\033\042\015\046\uffd9\047\uffd6\050\uffd2\051" +
    "\ufff4\054\013\001\002\000\020\006\ufffb\007\ufffb\010\ufffb" +
    "\013\ufffb\017\ufffb\020\ufffb\051\ufffb\001\002\000\020\006" +
    "\ufff8\007\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\051\ufff8" +
    "\001\002\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017" +
    "\ufffa\020\ufffa\051\ufffa\001\002\000\004\014\104\001\002" +
    "\000\004\035\102\001\002\000\010\023\uffa9\026\uffa9\035" +
    "\uffa9\001\002\000\014\014\014\016\057\025\060\026\054" +
    "\042\015\001\002\000\010\023\uffa8\026\uffa8\035\uffa8\001" +
    "\002\000\006\024\075\042\076\001\002\000\010\023\uffa7" +
    "\026\uffa7\035\uffa7\001\002\000\006\023\047\035\053\001" +
    "\002\000\004\035\073\001\002\000\014\014\014\016\057" +
    "\025\060\026\054\042\015\001\002\000\052\003\uffa6\004" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\026\uffa6\042\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\001\002" +
    "\000\052\003\uffa4\004\uffa4\006\uffa4\007\uffa4\010\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\026\uffa4\042\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053" +
    "\uffa4\054\uffa4\001\002\000\044\003\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\026\uffe9\042\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\054\uffe9\001\002\000\010\014\014\017\uff9f\042\015\001" +
    "\002\000\052\003\uffa5\004\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\026\uffa5\042\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\053\uffa5\054\uffa5\001\002\000\004\017\uffa3\001\002\000" +
    "\006\017\uffa1\021\uffa1\001\002\000\006\017\uff9c\021\065" +
    "\001\002\000\004\017\uffa0\001\002\000\006\014\014\042" +
    "\015\001\002\000\006\017\uff9e\021\uff9e\001\002\000\006" +
    "\017\uff9c\021\065\001\002\000\004\017\uff9d\001\002\000" +
    "\004\017\072\001\002\000\052\003\uffa2\004\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\026\uffa2\042\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\053\uffa2\054\uffa2\001\002\000\014\014" +
    "\014\016\057\025\060\026\054\042\015\001\002\000\044" +
    "\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\017\uffe7\020\uffe7\022\uffe7\026\uffe7\042\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\054\uffe7\001\002\000\004\035" +
    "\uffe3\001\002\000\004\024\uffe5\001\002\000\004\024\100" +
    "\001\002\000\004\035\uffe4\001\002\000\044\003\uffe8\004" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\017\uffe8" +
    "\020\uffe8\022\uffe8\026\uffe8\042\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\054\uffe8\001\002\000\014\014\014\016\057" +
    "\025\060\026\054\042\015\001\002\000\044\003\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\017\uffe6" +
    "\020\uffe6\022\uffe6\026\uffe6\042\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\054\uffe6\001\002\000\016\014\014\015\ufff0" +
    "\016\057\025\060\026\054\042\015\001\002\000\006\015" +
    "\uffee\021\111\001\002\000\004\015\107\001\002\000\042" +
    "\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014" +
    "\ufff2\017\ufff2\020\ufff2\026\ufff2\042\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\054\ufff2\001\002\000\004\015\ufff1\001" +
    "\002\000\014\014\014\016\057\025\060\026\054\042\015" +
    "\001\002\000\006\015\uffee\021\111\001\002\000\004\015" +
    "\uffef\001\002\000\006\014\014\042\015\001\002\000\006" +
    "\014\014\042\015\001\002\000\062\003\uffc3\004\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\026\uffc3\036\uffc3\037\uffc3\040" +
    "\120\041\117\042\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\001\002\000\006\014\014\042\015\001" +
    "\002\000\006\014\014\042\015\001\002\000\062\003\uffc0" +
    "\004\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\026\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\053\uffc0\054\uffc0\001\002\000\062\003\uffbf" +
    "\004\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\026\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\054\uffbf\001\002\000\062\003\uffc2" +
    "\004\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\026\uffc2\036\uffc2" +
    "\037\uffc2\040\120\041\117\042\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\053\uffc2\054\uffc2\001\002\000\016\002\uffff" +
    "\003\uffff\027\uffff\043\uffff\044\uffff\045\uffff\001\002\000" +
    "\016\002\uffea\003\133\027\131\043\044\044\046\045\050" +
    "\001\002\000\016\002\uffea\003\133\027\131\043\044\044" +
    "\046\045\050\001\002\000\004\002\ufffe\001\002\000\016" +
    "\002\uffea\003\133\027\131\043\044\044\046\045\050\001" +
    "\002\000\004\026\uffb2\001\002\000\004\026\uffbb\001\002" +
    "\000\016\002\uffea\003\133\027\131\043\044\044\046\045" +
    "\050\001\002\000\004\002\uffeb\001\002\000\004\026\137" +
    "\001\002\000\016\002\uffba\003\uffba\027\uffba\043\uffba\044" +
    "\uffba\045\uffba\001\002\000\004\014\140\001\002\000\012" +
    "\015\uffac\043\044\044\046\045\050\001\002\000\004\015" +
    "\uffb9\001\002\000\004\026\143\001\002\000\006\015\uffaa" +
    "\021\144\001\002\000\010\043\044\044\046\045\050\001" +
    "\002\000\004\015\uffad\001\002\000\004\026\147\001\002" +
    "\000\006\015\uffaa\021\144\001\002\000\004\015\uffab\001" +
    "\002\000\004\015\152\001\002\000\004\016\153\001\002" +
    "\000\026\003\uffb8\004\uffb8\014\uffb8\020\uffb8\026\uffb8\042" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\054\uffb8\001\002\000\026" +
    "\003\034\004\uffe2\014\014\020\ufff4\026\033\042\015\046" +
    "\uffd9\047\uffd6\050\uffd2\054\013\001\002\000\004\020\uffb6" +
    "\001\002\000\004\017\157\001\002\000\016\002\uffb7\003" +
    "\uffb7\027\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002\000\004" +
    "\020\161\001\002\000\014\014\uffb5\016\uffb5\025\uffb5\026" +
    "\uffb5\042\uffb5\001\002\000\014\014\014\016\057\025\060" +
    "\026\054\042\015\001\002\000\004\017\uffb4\001\002\000" +
    "\004\017\uffb3\001\002\000\004\026\167\001\002\000\016" +
    "\002\uffb1\003\uffb1\027\uffb1\043\uffb1\044\uffb1\045\uffb1\001" +
    "\002\000\004\014\170\001\002\000\012\015\uffac\043\044" +
    "\044\046\045\050\001\002\000\004\015\uffb0\001\002\000" +
    "\004\015\173\001\002\000\004\016\174\001\002\000\026" +
    "\003\uffaf\004\uffaf\014\uffaf\017\uffaf\026\uffaf\042\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\054\uffaf\001\002\000\026\003\034" +
    "\004\uffe2\014\014\017\ufff4\026\033\042\015\046\uffd9\047" +
    "\uffd6\050\uffd2\054\013\001\002\000\004\017\177\001\002" +
    "\000\016\002\uffae\003\uffae\027\uffae\043\uffae\044\uffae\045" +
    "\uffae\001\002\000\004\002\uffed\001\002\000\004\002\uffec" +
    "\001\002\000\020\006\ufff5\007\ufff5\010\ufff5\013\ufff5\017" +
    "\ufff5\020\ufff5\051\ufff5\001\002\000\020\006\ufffd\007\ufffd" +
    "\010\ufffd\013\ufffd\017\ufffd\020\ufffd\051\ufffd\001\002\000" +
    "\004\014\205\001\002\000\010\026\212\034\206\042\210" +
    "\001\002\000\006\026\212\042\210\001\002\000\006\015" +
    "\uffcc\022\uffcc\001\002\000\004\030\250\001\002\000\004" +
    "\015\225\001\002\000\004\030\213\001\002\000\006\026" +
    "\216\042\215\001\002\000\006\015\uffcb\022\uffcb\001\002" +
    "\000\012\015\uffc5\022\uffc5\032\221\033\220\001\002\000" +
    "\012\015\uffc5\022\uffc5\032\221\033\220\001\002\000\006" +
    "\015\uffc9\022\uffc9\001\002\000\010\026\212\034\206\042" +
    "\210\001\002\000\010\026\212\034\206\042\210\001\002" +
    "\000\006\015\uffc7\022\uffc7\001\002\000\006\015\uffc6\022" +
    "\uffc6\001\002\000\006\015\uffc8\022\uffc8\001\002\000\004" +
    "\005\uffe1\001\002\000\004\005\227\001\002\000\032\003" +
    "\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\014\014\026\033" +
    "\042\015\046\uffd9\047\uffd6\050\uffd2\054\013\001\002\000" +
    "\010\006\234\007\233\010\uffda\001\002\000\004\010\uffdd" +
    "\001\002\000\004\010\247\001\002\000\004\014\240\001" +
    "\002\000\004\005\235\001\002\000\026\003\uffdc\004\uffdc" +
    "\010\uffdc\014\uffdc\026\uffdc\042\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\054\uffdc\001\002\000\026\003\034\004\uffe2\010\ufff4" +
    "\014\014\026\033\042\015\046\uffd9\047\uffd6\050\uffd2\054" +
    "\013\001\002\000\004\010\uffdb\001\002\000\010\026\212" +
    "\034\206\042\210\001\002\000\004\015\242\001\002\000" +
    "\004\005\uffdf\001\002\000\004\005\244\001\002\000\032" +
    "\003\034\004\uffe2\006\ufff4\007\ufff4\010\ufff4\014\014\026" +
    "\033\042\015\046\uffd9\047\uffd6\050\uffd2\054\013\001\002" +
    "\000\010\006\234\007\233\010\uffda\001\002\000\004\010" +
    "\uffde\001\002\000\042\003\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0\026\uffe0\042" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\001\002" +
    "\000\006\026\216\042\215\001\002\000\006\015\uffca\022" +
    "\uffca\001\002\000\006\015\uffcd\022\uffcd\001\002\000\020" +
    "\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\051" +
    "\ufff6\001\002\000\004\014\255\001\002\000\004\026\257" +
    "\001\002\000\004\022\260\001\002\000\014\023\047\035" +
    "\045\043\044\044\046\045\050\001\002\000\010\026\212" +
    "\034\206\042\210\001\002\000\004\022\uffd5\001\002\000" +
    "\004\022\263\001\002\000\010\026\212\034\206\042\210" +
    "\001\002\000\004\015\265\001\002\000\026\003\uffd4\004" +
    "\uffd4\013\uffd4\014\uffd4\026\uffd4\042\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\054\uffd4\001\002\000\026\003\034\004\uffe2\013" +
    "\ufff4\014\014\026\033\042\015\046\uffd9\047\uffd6\050\uffd2" +
    "\054\013\001\002\000\004\013\270\001\002\000\042\003" +
    "\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3" +
    "\017\uffd3\020\uffd3\026\uffd3\042\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\054\uffd3\001\002\000\020\006\ufffc\007\ufffc" +
    "\010\ufffc\013\ufffc\017\ufffc\020\ufffc\051\ufffc\001\002\000" +
    "\004\014\273\001\002\000\004\026\274\001\002\000\004" +
    "\015\275\001\002\000\004\052\uffd1\001\002\000\004\052" +
    "\300\001\002\000\004\013\306\001\002\000\014\014\014" +
    "\016\057\025\060\026\054\042\015\001\002\000\004\053" +
    "\302\001\002\000\026\003\034\004\uffe2\014\014\026\033" +
    "\042\015\046\uffd9\047\uffd6\050\uffd2\051\ufff4\054\013\001" +
    "\002\000\004\051\304\001\002\000\006\013\uffce\052\300" +
    "\001\002\000\004\013\uffcf\001\002\000\042\003\uffd0\004" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0\017\uffd0" +
    "\020\uffd0\026\uffd0\042\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\054\uffd0\001\002\000\004\014\310\001\002\000\010" +
    "\026\212\034\206\042\210\001\002\000\004\015\312\001" +
    "\002\000\026\003\uffd8\004\uffd8\013\uffd8\014\uffd8\026\uffd8" +
    "\042\uffd8\046\uffd8\047\uffd8\050\uffd8\054\uffd8\001\002\000" +
    "\026\003\034\004\uffe2\013\ufff4\014\014\026\033\042\015" +
    "\046\uffd9\047\uffd6\050\uffd2\054\013\001\002\000\004\013" +
    "\315\001\002\000\042\003\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\026\uffd7\042" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\001\002" +
    "\000\020\006\ufff7\007\ufff7\010\ufff7\013\ufff7\017\ufff7\020" +
    "\ufff7\051\ufff7\001\002\000\010\015\320\036\115\037\114" +
    "\001\002\000\062\003\uffbc\004\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\026\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc" +
    "\001\002\000\020\006\ufff9\007\ufff9\010\ufff9\013\ufff9\017" +
    "\ufff9\020\ufff9\051\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\011\001\001\000\040\003\027\004" +
    "\025\007\020\010\034\011\015\030\035\036\031\037\022" +
    "\040\030\041\023\042\026\051\024\055\016\057\021\062" +
    "\017\001\001\000\040\003\320\004\025\007\020\010\034" +
    "\011\015\030\035\036\031\037\022\040\030\041\023\042" +
    "\026\051\024\055\016\057\021\062\017\001\001\000\010" +
    "\036\316\037\022\040\030\001\001\000\002\001\001\000" +
    "\040\003\315\004\025\007\020\010\034\011\015\030\035" +
    "\036\031\037\022\040\030\041\023\042\026\051\024\055" +
    "\016\057\021\062\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\270\004\025\007\020\010\034\011" +
    "\015\030\035\036\031\037\022\040\030\041\023\042\026" +
    "\051\024\055\016\057\021\062\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\252\004\025\007\020" +
    "\010\034\011\015\030\035\036\031\037\022\040\030\041" +
    "\023\042\026\051\024\055\016\057\021\062\017\001\001" +
    "\000\002\001\001\000\040\003\202\004\025\007\020\010" +
    "\034\011\015\030\035\036\031\037\022\040\030\041\023" +
    "\042\026\051\024\055\016\057\021\062\017\001\001\000" +
    "\040\003\201\004\025\007\020\010\034\011\015\030\035" +
    "\036\031\037\022\040\030\041\023\042\026\051\024\055" +
    "\016\057\021\062\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\042\035\050\047" +
    "\041\001\001\000\040\003\040\004\025\007\020\010\034" +
    "\011\015\030\035\036\031\037\022\040\030\041\023\042" +
    "\026\051\024\055\016\057\021\062\017\001\001\000\040" +
    "\003\037\004\025\007\020\010\034\011\015\030\035\036" +
    "\031\037\022\040\030\041\023\042\026\051\024\055\016" +
    "\057\021\062\017\001\001\000\040\003\036\004\025\007" +
    "\020\010\034\011\015\030\035\036\031\037\022\040\030" +
    "\041\023\042\026\051\024\055\016\057\021\062\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\100\036\031\037\022\040\030\041\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\051\001\001\000\002\001\001\000\014\034\055" +
    "\036\031\037\022\040\030\041\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\060" +
    "\036\031\037\022\040\030\041\061\001\001\000\002\001" +
    "\001\000\004\074\070\001\001\000\004\075\062\001\001" +
    "\000\004\032\063\001\001\000\002\001\001\000\012\036" +
    "\031\037\022\040\030\041\065\001\001\000\004\076\066" +
    "\001\001\000\004\032\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\073\036\031" +
    "\037\022\040\030\041\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\102\036" +
    "\031\037\022\040\030\041\054\001\001\000\002\001\001" +
    "\000\016\034\104\036\031\037\022\040\030\041\054\043" +
    "\105\001\001\000\004\044\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\111\036" +
    "\031\037\022\040\030\041\054\001\001\000\004\044\112" +
    "\001\001\000\002\001\001\000\006\037\122\040\030\001" +
    "\001\000\006\037\115\040\030\001\001\000\002\001\001" +
    "\000\004\040\121\001\001\000\004\040\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\124\001\001\000\012\017\126\020\127\024\125\035" +
    "\131\001\001\000\012\017\200\020\127\024\125\035\131" +
    "\001\001\000\002\001\001\000\012\017\177\020\127\024" +
    "\125\035\131\001\001\000\004\071\164\001\001\000\004" +
    "\064\134\001\001\000\012\017\133\020\127\024\125\035" +
    "\131\001\001\000\002\001\001\000\004\021\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\140\035" +
    "\141\001\001\000\004\065\150\001\001\000\002\001\001" +
    "\000\004\027\144\001\001\000\004\035\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\153\001\001\000\042\003\154\004\025\007\020" +
    "\010\034\011\015\023\155\030\035\036\031\037\022\040" +
    "\030\041\023\042\026\051\024\055\016\057\021\062\017" +
    "\001\001\000\004\067\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\161\001\001" +
    "\000\016\022\162\034\163\036\031\037\022\040\030\041" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\170\035\141\001\001\000\004\072\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\174\001" +
    "\001\000\040\003\175\004\025\007\020\010\034\011\015" +
    "\030\035\036\031\037\022\040\030\041\023\042\026\051" +
    "\024\055\016\057\021\062\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\210\014\206\001\001\000\004\014\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\213\001\001\000\002\001\001\000" +
    "\004\016\223\001\001\000\004\016\216\001\001\000\002" +
    "\001\001\000\006\013\222\014\206\001\001\000\006\013" +
    "\221\014\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\225\001\001\000\002\001" +
    "\001\000\040\003\227\004\025\007\020\010\034\011\015" +
    "\030\035\036\031\037\022\040\030\041\023\042\026\051" +
    "\024\055\016\057\021\062\017\001\001\000\006\005\231" +
    "\006\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\235\001\001" +
    "\000\040\003\236\004\025\007\020\010\034\011\015\030" +
    "\035\036\031\037\022\040\030\041\023\042\026\051\024" +
    "\055\016\057\021\062\017\001\001\000\002\001\001\000" +
    "\006\013\240\014\206\001\001\000\002\001\001\000\004" +
    "\053\242\001\001\000\002\001\001\000\040\003\244\004" +
    "\025\007\020\010\034\011\015\030\035\036\031\037\022" +
    "\040\030\041\023\042\026\051\024\055\016\057\021\062" +
    "\017\001\001\000\006\005\245\006\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\255\001\001\000\002\001\001\000" +
    "\006\033\042\035\050\001\001\000\006\013\260\014\206" +
    "\001\001\000\004\060\261\001\001\000\002\001\001\000" +
    "\006\013\263\014\206\001\001\000\002\001\001\000\004" +
    "\061\265\001\001\000\040\003\266\004\025\007\020\010" +
    "\034\011\015\030\035\036\031\037\022\040\030\041\023" +
    "\042\026\051\024\055\016\057\021\062\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\275\001\001\000\004\012\276\001\001\000\002\001\001" +
    "\000\014\034\300\036\031\037\022\040\030\041\054\001" +
    "\001\000\002\001\001\000\040\003\302\004\025\007\020" +
    "\010\034\011\015\030\035\036\031\037\022\040\030\041" +
    "\023\042\026\051\024\055\016\057\021\062\017\001\001" +
    "\000\002\001\001\000\004\012\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\310" +
    "\014\206\001\001\000\002\001\001\000\004\056\312\001" +
    "\001\000\040\003\313\004\025\007\020\010\034\011\015" +
    "\030\035\036\031\037\022\040\030\041\023\042\026\051" +
    "\024\055\016\057\021\062\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public String arrayValue="";
        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right));
                        if(s.right>=0)
                                m.append(", columna "+(s.left));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.right)+", column "+cur_token.left);
                System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= FCALL EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		FunctionCall val = (FunctionCall)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = (FunctionCall)val; System.out.println("RESULT FCALL EXP: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              FunctionCall RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = new FunctionCall(call); System.out.println("Llamado a funcion: "+call); System.out.println("Result: "+RESULT.call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FCALL ::= id NT$2 parIzq FCALLARGS parDer 
            {
              FunctionCall RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FunctionCall) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIG ::= id opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= id TIPO BRKS opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= id BRKS opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BRKS ::= openBrk number NT$3 closeBrk 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BRKS ::= openBrk closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= NT$4 ifstart parIzq COND parDer NT$5 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSIF ::= elseif parIzq COND parDer NT$6 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= elseclause ifthen NT$7 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= NT$8 whilestart parIzq COND parDer NT$9 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= NT$10 forstart parIzq ASIG pcoma COND NT$11 pcoma COND parDer NT$12 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECT ::= NT$13 selectstart parIzq id parDer NT$14 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$15 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RETFUNC ::= TIPO NT$15 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$16 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETFUNC2 ::= id parIzq ARGS NT$16 parDer cbOpen NT$17 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bodyvalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyvalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String bodyval = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        if(!bodyval.equals("")){
                                if(bodyval.equals(val)){
                                        System.out.println("La funcion es recursiva");
                                }
                        } 
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$18 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 if(exp != null){ RESULT =((FunctionCall)exp).call+""; System.out.println(); }else{ RESULT = ""; }  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETFUNCBODY ::= EXP NT$18 ret NT$19 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$20 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VOIDFUNC ::= voidType NT$20 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$21 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VOIDFUNC2 ::= id parIzq ARGS NT$21 parDer cbOpen NT$22 EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARGS2 ::= coma TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              String RESULT =null;
RESULT = arrayValue;arrayValue="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= cbOpen ARRVAL NT$23 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$24 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARRVAL ::= S NT$24 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARRVAL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$25 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = ", " + val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRVAL2 ::= coma S NT$25 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
