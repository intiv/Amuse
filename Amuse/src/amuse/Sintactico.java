
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\042\002\000\002\043" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\002\000\002\044\002\000\002\037" +
    "\007\000\002\040\004\000\002\040\002\000\002\041\005" +
    "\000\002\041\002\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\002\000\002\030\006\000\002" +
    "\030\005\000\002\045\002\000\002\046\002\000\002\004" +
    "\014\000\002\047\002\000\002\005\012\000\002\005\003" +
    "\000\002\050\002\000\002\006\006\000\002\006\002\000" +
    "\002\051\002\000\002\052\002\000\002\007\012\000\002" +
    "\053\002\000\002\054\002\000\002\055\002\000\002\010" +
    "\017\000\002\056\002\000\002\057\002\000\002\011\012" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\013\003\000\002\014\005\000\002\014\005\000\002" +
    "\015\004\000\002\015\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\002\000\002\036\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\005\000\002\060\002\000\002\020\005\000\002\061" +
    "\002\000\002\062\002\000\002\021\013\000\002\063\002" +
    "\000\002\064\002\000\002\023\007\000\002\022\003\000" +
    "\002\065\002\000\002\024\005\000\002\066\002\000\002" +
    "\067\002\000\002\025\013\000\002\026\005\000\002\026" +
    "\002\000\002\027\006\000\002\027\002\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\026\003\000\004\000\014\000\017\000\024\000\040\000" +
    "\044\000\045\000\046\000\052\000\001\002\000\026\003" +
    "\034\004\uffe7\014\014\017\ufff4\024\033\040\015\044\uffde" +
    "\045\uffdb\046\uffd7\052\013\001\002\000\042\003\034\004" +
    "\uffe7\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017\ufff4" +
    "\020\ufff4\024\033\040\015\044\uffde\045\uffdb\046\uffd7\047" +
    "\ufff4\052\013\001\002\000\006\014\014\040\015\001\002" +
    "\000\062\003\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\024\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\001\002" +
    "\000\004\045\254\001\002\000\042\003\034\004\uffe7\006" +
    "\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017\ufff4\020\ufff4" +
    "\024\033\040\015\044\uffde\045\uffdb\046\uffd7\047\ufff4\052" +
    "\013\001\002\000\004\044\244\001\002\000\004\046\227" +
    "\001\002\000\042\003\034\004\uffe7\006\ufff4\007\ufff4\010" +
    "\ufff4\013\ufff4\014\014\017\ufff4\020\ufff4\024\033\040\015" +
    "\044\uffde\045\uffdb\046\uffd7\047\ufff4\052\013\001\002\000" +
    "\062\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024" +
    "\uffc6\034\uffc6\035\uffc6\036\072\037\071\040\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\001\002\000" +
    "\042\003\034\004\uffe7\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\014\014\017\ufff4\020\ufff4\024\033\040\015\044\uffde\045" +
    "\uffdb\046\uffd7\047\ufff4\052\013\001\002\000\004\004\156" +
    "\001\002\000\042\003\034\004\uffe7\006\ufff4\007\ufff4\010" +
    "\ufff4\013\ufff4\014\014\017\ufff4\020\ufff4\024\033\040\015" +
    "\044\uffde\045\uffdb\046\uffd7\047\ufff4\052\013\001\002\000" +
    "\042\003\034\004\uffe7\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\014\014\017\ufff4\020\ufff4\024\033\040\015\044\uffde\045" +
    "\uffdb\046\uffd7\047\ufff4\052\013\001\002\000\004\017\076" +
    "\001\002\000\062\003\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3" +
    "\001\002\000\056\003\uffc9\004\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\024\uffc9\034\067\035\066\040\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\001\002\000\014" +
    "\014\ufff3\033\044\041\043\042\045\043\046\001\002\000" +
    "\042\003\034\004\uffe7\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\014\014\017\ufff4\020\ufff4\024\033\040\015\044\uffde\045" +
    "\uffdb\046\uffd7\047\ufff4\052\013\001\002\000\042\003\034" +
    "\004\uffe7\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017" +
    "\ufff4\020\ufff4\024\033\040\015\044\uffde\045\uffdb\046\uffd7" +
    "\047\ufff4\052\013\001\002\000\042\003\034\004\uffe7\006" +
    "\ufff4\007\ufff4\010\ufff4\013\ufff4\014\014\017\ufff4\020\ufff4" +
    "\024\033\040\015\044\uffde\045\uffdb\046\uffd7\047\ufff4\052" +
    "\013\001\002\000\020\006\ufffb\007\ufffb\010\ufffb\013\ufffb" +
    "\017\ufffb\020\ufffb\047\ufffb\001\002\000\020\006\ufff8\007" +
    "\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\047\ufff8\001\002" +
    "\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017\ufffa\020" +
    "\ufffa\047\ufffa\001\002\000\004\014\056\001\002\000\006" +
    "\024\uffae\033\uffae\001\002\000\012\014\014\023\054\024" +
    "\051\040\015\001\002\000\006\024\uffad\033\uffad\001\002" +
    "\000\006\024\uffac\033\uffac\001\002\000\004\033\050\001" +
    "\002\000\012\014\014\023\054\024\051\040\015\001\002" +
    "\000\052\003\uffab\004\uffab\006\uffab\007\uffab\010\uffab\013" +
    "\uffab\014\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\024\uffab\040\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051" +
    "\uffab\052\uffab\001\002\000\052\003\uffa9\004\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\024\uffa9\040\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\051\uffa9\052\uffa9\001\002\000\044\003" +
    "\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\024\uffe9\040\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\052\uffe9\001\002\000\052\003\uffaa" +
    "\004\uffaa\006\uffaa\007\uffaa\010\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\040\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\001" +
    "\002\000\044\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\013\uffe8\014\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8\040" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8\001\002" +
    "\000\014\014\014\015\ufff0\023\054\024\051\040\015\001" +
    "\002\000\006\015\uffee\021\063\001\002\000\004\015\061" +
    "\001\002\000\042\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\013\ufff2\014\ufff2\017\ufff2\020\ufff2\024\ufff2\040\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\052\ufff2\001\002\000" +
    "\004\015\ufff1\001\002\000\012\014\014\023\054\024\051" +
    "\040\015\001\002\000\006\015\uffee\021\063\001\002\000" +
    "\004\015\uffef\001\002\000\006\014\014\040\015\001\002" +
    "\000\006\014\014\040\015\001\002\000\062\003\uffc8\004" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\034\uffc8\035" +
    "\uffc8\036\072\037\071\040\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\001\002\000\006\014\014\040" +
    "\015\001\002\000\006\014\014\040\015\001\002\000\062" +
    "\003\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\001\002\000\062" +
    "\003\uffc4\004\uffc4\006\uffc4\007\uffc4\010\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\001\002\000\062" +
    "\003\uffc7\004\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7" +
    "\034\uffc7\035\uffc7\036\072\037\071\040\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\001\002\000\016" +
    "\002\uffff\003\uffff\025\uffff\041\uffff\042\uffff\043\uffff\001" +
    "\002\000\016\002\uffea\003\105\025\103\041\043\042\045" +
    "\043\046\001\002\000\016\002\uffea\003\105\025\103\041" +
    "\043\042\045\043\046\001\002\000\004\002\ufffe\001\002" +
    "\000\016\002\uffea\003\105\025\103\041\043\042\045\043" +
    "\046\001\002\000\004\024\uffb7\001\002\000\004\024\uffc0" +
    "\001\002\000\016\002\uffea\003\105\025\103\041\043\042" +
    "\045\043\046\001\002\000\004\002\uffeb\001\002\000\004" +
    "\024\111\001\002\000\016\002\uffbf\003\uffbf\025\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\001\002\000\004\014\112\001\002" +
    "\000\012\015\uffb1\041\043\042\045\043\046\001\002\000" +
    "\004\015\uffbe\001\002\000\004\024\115\001\002\000\006" +
    "\015\uffaf\021\116\001\002\000\010\041\043\042\045\043" +
    "\046\001\002\000\004\015\uffb2\001\002\000\004\024\121" +
    "\001\002\000\006\015\uffaf\021\116\001\002\000\004\015" +
    "\uffb0\001\002\000\004\015\124\001\002\000\004\016\125" +
    "\001\002\000\026\003\uffbd\004\uffbd\014\uffbd\020\uffbd\024" +
    "\uffbd\040\uffbd\044\uffbd\045\uffbd\046\uffbd\052\uffbd\001\002" +
    "\000\026\003\034\004\uffe7\014\014\020\ufff4\024\033\040" +
    "\015\044\uffde\045\uffdb\046\uffd7\052\013\001\002\000\004" +
    "\020\uffbb\001\002\000\004\017\131\001\002\000\016\002" +
    "\uffbc\003\uffbc\025\uffbc\041\uffbc\042\uffbc\043\uffbc\001\002" +
    "\000\004\020\133\001\002\000\012\014\uffba\023\uffba\024" +
    "\uffba\040\uffba\001\002\000\012\014\014\023\054\024\051" +
    "\040\015\001\002\000\004\017\uffb9\001\002\000\004\017" +
    "\uffb8\001\002\000\004\024\141\001\002\000\016\002\uffb6" +
    "\003\uffb6\025\uffb6\041\uffb6\042\uffb6\043\uffb6\001\002\000" +
    "\004\014\142\001\002\000\012\015\uffb1\041\043\042\045" +
    "\043\046\001\002\000\004\015\uffb5\001\002\000\004\015" +
    "\145\001\002\000\004\016\146\001\002\000\026\003\uffb4" +
    "\004\uffb4\014\uffb4\017\uffb4\024\uffb4\040\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\052\uffb4\001\002\000\026\003\034\004\uffe7" +
    "\014\014\017\ufff4\024\033\040\015\044\uffde\045\uffdb\046" +
    "\uffd7\052\013\001\002\000\004\017\151\001\002\000\016" +
    "\002\uffb3\003\uffb3\025\uffb3\041\uffb3\042\uffb3\043\uffb3\001" +
    "\002\000\004\002\uffed\001\002\000\004\002\uffec\001\002" +
    "\000\020\006\ufff5\007\ufff5\010\ufff5\013\ufff5\017\ufff5\020" +
    "\ufff5\047\ufff5\001\002\000\020\006\ufffd\007\ufffd\010\ufffd" +
    "\013\ufffd\017\ufffd\020\ufffd\047\ufffd\001\002\000\004\014" +
    "\157\001\002\000\010\024\164\032\160\040\162\001\002" +
    "\000\006\024\164\040\162\001\002\000\006\015\uffd1\022" +
    "\uffd1\001\002\000\004\026\222\001\002\000\004\015\177" +
    "\001\002\000\004\026\165\001\002\000\006\024\170\040" +
    "\167\001\002\000\006\015\uffd0\022\uffd0\001\002\000\012" +
    "\015\uffca\022\uffca\030\173\031\172\001\002\000\012\015" +
    "\uffca\022\uffca\030\173\031\172\001\002\000\006\015\uffce" +
    "\022\uffce\001\002\000\010\024\164\032\160\040\162\001" +
    "\002\000\010\024\164\032\160\040\162\001\002\000\006" +
    "\015\uffcc\022\uffcc\001\002\000\006\015\uffcb\022\uffcb\001" +
    "\002\000\006\015\uffcd\022\uffcd\001\002\000\004\005\uffe6" +
    "\001\002\000\004\005\201\001\002\000\032\003\034\004" +
    "\uffe7\006\ufff4\007\ufff4\010\ufff4\014\014\024\033\040\015" +
    "\044\uffde\045\uffdb\046\uffd7\052\013\001\002\000\010\006" +
    "\204\007\206\010\uffdf\001\002\000\004\010\uffe2\001\002" +
    "\000\004\005\217\001\002\000\004\010\216\001\002\000" +
    "\004\014\207\001\002\000\010\024\164\032\160\040\162" +
    "\001\002\000\004\015\211\001\002\000\004\005\uffe4\001" +
    "\002\000\004\005\213\001\002\000\032\003\034\004\uffe7" +
    "\006\ufff4\007\ufff4\010\ufff4\014\014\024\033\040\015\044" +
    "\uffde\045\uffdb\046\uffd7\052\013\001\002\000\010\006\204" +
    "\007\206\010\uffdf\001\002\000\004\010\uffe3\001\002\000" +
    "\042\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5" +
    "\014\uffe5\017\uffe5\020\uffe5\024\uffe5\040\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\052\uffe5\001\002\000\026\003\uffe1" +
    "\004\uffe1\010\uffe1\014\uffe1\024\uffe1\040\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\052\uffe1\001\002\000\026\003\034\004\uffe7" +
    "\010\ufff4\014\014\024\033\040\015\044\uffde\045\uffdb\046" +
    "\uffd7\052\013\001\002\000\004\010\uffe0\001\002\000\006" +
    "\024\170\040\167\001\002\000\006\015\uffcf\022\uffcf\001" +
    "\002\000\006\015\uffd2\022\uffd2\001\002\000\020\006\ufff6" +
    "\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\047\ufff6\001" +
    "\002\000\020\006\ufffc\007\ufffc\010\ufffc\013\ufffc\017\ufffc" +
    "\020\ufffc\047\ufffc\001\002\000\004\014\230\001\002\000" +
    "\004\024\231\001\002\000\004\015\232\001\002\000\004" +
    "\050\uffd6\001\002\000\004\050\235\001\002\000\004\013" +
    "\243\001\002\000\012\014\014\023\054\024\051\040\015" +
    "\001\002\000\004\051\237\001\002\000\026\003\034\004" +
    "\uffe7\014\014\024\033\040\015\044\uffde\045\uffdb\046\uffd7" +
    "\047\ufff4\052\013\001\002\000\004\047\241\001\002\000" +
    "\006\013\uffd3\050\235\001\002\000\004\013\uffd4\001\002" +
    "\000\042\003\uffd5\004\uffd5\006\uffd5\007\uffd5\010\uffd5\013" +
    "\uffd5\014\uffd5\017\uffd5\020\uffd5\024\uffd5\040\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\052\uffd5\001\002\000\004\014" +
    "\245\001\002\000\010\024\164\032\160\040\162\001\002" +
    "\000\004\015\247\001\002\000\026\003\uffdd\004\uffdd\013" +
    "\uffdd\014\uffdd\024\uffdd\040\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\052\uffdd\001\002\000\026\003\034\004\uffe7\013\ufff4\014" +
    "\014\024\033\040\015\044\uffde\045\uffdb\046\uffd7\052\013" +
    "\001\002\000\004\013\252\001\002\000\042\003\uffdc\004" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\024\uffdc\040\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\052\uffdc\001\002\000\020\006\ufff7\007\ufff7\010\ufff7" +
    "\013\ufff7\017\ufff7\020\ufff7\047\ufff7\001\002\000\004\014" +
    "\255\001\002\000\004\024\257\001\002\000\004\022\260" +
    "\001\002\000\012\033\044\041\043\042\045\043\046\001" +
    "\002\000\010\024\164\032\160\040\162\001\002\000\004" +
    "\022\uffda\001\002\000\004\022\263\001\002\000\010\024" +
    "\164\032\160\040\162\001\002\000\004\015\265\001\002" +
    "\000\026\003\uffd9\004\uffd9\013\uffd9\014\uffd9\024\uffd9\040" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\052\uffd9\001\002\000\026" +
    "\003\034\004\uffe7\013\ufff4\014\014\024\033\040\015\044" +
    "\uffde\045\uffdb\046\uffd7\052\013\001\002\000\004\013\270" +
    "\001\002\000\042\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8\024\uffd8\040\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052\uffd8\001\002\000" +
    "\010\015\272\034\067\035\066\001\002\000\062\003\uffc1" +
    "\004\uffc1\006\uffc1\007\uffc1\010\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\051\uffc1\052\uffc1\001\002\000\020\006\ufff9" +
    "\007\ufff9\010\ufff9\013\ufff9\017\ufff9\020\ufff9\047\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\011\001\001\000\040\003\027\004" +
    "\025\007\021\010\034\011\016\030\035\033\031\034\022" +
    "\035\030\036\023\037\026\045\024\051\017\053\015\056" +
    "\020\001\001\000\040\003\272\004\025\007\021\010\034" +
    "\011\016\030\035\033\031\034\022\035\030\036\023\037" +
    "\026\045\024\051\017\053\015\056\020\001\001\000\010" +
    "\033\270\034\022\035\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\252\004\025\007\021\010\034" +
    "\011\016\030\035\033\031\034\022\035\030\036\023\037" +
    "\026\045\024\051\017\053\015\056\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\225\004\025\007" +
    "\021\010\034\011\016\030\035\033\031\034\022\035\030" +
    "\036\023\037\026\045\024\051\017\053\015\056\020\001" +
    "\001\000\002\001\001\000\040\003\224\004\025\007\021" +
    "\010\034\011\016\030\035\033\031\034\022\035\030\036" +
    "\023\037\026\045\024\051\017\053\015\056\020\001\001" +
    "\000\002\001\001\000\040\003\154\004\025\007\021\010" +
    "\034\011\016\030\035\033\031\034\022\035\030\036\023" +
    "\037\026\045\024\051\017\053\015\056\020\001\001\000" +
    "\040\003\153\004\025\007\021\010\034\011\016\030\035" +
    "\033\031\034\022\035\030\036\023\037\026\045\024\051" +
    "\017\053\015\056\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\046\044\041\001" +
    "\001\000\040\003\040\004\025\007\021\010\034\011\016" +
    "\030\035\033\031\034\022\035\030\036\023\037\026\045" +
    "\024\051\017\053\015\056\020\001\001\000\040\003\037" +
    "\004\025\007\021\010\034\011\016\030\035\033\031\034" +
    "\022\035\030\036\023\037\026\045\024\051\017\053\015" +
    "\056\020\001\001\000\040\003\036\004\025\007\021\010" +
    "\034\011\016\030\035\033\031\034\022\035\030\036\023" +
    "\037\026\045\024\051\017\053\015\056\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\054\033\031\034" +
    "\022\035\030\036\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\052\033\031\034" +
    "\022\035\030\036\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\056\033\031\034\022\035\030\036\051" +
    "\040\057\001\001\000\004\041\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\063" +
    "\033\031\034\022\035\030\036\051\001\001\000\004\041" +
    "\064\001\001\000\002\001\001\000\006\034\074\035\030" +
    "\001\001\000\006\034\067\035\030\001\001\000\002\001" +
    "\001\000\004\035\073\001\001\000\004\035\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\076\001\001\000\012\017\100\020\101\024\077" +
    "\032\103\001\001\000\012\017\152\020\101\024\077\032" +
    "\103\001\001\000\002\001\001\000\012\017\151\020\101" +
    "\024\077\032\103\001\001\000\004\065\136\001\001\000" +
    "\004\060\106\001\001\000\012\017\105\020\101\024\077" +
    "\032\103\001\001\000\002\001\001\000\004\021\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\112" +
    "\032\113\001\001\000\004\061\122\001\001\000\002\001" +
    "\001\000\004\027\116\001\001\000\004\032\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\125\001\001\000\042\003\126\004\025\007" +
    "\021\010\034\011\016\023\127\030\035\033\031\034\022" +
    "\035\030\036\023\037\026\045\024\051\017\053\015\056" +
    "\020\001\001\000\004\063\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\133\001" +
    "\001\000\016\022\134\031\135\033\031\034\022\035\030" +
    "\036\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\142\032\113\001\001\000\004\066\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\146" +
    "\001\001\000\040\003\147\004\025\007\021\010\034\011" +
    "\016\030\035\033\031\034\022\035\030\036\023\037\026" +
    "\045\024\051\017\053\015\056\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\162\014\160\001\001\000\004\014\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\165\001\001\000\002\001\001" +
    "\000\004\016\175\001\001\000\004\016\170\001\001\000" +
    "\002\001\001\000\006\013\174\014\160\001\001\000\006" +
    "\013\173\014\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\177\001\001\000\002" +
    "\001\001\000\040\003\201\004\025\007\021\010\034\011" +
    "\016\030\035\033\031\034\022\035\030\036\023\037\026" +
    "\045\024\051\017\053\015\056\020\001\001\000\006\005" +
    "\204\006\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\207\014" +
    "\160\001\001\000\002\001\001\000\004\047\211\001\001" +
    "\000\002\001\001\000\040\003\213\004\025\007\021\010" +
    "\034\011\016\030\035\033\031\034\022\035\030\036\023" +
    "\037\026\045\024\051\017\053\015\056\020\001\001\000" +
    "\006\005\214\006\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\217\001\001\000\040\003\220\004" +
    "\025\007\021\010\034\011\016\030\035\033\031\034\022" +
    "\035\030\036\023\037\026\045\024\051\017\053\015\056" +
    "\020\001\001\000\002\001\001\000\004\015\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\232\001\001\000\004\012\233\001" +
    "\001\000\002\001\001\000\014\031\235\033\031\034\022" +
    "\035\030\036\051\001\001\000\002\001\001\000\040\003" +
    "\237\004\025\007\021\010\034\011\016\030\035\033\031" +
    "\034\022\035\030\036\023\037\026\045\024\051\017\053" +
    "\015\056\020\001\001\000\002\001\001\000\004\012\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\245\014\160\001\001\000\002\001\001" +
    "\000\004\052\247\001\001\000\040\003\250\004\025\007" +
    "\021\010\034\011\016\030\035\033\031\034\022\035\030" +
    "\036\023\037\026\045\024\051\017\053\015\056\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\255\001\001\000\002\001" +
    "\001\000\004\032\046\001\001\000\006\013\260\014\160" +
    "\001\001\000\004\054\261\001\001\000\002\001\001\000" +
    "\006\013\263\014\160\001\001\000\002\001\001\000\004" +
    "\055\265\001\001\000\040\003\266\004\025\007\021\010" +
    "\034\011\016\030\035\033\031\034\022\035\030\036\023" +
    "\037\026\045\024\051\017\053\015\056\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.right));
                        if(s.right>=0)
                                m.append(", columna "+(s.left));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.right)+", column "+cur_token.left);
                System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= FCALL EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		FunctionCall val = (FunctionCall)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = (FunctionCall)val; System.out.println("RESULT FCALL EXP: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              FunctionCall RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = new FunctionCall(call); System.out.println("Llamado a funcion: "+call); System.out.println("Result: "+RESULT.call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FCALL ::= id NT$2 parIzq FCALLARGS parDer 
            {
              FunctionCall RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FunctionCall) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIG ::= id opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= NT$3 ifstart parIzq COND parDer NT$4 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSIF ::= elseif parIzq COND parDer NT$5 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= elseclause ifthen NT$6 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= NT$7 whilestart parIzq COND parDer NT$8 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= NT$9 forstart parIzq ASIG pcoma COND NT$10 pcoma COND parDer NT$11 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SELECT ::= NT$12 selectstart parIzq id parDer NT$13 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETFUNC ::= TIPO NT$14 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$15 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETFUNC2 ::= id parIzq ARGS NT$15 parDer cbOpen NT$16 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bodyvalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyvalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String bodyval = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        if(!bodyval.equals("")){
                                if(bodyval.equals(val)){
                                        System.out.println("La funcion es recursiva");
                                }
                        } 
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$17 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 if(exp != null){ RESULT =((FunctionCall)exp).call+""; System.out.println(); }else{ RESULT = ""; }  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$18 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETFUNCBODY ::= EXP NT$17 ret NT$18 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$19 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VOIDFUNC ::= voidType NT$19 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$20 ::= 
            {
              Object RESULT =null;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VOIDFUNC2 ::= id parIzq ARGS NT$20 parDer cbOpen NT$21 EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("FIN FUNCTION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARGS2 ::= coma TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
