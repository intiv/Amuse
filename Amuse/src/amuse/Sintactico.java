
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\057\002\000\002\003" +
    "\013\000\002\060\002\000\002\002\006\000\002\002\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\053\004" +
    "\000\002\054\005\000\002\054\005\000\002\054\002\000" +
    "\002\055\004\000\002\055\002\000\002\056\005\000\002" +
    "\056\002\000\002\026\004\000\002\026\004\000\002\026" +
    "\002\000\002\061\002\000\002\023\011\000\002\062\002" +
    "\000\002\023\011\000\002\023\002\000\002\024\004\000" +
    "\002\024\002\000\002\025\005\000\002\025\002\000\002" +
    "\043\005\000\002\042\006\000\002\035\006\000\002\041" +
    "\005\000\002\041\002\000\002\007\017\000\002\010\014" +
    "\000\002\010\002\000\002\011\005\000\002\011\002\000" +
    "\002\012\013\000\002\015\006\000\002\013\021\000\002" +
    "\014\004\000\002\063\002\000\002\016\011\000\002\064" +
    "\002\000\002\017\014\000\002\020\003\000\002\020\002" +
    "\000\002\065\002\000\002\021\007\000\002\066\002\000" +
    "\002\021\006\000\002\067\002\000\002\021\007\000\002" +
    "\070\002\000\002\021\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\002\000\002\006\002\000\002\005\002" +
    "\000\002\052\003\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\047\003\000\002\047\005\000\002\047" +
    "\003\000\002\071\002\000\002\072\002\000\002\027\014" +
    "\000\002\073\002\000\002\074\002\000\002\032\014\000" +
    "\002\033\005\000\002\033\002\000\002\034\006\000\002" +
    "\034\002\000\002\045\005\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\037\004\000\002" +
    "\037\002\000\002\040\004\000\002\040\004\000\002\040" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\014\011\uffe0\026\012\027\007\042\004\043" +
    "\005\001\002\000\050\003\uffa5\004\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\012\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\022" +
    "\uffa5\025\uffa5\034\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\055\uffa5\001\002\000\050\003\uffa4\004\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\012\uffa4\014\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\022\uffa4\025\uffa4\034\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\055\uffa4\001\002\000\004\011\037" +
    "\001\002\000\050\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3" +
    "\025\uffa3\034\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\055\uffa3\001\002\000\006\022\021\025\031\001\002" +
    "\000\004\002\030\001\002\000\004\025\013\001\002\000" +
    "\004\013\014\001\002\000\012\014\uffde\027\007\042\004" +
    "\043\005\001\002\000\004\014\025\001\002\000\010\014" +
    "\uffdc\020\020\022\021\001\002\000\004\014\uffdf\001\002" +
    "\000\010\027\007\042\004\043\005\001\002\000\004\023" +
    "\022\001\002\000\050\003\uffa6\004\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\012\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\022" +
    "\uffa6\025\uffa6\034\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\001\002\000\010\014\uffdc\020\020\022" +
    "\021\001\002\000\004\014\uffdd\001\002\000\014\011\uffe2" +
    "\026\uffe2\027\uffe2\042\uffe2\043\uffe2\001\002\000\014\011" +
    "\uffe0\026\012\027\007\042\004\043\005\001\002\000\004" +
    "\011\uffe1\001\002\000\004\002\001\001\002\000\004\013" +
    "\032\001\002\000\012\014\uffde\027\007\042\004\043\005" +
    "\001\002\000\004\014\034\001\002\000\014\011\uffe4\026" +
    "\uffe4\027\uffe4\042\uffe4\043\uffe4\001\002\000\014\011\uffe0" +
    "\026\012\027\007\042\004\043\005\001\002\000\004\011" +
    "\uffe3\001\002\000\004\013\040\001\002\000\004\014\041" +
    "\001\002\000\004\015\042\001\002\000\024\003\000\004" +
    "\000\017\000\025\000\045\000\046\000\050\000\051\000" +
    "\055\000\001\002\000\024\003\062\004\054\017\067\025" +
    "\061\045\063\046\056\050\060\051\050\055\044\001\002" +
    "\000\040\003\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\016\ufff7\017\ufff7\025\ufff7\045\ufff7\046\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\055\ufff7\001\002\000\040\003\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\016\ufff6\017\ufff6" +
    "\025\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\055" +
    "\ufff6\001\002\000\040\003\ufff3\004\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\016\ufff3\017\ufff3\025\ufff3\045\ufff3\046" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\001\002\000\040" +
    "\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\016" +
    "\ufff9\017\ufff9\025\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\055\ufff9\001\002\000\004\013\353\001\002\000" +
    "\040\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa" +
    "\016\ufffa\017\ufffa\025\ufffa\045\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\055\ufffa\001\002\000\040\003\ufff1\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\012\ufff1\016\ufff1\017\ufff1\025" +
    "\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\055\ufff1" +
    "\001\002\000\040\003\uffbc\004\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\012\uffbc\016\uffbc\017\uffbc\025\uffbc\045\uffbc\046\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\055\uffbc\001\002\000\004\013" +
    "\317\001\002\000\040\003\ufff5\004\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\012\ufff5\016\ufff5\017\ufff5\025\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002\000\004" +
    "\013\275\001\002\000\004\016\234\001\002\000\004\013" +
    "\231\001\002\000\054\003\uffec\004\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\013\140\016\uffec\017\uffec\022\214\025" +
    "\uffec\027\007\034\uffd7\042\004\043\005\045\uffec\046\uffec" +
    "\050\uffec\051\uffec\052\uffec\055\uffec\001\002\000\040\003" +
    "\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\016\ufffb" +
    "\017\ufffb\025\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\055\ufffb\001\002\000\004\013\uffbc\001\002\000\040" +
    "\003\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\016" +
    "\ufff4\017\ufff4\025\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\055\ufff4\001\002\000\040\003\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\016\ufff8\017\ufff8\025\ufff8" +
    "\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8\001" +
    "\002\000\040\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\016\ufff2\017\ufff2\025\ufff2\045\ufff2\046\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000\016\013\077" +
    "\015\101\024\102\025\071\041\073\044\100\001\002\000" +
    "\066\003\uffb1\004\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1" +
    "\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055" +
    "\uffb1\001\002\000\072\003\uffec\004\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\013\140\014\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\142\025\uffec\030\uffec\031\uffec\032\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\045\uffec\046\uffec\050" +
    "\uffec\051\uffec\052\uffec\054\uffec\055\uffec\001\002\000\056" +
    "\003\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\012\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\025\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\054\uff9f\055\uff9f\001\002\000\066\003\uffb3\004\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\025\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\045\uffb3\046\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\001\002\000\066" +
    "\003\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\014" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\035\uffb7\036\uffb7\037\111\040\110\045" +
    "\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7" +
    "\001\002\000\056\003\uffa0\004\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\012\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\025\uffa0\030\uffa0\031\uffa0\032\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\001\002\000\040" +
    "\003\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\016" +
    "\ufff0\017\ufff0\025\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\055\ufff0\001\002\000\010\013\077\025\071\041" +
    "\073\001\002\000\056\003\uffa1\004\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\025\uffa1\030\uffa1\031\uffa1\032\uffa1\045\uffa1\046\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\001\002\000" +
    "\014\013\077\024\117\025\071\041\073\044\116\001\002" +
    "\000\054\003\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\012" +
    "\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\025\uffa2" +
    "\031\uffa2\032\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\054\uffa2\055\uffa2\001\002\000\066\003\uffb4\004\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\012\uffb4\014\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\045\uffb4\046\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\001\002\000\062" +
    "\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba\012\uffba\014" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\025\uffba\030\uffba" +
    "\031\uffba\032\uffba\035\106\036\105\045\uffba\046\uffba\050" +
    "\uffba\051\uffba\052\uffba\054\uffba\055\uffba\001\002\000\010" +
    "\013\077\025\071\041\073\001\002\000\010\013\077\025" +
    "\071\041\073\001\002\000\066\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\012\uffb9\014\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9\035\uffb9" +
    "\036\uffb9\037\111\040\110\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\054\uffb9\055\uffb9\001\002\000\010\013\077" +
    "\025\071\041\073\001\002\000\010\013\077\025\071\041" +
    "\073\001\002\000\066\003\uffb6\004\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\012\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\025\uffb6\030\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\055\uffb6\001\002\000\066\003\uffb5\004\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\012\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\045\uffb5\046\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\001\002\000\066" +
    "\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\035\uffb8\036\uffb8\037\111\040\110\045" +
    "\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8" +
    "\001\002\000\006\016\uff9a\020\121\001\002\000\006\016" +
    "\uff9a\020\121\001\002\000\006\016\uff9a\020\121\001\002" +
    "\000\004\016\131\001\002\000\014\013\077\024\125\025" +
    "\071\041\073\044\124\001\002\000\004\016\uff9b\001\002" +
    "\000\006\016\uff9a\020\121\001\002\000\006\016\uff9a\020" +
    "\121\001\002\000\006\016\uff9a\020\121\001\002\000\004" +
    "\016\uff98\001\002\000\004\016\uff97\001\002\000\004\016" +
    "\uff99\001\002\000\056\003\uff9d\004\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\012\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\025\uff9d\030\uff9d\031\uff9d\032\uff9d\045\uff9d\046\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\001\002\000" +
    "\004\016\133\001\002\000\056\003\uff9c\004\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\012\uff9c\014\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\025\uff9c\030\uff9c\031\uff9c\032\uff9c\045\uff9c" +
    "\046\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c\001" +
    "\002\000\004\016\135\001\002\000\056\003\uff9e\004\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\012\uff9e\014\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\025\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\054\uff9e\055" +
    "\uff9e\001\002\000\010\014\137\035\106\036\105\001\002" +
    "\000\066\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\012" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\054\uffb2" +
    "\055\uffb2\001\002\000\020\013\077\014\uffea\015\101\024" +
    "\102\025\071\041\073\044\100\001\002\000\066\003\uffef" +
    "\004\uffef\006\uffef\007\uffef\010\uffef\012\uffef\014\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\025\uffef\030\uffef\031\uffef" +
    "\032\uffef\035\uffef\036\uffef\037\uffef\040\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\052\uffef\054\uffef\055\uffef\001\002" +
    "\000\004\041\143\001\002\000\004\023\144\001\002\000" +
    "\066\003\uffee\004\uffee\006\uffee\007\uffee\010\uffee\012\uffee" +
    "\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\025\uffee\030" +
    "\uffee\031\uffee\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\054\uffee\055" +
    "\uffee\001\002\000\006\014\uffe8\020\151\001\002\000\004" +
    "\014\147\001\002\000\066\003\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\012\uffed\014\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\025\uffed\030\uffed\031\uffed\032\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\045\uffed\046\uffed\050\uffed\051\uffed" +
    "\052\uffed\054\uffed\055\uffed\001\002\000\004\014\uffeb\001" +
    "\002\000\016\013\077\015\101\024\102\025\071\041\073" +
    "\044\100\001\002\000\006\014\uffe8\020\151\001\002\000" +
    "\004\014\uffe9\001\002\000\004\013\155\001\002\000\020" +
    "\013\161\015\101\024\162\025\071\033\156\041\073\044" +
    "\100\001\002\000\020\013\161\015\101\024\162\025\071" +
    "\033\156\041\073\044\100\001\002\000\004\014\204\001" +
    "\002\000\004\030\200\001\002\000\020\013\161\015\101" +
    "\024\162\025\071\033\156\041\073\044\100\001\002\000" +
    "\014\014\uffc1\021\uffc1\030\uffa2\031\uffc1\032\uffc1\001\002" +
    "\000\012\014\uffbd\021\uffbd\031\166\032\164\001\002\000" +
    "\020\013\uffbc\015\uffbc\024\uffbc\025\uffbc\033\uffbc\041\uffbc" +
    "\044\uffbc\001\002\000\012\014\uffc0\021\uffc0\031\uffc0\032" +
    "\uffc0\001\002\000\020\013\uffbc\015\uffbc\024\uffbc\025\uffbc" +
    "\033\uffbc\041\uffbc\044\uffbc\001\002\000\020\013\161\015" +
    "\101\024\162\025\071\033\156\041\073\044\100\001\002" +
    "\000\012\014\uffbf\021\uffbf\031\uffbf\032\uffbf\001\002\000" +
    "\020\013\161\015\101\024\162\025\071\033\156\041\073" +
    "\044\100\001\002\000\012\014\uffbe\021\uffbe\031\uffbe\032" +
    "\uffbe\001\002\000\004\014\175\001\002\000\012\014\137" +
    "\030\uffba\035\106\036\105\001\002\000\012\014\uffc7\021" +
    "\uffc7\031\uffc7\032\uffc7\001\002\000\012\014\uffbd\021\uffbd" +
    "\031\166\032\164\001\002\000\012\014\uffc6\021\uffc6\031" +
    "\uffc6\032\uffc6\001\002\000\016\013\077\015\101\024\102" +
    "\025\071\041\073\044\100\001\002\000\012\014\uffc3\021" +
    "\uffc3\031\uffc3\032\uffc3\001\002\000\012\014\uffbd\021\uffbd" +
    "\031\166\032\164\001\002\000\012\014\uffc2\021\uffc2\031" +
    "\uffc2\032\uffc2\001\002\000\024\003\uffbc\004\uffbc\017\uffbc" +
    "\025\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\055\uffbc\001" +
    "\002\000\024\003\062\004\054\017\067\025\061\045\063" +
    "\046\056\050\060\051\050\055\044\001\002\000\004\012" +
    "\uffbb\001\002\000\004\012\210\001\002\000\040\003\uffd1" +
    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\016\uffd1\017" +
    "\uffd1\025\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\055\uffd1\001\002\000\012\014\uffc5\021\uffc5\031\uffc5\032" +
    "\uffc5\001\002\000\012\014\uffbd\021\uffbd\031\166\032\164" +
    "\001\002\000\012\014\uffc4\021\uffc4\031\uffc4\032\uffc4\001" +
    "\002\000\004\041\227\001\002\000\004\034\225\001\002" +
    "\000\044\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\016\uffd7\017\uffd7\022\221\025\uffd7\034\217\045\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\001\002\000" +
    "\016\013\077\015\101\024\102\025\071\041\073\044\100" +
    "\001\002\000\040\003\uffdb\004\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\016\uffdb\017\uffdb\025\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\055\uffdb\001\002\000\006\023" +
    "\022\041\222\001\002\000\004\023\223\001\002\000\040" +
    "\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\016" +
    "\uffd8\017\uffd8\025\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\055\uffd8\001\002\000\042\003\uffda\004\uffda\006" +
    "\uffda\007\uffda\010\uffda\012\uffda\016\uffda\017\uffda\021\uffda" +
    "\025\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda\055" +
    "\uffda\001\002\000\016\013\077\015\101\024\102\025\071" +
    "\041\073\044\100\001\002\000\040\003\uffd9\004\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\016\uffd9\017\uffd9\025\uffd9" +
    "\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9\001" +
    "\002\000\004\023\230\001\002\000\042\003\uffee\004\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\016\uffee\017\uffee\025" +
    "\uffee\034\uffd8\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee" +
    "\055\uffee\001\002\000\016\013\077\015\101\024\102\025" +
    "\071\041\073\044\100\001\002\000\004\014\233\001\002" +
    "\000\040\003\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012" +
    "\uffd0\016\uffd0\017\uffd0\025\uffd0\045\uffd0\046\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\055\uffd0\001\002\000\014\002\uffe5\026" +
    "\241\027\007\042\004\043\005\001\002\000\004\002\uffff" +
    "\001\002\000\014\002\uffe5\026\241\027\007\042\004\043" +
    "\005\001\002\000\006\022\021\025\263\001\002\000\014" +
    "\002\uffe5\026\241\027\007\042\004\043\005\001\002\000" +
    "\004\025\242\001\002\000\004\013\uffad\001\002\000\004" +
    "\013\244\001\002\000\012\014\uffa9\027\007\042\004\043" +
    "\005\001\002\000\004\014\uffac\001\002\000\006\022\021" +
    "\025\247\001\002\000\006\014\uffa7\020\250\001\002\000" +
    "\010\027\007\042\004\043\005\001\002\000\004\014\uffaa" +
    "\001\002\000\006\022\021\025\253\001\002\000\006\014" +
    "\uffa7\020\250\001\002\000\004\014\uffa8\001\002\000\004" +
    "\014\256\001\002\000\004\015\257\001\002\000\024\003" +
    "\062\004\054\017\067\025\061\045\063\046\056\050\060" +
    "\051\050\055\044\001\002\000\004\016\261\001\002\000" +
    "\014\002\uffab\026\uffab\027\uffab\042\uffab\043\uffab\001\002" +
    "\000\004\002\uffe6\001\002\000\004\013\uffb0\001\002\000" +
    "\004\013\265\001\002\000\012\014\uffa9\027\007\042\004" +
    "\043\005\001\002\000\004\014\uffaf\001\002\000\004\014" +
    "\270\001\002\000\004\015\271\001\002\000\024\003\062" +
    "\004\054\017\067\025\061\045\063\046\056\050\060\051" +
    "\050\055\044\001\002\000\004\016\273\001\002\000\014" +
    "\002\uffae\026\uffae\027\uffae\042\uffae\043\uffae\001\002\000" +
    "\004\002\uffe7\001\002\000\004\025\277\001\002\000\004" +
    "\021\301\001\002\000\010\027\007\042\004\043\005\001" +
    "\002\000\006\022\021\034\217\001\002\000\020\013\uffbc" +
    "\015\uffbc\024\uffbc\025\uffbc\033\uffbc\041\uffbc\044\uffbc\001" +
    "\002\000\020\013\161\015\101\024\162\025\071\033\156" +
    "\041\073\044\100\001\002\000\004\021\304\001\002\000" +
    "\004\025\uffbc\001\002\000\004\025\307\001\002\000\004" +
    "\014\uffbb\001\002\000\004\047\310\001\002\000\004\014" +
    "\uffce\001\002\000\004\014\312\001\002\000\024\003\uffbc" +
    "\004\uffbc\017\uffbc\025\uffbc\045\uffbc\046\uffbc\050\uffbc\051" +
    "\uffbc\055\uffbc\001\002\000\024\003\062\004\054\017\067" +
    "\025\061\045\063\046\056\050\060\051\050\055\044\001" +
    "\002\000\004\012\uffbb\001\002\000\004\012\316\001\002" +
    "\000\040\003\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\012" +
    "\uffcf\016\uffcf\017\uffcf\025\uffcf\045\uffcf\046\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\055\uffcf\001\002\000\020\013\161\015" +
    "\101\024\162\025\071\033\156\041\073\044\100\001\002" +
    "\000\004\014\321\001\002\000\004\005\322\001\002\000" +
    "\024\003\uffbc\004\uffbc\017\uffbc\025\uffbc\045\uffbc\046\uffbc" +
    "\050\uffbc\051\uffbc\055\uffbc\001\002\000\024\003\062\004" +
    "\054\017\067\025\061\045\063\046\056\050\060\051\050" +
    "\055\044\001\002\000\010\006\uffbb\007\uffbb\010\uffbb\001" +
    "\002\000\010\006\uffbc\007\uffbc\010\uffbc\001\002\000\010" +
    "\006\uffd4\007\327\010\uffd4\001\002\000\004\013\337\001" +
    "\002\000\006\006\uffbc\010\uffbc\001\002\000\006\006\333" +
    "\010\uffd2\001\002\000\004\010\336\001\002\000\004\005" +
    "\334\001\002\000\024\003\062\004\054\017\067\025\061" +
    "\045\063\046\056\050\060\051\050\055\044\001\002\000" +
    "\004\010\uffd3\001\002\000\040\003\uffd6\004\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\012\uffd6\016\uffd6\017\uffd6\025\uffd6\045" +
    "\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\055\uffd6\001\002" +
    "\000\020\013\161\015\101\024\162\025\071\033\156\041" +
    "\073\044\100\001\002\000\004\014\341\001\002\000\004" +
    "\005\342\001\002\000\024\003\uffbc\004\uffbc\017\uffbc\025" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\055\uffbc\001\002" +
    "\000\024\003\062\004\054\017\067\025\061\045\063\046" +
    "\056\050\060\051\050\055\044\001\002\000\010\006\uffbb" +
    "\007\uffbb\010\uffbb\001\002\000\010\006\uffbc\007\uffbc\010" +
    "\uffbc\001\002\000\010\006\uffd4\007\327\010\uffd4\001\002" +
    "\000\006\006\uffd5\010\uffd5\001\002\000\040\003\ufffe\004" +
    "\ufffe\006\ufffc\007\ufffc\010\ufffc\012\ufffc\016\ufffc\017\ufffe" +
    "\025\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffc\055" +
    "\ufffe\001\002\000\024\003\062\004\054\017\067\025\061" +
    "\045\063\046\056\050\060\051\050\055\044\001\002\000" +
    "\016\006\ufffd\007\ufffd\010\ufffd\012\ufffd\016\ufffd\052\ufffd" +
    "\001\002\000\004\025\354\001\002\000\004\014\355\001" +
    "\002\000\004\053\357\001\002\000\004\012\uffcd\001\002" +
    "\000\016\013\077\015\101\024\102\025\071\041\073\044" +
    "\100\001\002\000\004\054\361\001\002\000\024\003\uffbc" +
    "\004\uffbc\017\uffbc\025\uffbc\045\uffbc\046\uffbc\050\uffbc\051" +
    "\uffbc\055\uffbc\001\002\000\024\003\uffcb\004\uffcb\017\uffcb" +
    "\025\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\055\uffcb\001" +
    "\002\000\024\003\062\004\054\017\067\025\061\045\063" +
    "\046\056\050\060\051\050\055\044\001\002\000\004\052" +
    "\365\001\002\000\006\012\uffbb\053\uffbb\001\002\000\006" +
    "\012\uffbc\053\uffbc\001\002\000\006\012\uffc8\053\357\001" +
    "\002\000\004\012\uffca\001\002\000\004\012\uffc9\001\002" +
    "\000\004\012\373\001\002\000\040\003\uffcc\004\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\012\uffcc\016\uffcc\017\uffcc\025\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\010\003\010\023\005\045\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\014\045\015\001\001" +
    "\000\002\001\001\000\004\025\016\001\001\000\002\001" +
    "\001\000\004\045\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\023\001\001\000\002\001\001\000" +
    "\004\062\025\001\001\000\006\023\026\045\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\032\045\015\001\001\000\002\001\001\000\004" +
    "\061\034\001\001\000\006\023\035\045\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\042\001\001\000\030\002\056\004" +
    "\052\007\050\012\046\013\063\015\051\016\045\035\064" +
    "\042\044\043\054\053\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\214\045\215\054\140\001\001\000\002\001\001\000\004" +
    "\006\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\044\071\046\075\047\102\050\103" +
    "\051\073\052\074\053\067\001\001\000\002\001\001\000" +
    "\004\054\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\102\050\135\051\073\053\067\001\001\000\002" +
    "\001\001\000\014\047\102\050\103\051\073\052\114\053" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\102\051\113\053\067\001\001\000" +
    "\010\047\102\051\106\053\067\001\001\000\002\001\001" +
    "\000\006\047\112\053\067\001\001\000\006\047\111\053" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\133\001\001\000\004\037\131\001" +
    "\001\000\004\037\117\001\001\000\002\001\001\000\016" +
    "\040\121\047\102\050\103\051\073\052\122\053\067\001" +
    "\001\000\002\001\001\000\004\037\127\001\001\000\004" +
    "\037\126\001\001\000\004\037\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\044\071\046\144\047\102\050\103\051\073\052\074\053" +
    "\067\055\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\044\071\046\151\047\102\050\103\051\073\052" +
    "\074\053\067\001\001\000\004\056\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\156\044\071\046" +
    "\157\047\102\050\103\051\073\052\074\053\067\001\001" +
    "\000\022\021\210\044\071\046\157\047\102\050\103\051" +
    "\073\052\074\053\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\172\044\071\046\157\047\102\050" +
    "\173\051\073\052\074\053\067\001\001\000\004\070\162" +
    "\001\001\000\004\022\164\001\001\000\004\006\170\001" +
    "\001\000\002\001\001\000\004\006\166\001\001\000\022" +
    "\021\167\044\071\046\157\047\102\050\103\051\073\052" +
    "\074\053\067\001\001\000\002\001\001\000\022\021\171" +
    "\044\071\046\157\047\102\050\103\051\073\052\074\053" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\175\001\001\000\004\022\176\001" +
    "\001\000\002\001\001\000\020\044\071\046\200\047\102" +
    "\050\103\051\073\052\074\053\067\001\001\000\004\067" +
    "\201\001\001\000\004\022\202\001\001\000\002\001\001" +
    "\000\004\006\204\001\001\000\030\002\205\004\052\007" +
    "\050\012\046\013\063\015\051\016\045\035\064\042\044" +
    "\043\054\053\065\001\001\000\004\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\211\001\001" +
    "\000\004\022\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\217\001\001\000\020" +
    "\044\071\046\223\047\102\050\103\051\073\052\074\053" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\044" +
    "\071\046\225\047\102\050\103\051\073\052\074\053\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\071\046\231\047\102\050\103\051\073" +
    "\052\074\053\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\234\027\235\032\237\045\236\001\001" +
    "\000\002\001\001\000\012\026\273\027\235\032\237\045" +
    "\236\001\001\000\002\001\001\000\012\026\261\027\235" +
    "\032\237\045\236\001\001\000\002\001\001\000\004\073" +
    "\242\001\001\000\002\001\001\000\006\033\244\045\245" +
    "\001\001\000\004\074\254\001\001\000\002\001\001\000" +
    "\004\034\250\001\001\000\004\045\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\257\004\052\007\050\012\046\013\063\015\051\016" +
    "\045\035\064\042\044\043\054\053\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\263\001\001\000\002\001\001\000\006\033\265\045\245" +
    "\001\001\000\004\072\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\271\004\052\007\050\012\046" +
    "\013\063\015\051\016\045\035\064\042\044\043\054\053" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\275\001\001\000\002\001\001\000" +
    "\004\045\277\001\001\000\002\001\001\000\004\006\301" +
    "\001\001\000\022\021\302\044\071\046\157\047\102\050" +
    "\103\051\073\052\074\053\067\001\001\000\002\001\001" +
    "\000\004\006\304\001\001\000\004\014\305\001\001\000" +
    "\004\005\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\312\001\001\000\030\002" +
    "\313\004\052\007\050\012\046\013\063\015\051\016\045" +
    "\035\064\042\044\043\054\053\065\001\001\000\004\005" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\317\044\071\046\157\047\102\050\103\051\073\052" +
    "\074\053\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\322\001\001\000\030\002\323\004\052\007" +
    "\050\012\046\013\063\015\051\016\045\035\064\042\044" +
    "\043\054\053\065\001\001\000\004\005\324\001\001\000" +
    "\004\006\325\001\001\000\004\010\327\001\001\000\002" +
    "\001\001\000\004\006\330\001\001\000\004\011\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\334" +
    "\004\052\007\050\012\046\013\063\015\051\016\045\035" +
    "\064\042\044\043\054\053\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\337\044\071\046\157\047" +
    "\102\050\103\051\073\052\074\053\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\342\001\001\000" +
    "\030\002\343\004\052\007\050\012\046\013\063\015\051" +
    "\016\045\035\064\042\044\043\054\053\065\001\001\000" +
    "\004\005\344\001\001\000\004\006\345\001\001\000\004" +
    "\010\346\001\001\000\002\001\001\000\004\060\350\001" +
    "\001\000\030\002\351\004\052\007\050\012\046\013\063" +
    "\015\051\016\045\035\064\042\044\043\054\053\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\355\001\001\000\004\063\371\001\001\000" +
    "\020\044\071\046\357\047\102\050\103\051\073\052\074" +
    "\053\067\001\001\000\002\001\001\000\004\006\361\001" +
    "\001\000\004\064\362\001\001\000\030\002\363\004\052" +
    "\007\050\012\046\013\063\015\051\016\045\035\064\042" +
    "\044\043\054\053\065\001\001\000\002\001\001\000\004" +
    "\005\365\001\001\000\004\006\366\001\001\000\006\017" +
    "\370\020\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";
        public int hayErrores = 0;
        public int contadorNodo = 0;
        public static Nodo padre;
        public TablaSimbolos tabla = new TablaSimbolos();
        public ArrayList<Array> arreglos = new ArrayList();
        public int contadorFunciones = 0;
        public ArrayList<Cuadruplo> cuadruplos = new ArrayList();
        public int contadorTemporales=0;
        public String currAmbito = "";
        public boolean hasReturn = false;

        public void gen(String op, String arg1, String arg2, String res){
                cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
        }

        public void gen(String op, String res){
                cuadruplos.add(new Cuadruplo(op, res));
        }

        public void printCuadruplos(){
                System.out.println("CUADRUPLOS:");
                for(int i = 0; i < cuadruplos.size(); i++){
                        System.out.println(i+" - "+cuadruplos.get(i).toString());
                }
        }

        public ArrayList<Integer> fusiona (ArrayList<Integer> l1, ArrayList<Integer> l2){
                ArrayList<Integer> retVal = new ArrayList();
                retVal.addAll(l1);
                for(Integer i : l2){
                        if(!retVal.contains(i)){
                                retVal.add(i);
                        }

                }
                return retVal; 
        }

        public void completa(ArrayList<Integer> lista, int cuad){
                for(Integer i: lista){
                        cuadruplos.get(i.intValue()).setResult(cuad+"");
                }
        }

        public void completaArg1(ArrayList<Integer> lista, String id){
                for(Integer i: lista){
                        cuadruplos.get(i.intValue()).setArg1(id+"");
                }
        }

        public String nuevoTemp(){
                String tempRet = "t"+contadorTemporales;
                contadorTemporales++;
                return tempRet;
        }

        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                hayErrores = 1;
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                hayErrores = 1;
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                hayErrores = 1;
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
                hayErrores = 1;
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}

        public String operationValidation(Value e){
                int p = e.tipo.indexOf("->");
                boolean errores= false;
                if(p>=0){
                        if(functionType(e, p).equals("num")){
                                return 0+"";
                        }
                }else{
                        if(e.tipo.equals("num")){
                                return e.val; 
                        }                                                     
                }
                return "error";
        }

        public String functionType(Value e, int indexReturn){
                if((e.tipo.substring(indexReturn+2).equals("num"))){
                        return "num";
                }else{
                        return "error";
                }
        }

        public boolean isID(Value value){
                if(value.val.length() == 3 && value.val.charAt(0) == '\'' && value.val.charAt(2) == '\''){
                        return false;
                }else if(value.val.matches("\\d+")){
                        return false;
                }else if(value.val.equals("true") || value.val.equals("false")){
                        return false;
                }

                return true;
        }

        public void printError(int linea, int columna, String val1, String val2, String tipo){
                switch (tipo) {
                        case "DetailVariable":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t"+val2+" "+val1);
                                break;
                        case "notfound":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Variable no declarada asignada a "+val1);
                                break;
                        case "out of bounds":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Indice "+val2+" fuera de alcance del arreglo");
                                break;
                        case "incompatible":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Asignacion de variable "+val1+" con operacion aritmetica con tipos incompatibles");
                                break;
                        case "tipos":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Asignacion de "+val1+" a variable de tipo "+val2);
                                break;
                        case "notDeclared":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t La variable "+val1+" no ha sido declarada");
                                break;
                        case "declared":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t La variable "+val1+" ya fue declarada");
                                break;
                        case "blankCall":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Expresion incompleta");
                                break;
                        case "notInitialized":
                                System.err.println("Error en linea "+linea+", columna "+columna+":\t Uso de variable no inicializada");
                                break;
                        default:
                                System.err.println("Error en linea "+linea+", columna "+columna); 
                                break;
                }
        }


        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion start_val = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Expresion RESULT =null;
 System.out.println("Inicio main"); currAmbito = "Main"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= FUNC_HEAD MainProgram parIzq parDer cbOpen NT$0 LISTEXP cbClose FUNC 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 
                                System.out.println("Fin main");
                                printCuadruplos();
                                System.out.println(tabla.toString()); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 
                        completa(exp.listasig, m.intValue()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTEXP ::= EXP M NT$1 LISTEXP 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion lexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        RESULT = new Expresion(); 
                        RESULT.listasig = lexp.listasig;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTEXP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTEXP ::= EXP M 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                
                        // RESULT = new Expresion(); 
                        // RESULT.listasig = ifexp.listasig; 
                        completa(exp.listasig, m.intValue());
                        RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTEXP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= error 
            {
              Expresion RESULT =null;
		 RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= IF 
            {
              Expresion RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion ifexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Expresion(); 
                                RESULT.listasig = ifexp.listasig; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= WHILE 
            {
              Expresion RESULT =null;
		int whileexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int whileexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion whileexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = new Expresion(); 
                                RESULT.listasig = whileexp.listasig;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= ASIG 
            {
              Expresion RESULT =null;
		 RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= comment 
            {
              Expresion RESULT =null;
		 RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= INIT 
            {
              Expresion RESULT =null;
		 RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= DECL 
            {
              Expresion RESULT =null;
		 RESULT = new Expresion(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= FOR 
            {
              Expresion RESULT =null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion forexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Expresion();
                                RESULT.listasig = forexp.listasig;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= SELECT 
            {
              Expresion RESULT =null;
		int selectexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int selectexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion selectexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.listasig = selectexp.listasig; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= IdF 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                int p = val.tipo.indexOf("->");
                                if(p==-1){
                                        printError(valleft,valright,"","","blankCall");
                                }
                                RESULT = new Expresion(); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= WRITE 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= ret VALS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   
                                if(currAmbito.equals("Main")){
                                        System.err.println("Error en linea "+(valleft+1)+", columna "+valright+": Return en main");
                                }else{
                                        Simbolo funcion = tabla.getFunction(currAmbito, contadorFunciones);
                                        if(funcion != null){
                                                String retType = funcion.tipo.substring(funcion.tipo.indexOf("->")+2, funcion.tipo.length());
                                                if(retType.equals("void")){
                                                        System.err.println("Error en linea "+(valleft+1)+", columna "+valright+": Return en funcion void");
                                                }else if(!retType.equals(val.tipo)){
                                                        System.err.println("Error en linea "+(valleft+1)+", columna "+valright+": Return de tipo "+val.tipo+" en funcion de tipo "+retType);
                                                }else if(retType.equals(val.tipo)){
                                                        //Cuadruplos de return
                                                }
                                        }
                                }
                                RESULT = new Expresion();
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdF ::= id TypeIdF 
            {
              Value RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		    
                                int index = tabla.contains(ident, currAmbito);
                                if(val == -3){
                                        int resultado = 0;
                                        if(index>=0){
                                                Simbolo sym = tabla.getSymbol(ident, currAmbito);
                                                if(!sym.valor.val.equals("")){
                                                        sym.valor.setVal(ident);
                                                        RESULT = sym.valor;
                                                }else{
                                                        RESULT = new Value("error", "notInitialized");
                                                }
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                                RESULT.id = ident;
                                        }
                                }else if(val == -2){
                                        // calls.add(ident);
                                        if(index >= 0) {
                                                Simbolo sym = tabla.getSymbol(ident, currAmbito);
                                                RESULT = new Value(sym.tipo, sym.id);
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                                RESULT.id = ident;
                                        }
                                }else {
                                        int ind = tabla.getIndexVal(ident, currAmbito);
                                        if(index >= 0) {
                                                if(val>=0 && val<=arreglos.get(ind).fin){
                                                        Value arrayValue = arreglos.get(ind).getValue(val);
                                                        if(!arrayValue.val.equals("")){
                                                                RESULT = arrayValue;
                                                        }else{
                                                                RESULT = new Value("error", "notInitialized");
                                                        }
                                                }else{ 
                                                        RESULT = new Value("error", "out of bounds");
                                                }
                                        }else{
                                                RESULT = new Value("error", "notfound");
                                                RESULT.id = ident;
                                        }
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IdF",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeIdF ::= openBrk number closeBrk 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                if(Integer.parseInt(n)>=0){
                                                        RESULT = Integer.parseInt(n); 
                                                }else{
                                                        RESULT = -1; 
                                                }

                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeIdF ::= parIzq FCALLARGS parDer 
            {
              Integer RESULT =null;
		 RESULT = -2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeIdF ::= 
            {
              Integer RESULT =null;
		 RESULT = -3; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TypeIdF",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value arg = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name, currAmbito);
                        if(index == -1){
                                tabla.addVar(args+"->"+fun_type, fun_name, null, "global");
                                contadorFunciones++;
                        }else{
                                printError(fun_nameleft,fun_nameright,fun_name, "Ya existe la función","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC_HEAD ::= TIPO id parIzq TYPE_LIST parDer NT$2 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fun_typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String fun_type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              Object RESULT =null;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                        int index = tabla.contains(fun_name, currAmbito);
                        if(index == -1){
                                tabla.addVar(args+"->void", fun_name, null, "global");
                                contadorFunciones++;
                        }else{
                                printError(fun_nameleft,fun_nameright,fun_name, "Ya existe la función","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC_HEAD ::= voidType id parIzq TYPE_LIST parDer NT$3 FUNC_HEAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fun_nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fun_nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String fun_name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC_HEAD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_HEAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE_LIST ::= TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tipo + tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE_LIST ::= 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE_LIST2 ::= coma TIPO TYPE_LIST2 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "x"+tipo+tl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE_LIST2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE_LIST2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= id TIPO ASIG2 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int asig2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int asig2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer asig2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        int index = tabla.contains(i, currAmbito);
                        if(index == -1){
                                int ind = t.indexOf("array");
                                if(ind==-1){
                                        if(asig2==-1){
                                                Value v = new Value(t, "");
                                                tabla.addVar(t, i, v, currAmbito);
                                                RESULT = i;
                                        }else{
                                                Array m = new Array(0,asig2-1,t);
                                                Value v = new Value(t, arreglos.size()+"");
                                                Value [] arrayTable= new Value[asig2];
                                                for(int j=0; j<asig2; j++){
                                                        arrayTable[j] = new Value(t, "");
                                                }
                                                m.setTabla(arrayTable);
                                                System.out.println(m.toString());
                                                arreglos.add(m);
                                                tabla.addVar(t, i, v, currAmbito);
                                        }
                                }else{
                                        printError(tleft,tright,i,"Declaracion sin tamaño de arreglo","DetailVariable");
                                }
                        }else{
                                RESULT = "";
                                printError(tleft,tright,i,"","declared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INIT ::= id TIPO opAsig VALS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        int index = tabla.contains(i, currAmbito);
                        if(index == -1){
                                //si no existe la variable revisa si el valor tiene error
                                if(v.tipo.equals("error")){
                                        printError(vleft,vright,i,"",v.val);
                                }else{
                                        int ind = t.indexOf("array");
                                        if(ind!=-1){
                                                String tipo = t.substring(0,ind-1);
                                                if(v.tipo.equals("array")){
                                                        // que sea asignado a un conjunto de elementos entre corchetes("array")
                                                        // Cuando es array el contenido de VALS = Value(tipo->"array", val->"{5,6,7}")
                                                        // Cuando es array el contenido de TIPO = "num array"
                                                        try{
                                                                String[] contenido = v.val.split(",");
                                                                Array m = new Array(0,contenido.length-1,tipo);
                                                                int cont = 0;
                                                                if(tipo.equals("num")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                m.addInt(cont,Integer.parseInt(contenido[j]));
                                                                                cont++;
                                                                        }
                                                                }else if(tipo.equals("char")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                m.addChar(cont,contenido[j].charAt(1));
                                                                                cont++;
                                                                        }
                                                                }else if(tipo.equals("bool")){
                                                                        for(int j= contenido.length-1 ; 0 <= j; j--){
                                                                                if(contenido[j].equals("true") || contenido[j].equals("false")){
                                                                                        m.addBool(cont,contenido[j]);
                                                                                }
                                                                                m.addBool(cont,contenido[j]);
                                                                                cont++;
                                                                        }
                                                                }
                                                                v.setVal(arreglos.size()+"");
                                                                arreglos.add(m);
                                                                tabla.addVar(t, i, v, currAmbito);
                                                        }catch(Exception e){
                                                                printError(vleft,vright,i,"Tipos incompatibles en "+tipo,"DetailVariable");
                                                        }
                                                }else{
                                                        printError((vleft+1),vright,v.tipo,t,"tipos");
                                                }
                                        }else{
                                                if(v.tipo.equals(t)){
                                                        tabla.addVar(t, i, v, currAmbito);
                                                        gen(":=", v.val, "", i);
                                                        // System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v.val);
                                                        RESULT = i;
                                                }else{
                                                        RESULT = "";
                                                        printError((vleft+1),vright,v.tipo,t,"tipos");
                                                }
                                        }
                                }
                        }else{
                                RESULT = "";
                                printError(vleft,vright,i,"","declared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int asig2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int asig2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer asig2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        int index = tabla.contains(i, currAmbito);
                        if(index>=0){
                                if(v.tipo.equals("error")){
                                        printError(vleft+1,vright,i,"",v.val);
                                }else{ 
                                        if(asig2 == -1){
                                                Simbolo sym = tabla.getSymbol(i, currAmbito);
                                                if(v.tipo.equals(sym.tipo)){
                                                        tabla.assignValue(index, new Value(v.tipo, i));
                                                        gen(":=", v.val, "", sym.id);
                                                        // if(v.tipo.equals("boolean")){
                                                        //         System.out.println("Asignacion: Variable "+i+", valor: "+v.getBoolVal());
                                                        // }else if(v.tipo.equals("num")){
                                                        //         System.out.println("Asignacion: Variable "+i+", valor: "+v.getVal());
                                                        // }else if(v.tipo.equals("char")){
                                                        //         System.out.println("Asignacion: Variable "+i+", valor: "+v.getCharVal());
                                                        // }
                                                }else{ 
                                                        printError((vleft+1), vright, v.tipo, sym.tipo,"tipos");
                                                }
                                        }else{
                                                //Cuando esta aqui la unica validacion que necesita es que el valor singular del array sea igualado a otro del mismo
                                                int arrayIndex;
                                                arrayIndex = tabla.getIndexVal(i, currAmbito);
                                                System.out.println("HEEEEY-> Indice del array "+asig2+" Bounds [0, "+arreglos.get(arrayIndex).fin+"] ");
                                                if(asig2>=0 && asig2<=arreglos.get(arrayIndex).fin){
                                                        System.out.println("arrayIndex: "+arrayIndex);
                                                        if(v.tipo.equals(arreglos.get(arrayIndex).tipo) && arrayIndex>=0){
                                                                arreglos.get(arrayIndex).assignValue(asig2,v.val);
                                                        }else{
                                                                printError((vleft+1),vright,v.tipo,arreglos.get(arrayIndex).tipo,"tipos");
                                                        }
                                                }else{ 
                                                        printError(vleft+1, vright, i, asig2+"", "out of bounds");
                                                }
                                        }
                                }
                        }else{
                                System.out.println("index -1 case");
                                printError(vleft,vright,i,"","notDeclared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIG2 ::= openBrk number closeBrk 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = Integer.parseInt(n); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIG2 ::= 
            {
              Integer RESULT =null;
		 RESULT = -1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= ifstart parIzq COND parDer ifthen M LISTEXP N M ELSIF M ELSE endif 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion elsif = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int elsecaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int elsecaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion elsecase = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        completa(cond.listav, m1.intValue());
                        RESULT = new Expresion();
                        if(elsif == null && elsecase == null){ 
                                RESULT.listasig = fusiona(cond.listaf, fusiona(n.listasig, exp.listasig));
                        }else if(elsif == null && elsecase != null){              
                                completa(cond.listaf, m3.intValue());
                                RESULT.listasig = fusiona(elsecase.listasig, n.listasig);
                        }else if(elsif != null && elsecase == null){
                                completa(cond.listaf, m2.intValue());
                                RESULT.listasig = fusiona(elsif.listasig, n.listasig);
                        }else if(elsif != null && elsecase != null){
                                completa(cond.listaf, m2.intValue());
                                ArrayList<Integer> tempLista = new ArrayList();
                                tempLista.add(elsif.listasig.get(0));
                                completa(tempLista, m3.intValue());
                                elsif.listasig.remove(0);
                                RESULT.listasig = fusiona(elsecase.listasig, fusiona(elsif.listasig, n.listasig));
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSIF ::= elseif parIzq COND parDer ifthen M LISTEXP N M ELSIF 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int elseifcaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elseifcaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion elseifcase = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        completa(cond.listav, m1.intValue());
                        RESULT = new Expresion();
                        if(elseifcase !=null){
                                completa(cond.listaf, m2.intValue());
                                RESULT.listasig = fusiona(elseifcase.listasig, fusiona(exp.listasig, n.listasig));
                        }else{
                                RESULT.listasig = fusiona(exp.listasig, fusiona(cond.listaf, n.listasig));
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSIF ::= 
            {
              Expresion RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= elseclause ifthen LISTEXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = new Expresion();
                                RESULT.listasig = exp.listasig;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= 
            {
              Expresion RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= whilestart M parIzq COND parDer M LISTEXP N end 
            {
              Expresion RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                completa(cond.listav, m2.intValue());
                                completa(fusiona(exp.listasig, n.listasig), m1.intValue());
                                RESULT = new Expresion();
                                RESULT.listasig = cond.listaf;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WRITE ::= writestart parIzq VALS parDer 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                        if(!value.val.equals("notfound")){
                                gen("WRITE", "", "", value.val); 
                        }else{
                                printError(valueleft, valueright, value.id, "", "notDeclared");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= forstart parIzq INIT pcoma M COND pcoma M CONTADOR N parDer M LISTEXP N end 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                        completa(n1.listasig, m1.intValue());
                        completa(n2.listasig, m2.intValue());
                        completa(cond.listav, m3.intValue());
                        RESULT = new Expresion();
                        RESULT.listasig = cond.listaf;
                        tabla.removeVar(id, currAmbito);  
                        //System.out.println("TABLA SIMBOLOS DESPUES DE FOR: "+tabla.toString()); 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTADOR ::= id contador 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 gen("+", "1", i, i); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTADOR",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$4 ::= 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int optexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int optexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion optexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 
                        completaArg1(optexp.listav, i); 
                        RESULT = new Expresion();
                        RESULT.listasig = optexp.listasig;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELECT ::= selectstart parIzq id parDer OPT NT$4 end 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int optexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int optexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion optexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$5 ::= 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                                RESULT = new Expresion();

                                if(!v.val.equals("notfound")){
                                        RESULT.listav.add(cuadruplos.size());
                                        RESULT.listaf.add(cuadruplos.size()+1); 
                                        gen("IF:=", "", v.val +"", m1.intValue()+2+"");
                                        gen("GOTO", "", "", "");
                                }else{
                                        printError(vleft, vright, v.id, "", "notDeclared");
                                }
                                
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPT ::= options VALS colon M NT$5 LISTEXP breaks N M OPT2 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int optexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int optexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion optexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                if(optexp != null){
                                        completa(RESULT.listaf, m2.intValue());
                                        RESULT.listasig = fusiona(optexp.listasig, n.listasig);
                                        RESULT.listav = fusiona(optexp.listav, RESULT.listav);
                                }else{
                                        RESULT.listasig = fusiona(RESULT.listaf, n.listasig);
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPT2 ::= OPT 
            {
              Expresion RESULT =null;
		int optexpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int optexpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion optexp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Expresion();
                                RESULT.listasig = optexp.listasig;
                                RESULT.listav = optexp.listav;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPT2 ::= 
            {
              Expresion RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$6 ::= 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                        RESULT = new Expresion();
                        RESULT.listav = cond.listav;
                        RESULT.listaf = cond.listaf;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND ::= parIzq COND parDer NT$6 COND2 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        if(cond2 != null){
                                Expresion temp = RESULT;
                                if(cond2.or){
                                        completa(temp.listaf, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listav = fusiona(temp.listav, cond2.listav);
                                        RESULT.listaf = cond2.listaf;
                                }else{
                                        completa(temp.listav, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listaf = fusiona(temp.listaf, cond2.listaf);
                                        RESULT.listav = cond2.listav;
                                }
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                        RESULT = new Expresion(); 
                        RESULT.listav = cond.listaf; 
                        RESULT.listaf = cond.listav; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND ::= opNot COND NT$7 COND2 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        if(cond2 != null){
                                Expresion temp = RESULT;
                                if(cond2.or){
                                        completa(temp.listaf, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listav = fusiona(temp.listav, cond2.listav);
                                        RESULT.listaf = cond2.listaf;
                                }else{
                                        completa(temp.listav, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listaf = fusiona(temp.listaf, cond2.listaf);
                                        RESULT.listav = cond2.listav;
                                }
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$8 ::= 
            {
              Expresion RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value i1 = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value i2 = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
      
                        boolean isID1 = isID(i1);
                        boolean isID2 = isID(i2);

                        if(isID1 && isID2){
                                int index_id1 = tabla.contains(i1.val, currAmbito);
                                int index_id2 = tabla.contains(i2.val, currAmbito);
                                if(index_id1 > -1 && index_id2 > -1){
                                        RESULT = new Expresion();
                                        RESULT.listav.add(cuadruplos.size());
                                        RESULT.listaf.add(cuadruplos.size()+1);
                                        gen("IF"+opr, i1.val, i2.val, "");
                                        gen("GOTO", "");
                                }else{
                                        if(index_id1 == -1){
                                                printError(i1left, i1right, "en la condicion", "", "notDeclared");
                                        }
                                        if(index_id2 == -1){
                                                printError(i2left, i2right, "en la condicion", "", "notDeclared");                                        
                                        }
                                        RESULT = new Expresion();
                                }
                        }else if((isID1 && !isID2) || (!isID1 && isID2)){
                                int validate = 3;
                                if(isID1){
                                        int index_id1 = tabla.contains(i1.val, currAmbito);
                                        if(index_id1 > -1){
                                                validate = 1;
                                        }else{
                                                validate = 3;
                                        }
                                }else if(isID2){
                                        int index_id2 = tabla.contains(i2.val, currAmbito);
                                        if(index_id2 > -1){
                                                validate = 2;
                                        }else{
                                                validate = 4;
                                        }
                                }

                                RESULT = new Expresion();

                                if(validate < 3){
                                        if((i1.tipo.equals("boolean") && (opr.equals("==") || opr.equals("!=")) && i2.tipo.equals("boolean"))
                                        ||(i1.tipo.equals("num") && i2.tipo.equals("num"))
                                        ||(i1.tipo.equals("char") && (opr.equals("==") || opr.equals("!=")) && i2.tipo.equals("char"))){
                                                RESULT.listav.add(cuadruplos.size());
                                                RESULT.listaf.add(cuadruplos.size()+1);
                                                gen("IF"+opr, i1.val, i2.val, "");
                                                gen("GOTO", "");
                                        }else{
                                                //printerror tipos incopatibles u operador inorrecto
                                                System.err.println("Tipos incopatibles en condicion");
                                                
                                        }
                                }else{
                                        if(validate == 3){
                                                //printerror i1 no encontrada
                                                printError(i1left, i1right, i1.val, "", "notDeclared");

                                        }else if(validate == 4){
                                                //printerror i2 no encontrada
                                                printError(i2left, i2right, i2.val, "", "notDeclared");
                                                
                                        }
                                }
                        }else if(!isID1 && !isID2){
                                        if((i1.tipo.equals("boolean") && (opr.equals("==") || opr.equals("!=")) && i2.tipo.equals("boolean"))
                                         ||(i1.tipo.equals("num") && i2.tipo.equals("num"))
                                         ||(i1.tipo.equals("char") && (opr.equals("==") || opr.equals("!=")) && i2.tipo.equals("char"))){
                                                RESULT.listav.add(cuadruplos.size());
                                                RESULT.listaf.add(cuadruplos.size()+1);
                                                gen("IF"+opr, i1.val, i2.val, "");
                                                gen("GOTO", "");
                                        }else{
                                                //printerror tipos incopatibles u operador inorrecto
                                                System.err.println("Tipos incopatibles en condicion");
                                        }                                
                        }
                        
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND ::= VALS opRel VALS NT$8 COND2 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Value i1 = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value i2 = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        if(cond2 != null){
                                Expresion temp = RESULT;
                                if(cond2.or){
                                        completa(temp.listaf, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listav = fusiona(temp.listav, cond2.listav);
                                        RESULT.listaf = cond2.listaf;
                                }else{
                                        completa(temp.listav, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listaf = fusiona(temp.listaf, cond2.listaf);
                                        RESULT.listav = cond2.listav;
                                }
                        }
                                
                        
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$9 ::= 
            {
              Expresion RESULT =null;
		int boolvalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int boolvalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String boolval = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 
                        RESULT = new Expresion();
                        if(boolval.equals("true")){ 
                                RESULT.listav.add(cuadruplos.size()); 
                        }else{
                                RESULT.listaf.add(cuadruplos.size());
                        }
                        gen("GOTO", "");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= booleano NT$9 COND2 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int boolvalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int boolvalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String boolval = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                      if(cond2 != null){
                                Expresion temp = RESULT;
                                if(cond2.or){
                                        completa(temp.listaf, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listav = fusiona(temp.listav, cond2.listav);
                                        RESULT.listaf = cond2.listaf;
                                }else{
                                        completa(temp.listav, cond2.cuad);
                                        RESULT = new Expresion();
                                        RESULT.listaf = fusiona(temp.listaf, cond2.listaf);
                                        RESULT.listav = cond2.listav;
                                }
                        }  
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND2 ::= opOr M COND 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Expresion(true);
                RESULT.cuad = m.intValue();
                RESULT.listav = cond.listav;
                RESULT.listaf = cond.listaf;
                
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND2 ::= opAnd M COND 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Expresion(false);
                RESULT.cuad = m.intValue();
                RESULT.listav = cond.listav;
                RESULT.listaf = cond.listaf;
                
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND2 ::= 
            {
              Expresion RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // M ::= 
            {
              Integer RESULT =null;
		 RESULT = new Integer(cuadruplos.size()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("M",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N ::= 
            {
              Expresion RESULT =null;
		
                RESULT = new Expresion();
                RESULT.listasig.add(cuadruplos.size());
                gen("GOTO", "");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("N",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // S ::= E 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E opSuma T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                String temp = nuevoTemp();
                                                                gen("+", e.val, t.val, temp);
                                                                RESULT = new Value("num", temp);
                                                        }
                                                }
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E opResta T 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(e.tipo.equals("error") || t.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(e), y = operationValidation(t);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                String temp = nuevoTemp();
                                                                gen("-", e.val, t.val, temp);
                                                                RESULT = new Value("num", temp);
                                                        }
                                                }                                                 
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= T 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T ::= T opMult F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                String temp = nuevoTemp();
                                                                gen("*", t.val, f.val, temp);
                                                                RESULT = new Value("num", temp);
                                                        }
                                                }  
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= T opDiv F 
            {
              Value RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                if(t.tipo.equals("error") || f.tipo.equals("error")){
                                                        RESULT = new Value("error", "notfound");
                                                }else{
                                                        String x = operationValidation(t), y = operationValidation(f);
                                                        if(x.equals("error") || y.equals("error")){
                                                                RESULT = new Value("error", "incompatible");
                                                        }else{
                                                                String temp = nuevoTemp();
                                                                gen("/", t.val, f.val, temp);
                                                                //RESULT = new Value("num", (Integer.parseInt(x) / Integer.parseInt(y))+"");
                                                                RESULT = new Value("num", temp);
                                                        }
                                                }
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T ::= F 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value f = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=f; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // F ::= number 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("num", n); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= parIzq E parDer 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value e = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= IdF 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                RESULT = val; 
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$10 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 currAmbito = val; calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros args = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                                int index = tabla.contains(val, "global");
                                if(index >= 0){
                                        Simbolo funcion = tabla.getSymbol(val, currAmbito);
                                        String argType = "";
                                        if(args != null){
                                                for(int i = 0; i < args.tipos.size(); i++){
                                                        argType += args.tipos.get(i);
                                                        if(i < args.tipos.size() - 1){
                                                                argType += "x";
                                                        }
                                                }
                                        }else{
                                                argType = "void";
                                        }
                                        argType += "->"+t;
                                        if(funcion.tipo.equals(argType)){
                                                System.out.println("Funcion "+val+", tipo: "+argType);
                                        }else{
                                                printError(argsleft, argsright, argType, "Funcion "+val+" de tipo "+funcion.tipo+" ha sido utilizada como ","DetailVariable");
                                        }
                                }else{
                                        printError(valleft, valright, val, "No ha sido declarada la función ","DetailVariable");
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RETFUNC ::= TIPO id NT$10 parIzq ARGS NT$11 parDer cbOpen LISTEXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Parametros args = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$12 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 currAmbito = val;  calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros args = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                        int index = tabla.contains(val, "global");
                        if(index >= 0){
                                Simbolo funcion = tabla.getSymbol(val, currAmbito);
                                String argType = "";
                                if(args != null){
                                        for(int i = 0; i < args.tipos.size(); i++){
                                                argType += args.tipos.get(i);
                                                if(i < args.tipos.size() - 1){
                                                        argType += "x";
                                                }
                                        }
                                }else{
                                        argType = "void";
                                }
                                argType += "->void";
                                if(funcion.tipo.equals(argType)){
                                        System.out.println("Funcion "+val+", tipo: "+argType);
                                }else{
                                        printError(argsleft, argsright, argType, "Funcion "+val+" de tipo "+funcion.tipo+" ha sido utilizada como ","DetailVariable");
                                }
                        }else{
                                printError(valleft, valright, val, "No ha sido declarada la función ","DetailVariable");
                        }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VOIDFUNC ::= voidType id NT$12 parIzq ARGS NT$13 parDer cbOpen LISTEXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Parametros args = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGS ::= TIPO id ARGS2 
            {
              Parametros RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros arg2 = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                int index = tabla.contains(ident, currAmbito);
                                if(index == -1){
                                        tabla.addParam(tipo, ident, new Value(tipo, ""), currAmbito);
                                        RESULT = new Parametros();
                                        if(arg2 != null){
                                                RESULT.ids = arg2.ids;
                                                RESULT.tipos = arg2.tipos;
                                        }
                                        RESULT.ids.add(ident);
                                        RESULT.tipos.add(tipo);
                                        if(RESULT.ids.size() > 1){
                                                Collections.reverse(RESULT.ids);
                                                Collections.reverse(RESULT.tipos);
                                        }
                                }else{
                                        //printerror argumento ya declarado
                                        RESULT = arg2;
                                }

                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGS ::= 
            {
              Parametros RESULT =null;
		
                        RESULT = null;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGS2 ::= coma TIPO id ARGS2 
            {
              Parametros RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros arg2 = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                int index = tabla.contains(ident, currAmbito);
                                if(index == -1){
                                        tabla.addParam(tipo, ident, new Value(tipo, ""), currAmbito);
                                        RESULT = new Parametros();
                                        if(arg2 != null){
                                                RESULT.ids = arg2.ids;
                                                RESULT.tipos = arg2.tipos;
                                        }
                                        RESULT.ids.add(ident);
                                        RESULT.tipos.add(tipo);
                                        if(RESULT.ids.size() > 1){
                                                Collections.reverse(RESULT.ids);
                                                Collections.reverse(RESULT.tipos);
                                        }
                                }else{
                                        //printerror argumento ya declarado
                                        RESULT = arg2;
                                }
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGS2 ::= 
            {
              Parametros RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= booleano 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("bool", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALS ::= charval 
            {
              Value RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("char", ch); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALS ::= S 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALS ::= ARRVAL0 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Value("array", val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARRVAL0 ::= cbOpen S ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += (v.val + "");
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRVAL0 ::= cbOpen booleano ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += (v + "");
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRVAL0 ::= cbOpen charval ARRVAL2 cbClose 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                                arrayValue += (v + "");
                                RESULT = arrayValue; 
                                arrayValue = ""; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL0",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARRVAL2 ::= coma ARRVAL3 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARRVAL3 ::= S ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                arrayValue += (v.val+",");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARRVAL3 ::= booleano ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                arrayValue += (v+","); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARRVAL3 ::= charval ARRVAL2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   
                                arrayValue += (v+",");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL3",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
