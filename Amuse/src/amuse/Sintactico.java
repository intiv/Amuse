
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\051\002\000\002\052" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\053\002\000\002\003\005\000\002\003" +
    "\004\000\002\003\002\000\002\046\006\000\002\047\004" +
    "\000\002\047\002\000\002\050\005\000\002\050\002\000" +
    "\002\022\004\000\002\022\004\000\002\022\002\000\002" +
    "\035\006\000\002\033\006\000\002\034\005\000\002\034" +
    "\002\000\002\054\002\000\002\055\002\000\002\004\014" +
    "\000\002\056\002\000\002\005\012\000\002\005\003\000" +
    "\002\057\002\000\002\006\006\000\002\006\002\000\002" +
    "\060\002\000\002\061\002\000\002\007\012\000\002\012" +
    "\006\000\002\062\002\000\002\063\002\000\002\064\002" +
    "\000\002\010\017\000\002\011\004\000\002\065\002\000" +
    "\002\066\002\000\002\013\012\000\002\067\002\000\002" +
    "\014\011\000\002\015\003\000\002\015\002\000\002\016" +
    "\004\000\002\016\003\000\002\017\005\000\002\017\003" +
    "\000\002\017\005\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\002\000\002\045\003\000\002\042\005\000\002\042" +
    "\005\000\002\042\003\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\044\003\000\002\044\005\000" +
    "\002\023\004\000\002\070\002\000\002\024\012\000\002" +
    "\071\002\000\002\026\006\000\002\025\003\000\002\027" +
    "\004\000\002\072\002\000\002\030\012\000\002\073\002" +
    "\000\002\031\006\000\002\031\002\000\002\074\002\000" +
    "\002\032\007\000\002\032\002\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\075\002\000\002\076\002\000" +
    "\002\037\010\000\002\037\004\000\002\077\002\000\002" +
    "\036\006\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\011\004\001\002\000\004\013\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\014\010\001\002\000\004\015\011\001\002\000" +
    "\030\003\000\004\000\013\000\016\000\025\000\041\000" +
    "\045\000\046\000\050\000\051\000\055\000\001\002\000" +
    "\030\003\036\004\uffe4\013\015\016\ufff1\025\035\041\016" +
    "\045\037\046\031\050\034\051\uffd2\055\013\001\002\000" +
    "\044\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\012\ufff1" +
    "\013\015\016\ufff1\017\ufff1\025\035\041\016\045\037\046" +
    "\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000\044" +
    "\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013" +
    "\015\016\ufff1\017\ufff1\025\035\041\016\045\037\046\031" +
    "\050\034\051\uffd2\052\ufff1\055\013\001\002\000\006\013" +
    "\015\041\016\001\002\000\064\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\025\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\055\uffb9\001\002\000\044\003\036\004\uffe4" +
    "\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\015\016\ufff1\017" +
    "\ufff1\025\035\041\016\045\037\046\031\050\034\051\uffd2" +
    "\052\ufff1\055\013\001\002\000\004\051\306\001\002\000" +
    "\044\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\012\ufff1" +
    "\013\015\016\ufff1\017\ufff1\025\035\041\016\045\037\046" +
    "\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000\064" +
    "\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025\uffbd" +
    "\035\uffbd\036\uffbd\037\155\040\154\041\uffbd\045\uffbd\046" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002" +
    "\000\044\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\013\015\016\ufff1\017\ufff1\025\035\041\016\045\037" +
    "\046\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000" +
    "\004\004\256\001\002\000\044\003\036\004\uffe4\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\013\015\016\ufff1\017\ufff1\025" +
    "\035\041\016\045\037\046\031\050\034\051\uffd2\052\ufff1" +
    "\055\013\001\002\000\044\003\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\025\ufff4" +
    "\041\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\055" +
    "\ufff4\001\002\000\044\003\036\004\uffe4\006\ufff1\007\ufff1" +
    "\010\ufff1\012\ufff1\013\015\016\ufff1\017\ufff1\025\035\041" +
    "\016\045\037\046\031\050\034\051\uffd2\052\ufff1\055\013" +
    "\001\002\000\004\016\201\001\002\000\004\013\uffd7\001" +
    "\002\000\064\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba" +
    "\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\025\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\001\002\000\060\003\uffc0\004\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\025\uffc0\035\152\036\151\041\uffc0\045\uffc0" +
    "\046\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001" +
    "\002\000\004\013\146\001\002\000\016\013\100\022\104" +
    "\027\105\034\uffe5\042\101\043\102\001\002\000\044\003" +
    "\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\015" +
    "\016\ufff1\017\ufff1\025\035\041\016\045\037\046\031\050" +
    "\034\051\uffd2\052\ufff1\055\013\001\002\000\004\013\uffdb" +
    "\001\002\000\044\003\036\004\uffe4\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\015\016\ufff1\017\ufff1\025\035\041\016" +
    "\045\037\046\031\050\034\051\uffd2\052\ufff1\055\013\001" +
    "\002\000\044\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1" +
    "\012\ufff1\013\015\016\ufff1\017\ufff1\025\035\041\016\045" +
    "\037\046\031\050\034\051\uffd2\052\ufff1\055\013\001\002" +
    "\000\020\006\ufffa\007\ufffa\010\ufffa\012\ufffa\016\ufffa\017" +
    "\ufffa\052\ufffa\001\002\000\020\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\016\ufff7\017\ufff7\052\ufff7\001\002\000\004\013" +
    "\045\001\002\000\012\024\046\025\052\033\047\041\051" +
    "\001\002\000\006\014\uffc8\021\uffc8\001\002\000\010\024" +
    "\046\025\052\041\051\001\002\000\006\014\uffca\021\uffca" +
    "\001\002\000\004\030\074\001\002\000\004\030\060\001" +
    "\002\000\004\014\054\001\002\000\030\003\uffda\004\uffda" +
    "\012\uffda\013\uffda\025\uffda\041\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\055\uffda\001\002\000\030\003\036\004\uffe4" +
    "\012\ufff1\013\015\025\035\041\016\045\037\046\031\050" +
    "\034\051\uffd2\055\013\001\002\000\004\012\057\001\002" +
    "\000\044\003\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\013\uffd9\016\uffd9\017\uffd9\025\uffd9\041\uffd9\045\uffd9" +
    "\046\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9\001\002\000" +
    "\010\024\061\025\064\041\063\001\002\000\012\014\uffc1" +
    "\021\uffc1\031\067\032\066\001\002\000\006\014\uffc9\021" +
    "\uffc9\001\002\000\012\014\uffc1\021\uffc1\031\067\032\066" +
    "\001\002\000\012\014\uffc1\021\uffc1\031\067\032\066\001" +
    "\002\000\006\014\uffc6\021\uffc6\001\002\000\012\024\046" +
    "\025\052\033\047\041\051\001\002\000\012\024\046\025" +
    "\052\033\047\041\051\001\002\000\006\014\uffc3\021\uffc3" +
    "\001\002\000\006\014\uffc2\021\uffc2\001\002\000\006\014" +
    "\uffc4\021\uffc4\001\002\000\006\014\uffc5\021\uffc5\001\002" +
    "\000\010\024\061\025\064\041\063\001\002\000\006\014" +
    "\uffc7\021\uffc7\001\002\000\006\014\uffcb\021\uffcb\001\002" +
    "\000\020\006\ufffd\007\ufffd\010\ufffd\012\ufffd\016\ufffd\017" +
    "\ufffd\052\ufffd\001\002\000\020\013\015\014\uffee\015\117" +
    "\024\120\025\113\041\016\044\116\001\002\000\010\022" +
    "\uffa7\025\uffa7\034\uffa7\001\002\000\010\022\uffa6\025\uffa6" +
    "\034\uffa6\001\002\000\004\034\135\001\002\000\004\041" +
    "\133\001\002\000\010\022\uffa5\025\uffa5\034\uffa5\001\002" +
    "\000\006\022\110\034\107\001\002\000\016\013\015\015" +
    "\117\024\120\025\113\041\016\044\116\001\002\000\004" +
    "\023\111\001\002\000\010\022\uffa8\025\uffa8\034\uffa8\001" +
    "\002\000\054\003\uffa0\004\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\025\uffa0\041\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\054\uffa0\055\uffa0\001\002\000\054\003\uffa4\004" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\025\uffa4\041\uffa4\045" +
    "\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4" +
    "\001\002\000\054\003\uffa1\004\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\025\uffa1\041\uffa1\045\uffa1\046\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\054\uffa1\055\uffa1\001\002\000\046\003\uffe8" +
    "\004\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\025\uffe8\041\uffe8\045\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\055\uffe8\001\002\000\054\003" +
    "\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\025\uffa2\041" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2" +
    "\055\uffa2\001\002\000\010\013\015\016\121\041\016\001" +
    "\002\000\054\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\025\uffa3\041\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\054\uffa3\055\uffa3\001\002\000\054\003\uff9c\004" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\021\uff9c\025\uff9c\041\uff9c\045" +
    "\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c" +
    "\001\002\000\006\016\uff9f\020\uff9f\001\002\000\006\016" +
    "\uff99\020\125\001\002\000\004\016\uff9e\001\002\000\006" +
    "\013\015\041\016\001\002\000\006\016\uff9b\020\uff9b\001" +
    "\002\000\006\016\uff99\020\125\001\002\000\004\016\uff9a" +
    "\001\002\000\004\016\132\001\002\000\054\003\uff9d\004" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\025\uff9d\041\uff9d\045" +
    "\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d" +
    "\001\002\000\004\023\134\001\002\000\004\034\uffe6\001" +
    "\002\000\016\013\015\015\117\024\120\025\113\041\016" +
    "\044\116\001\002\000\044\003\uffe7\004\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\013\uffe7\016\uffe7\017\uffe7\025\uffe7" +
    "\041\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\055" +
    "\uffe7\001\002\000\006\014\uffec\020\143\001\002\000\004" +
    "\014\141\001\002\000\044\003\ufff0\004\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\025\ufff0" +
    "\041\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\055" +
    "\ufff0\001\002\000\004\014\uffef\001\002\000\016\013\015" +
    "\015\117\024\120\025\113\041\016\044\116\001\002\000" +
    "\006\014\uffec\020\143\001\002\000\004\014\uffed\001\002" +
    "\000\016\013\015\015\117\024\120\025\113\041\016\044" +
    "\116\001\002\000\004\014\150\001\002\000\044\003\uffd8" +
    "\004\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\016" +
    "\uffd8\017\uffd8\025\uffd8\041\uffd8\045\uffd8\046\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\055\uffd8\001\002\000\006\013\015\041" +
    "\016\001\002\000\006\013\015\041\016\001\002\000\064" +
    "\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\025\uffbf" +
    "\035\uffbf\036\uffbf\037\155\040\154\041\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002" +
    "\000\006\013\015\041\016\001\002\000\006\013\015\041" +
    "\016\001\002\000\064\003\uffbc\004\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\025\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\054" +
    "\uffbc\055\uffbc\001\002\000\064\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\025\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\001\002\000\064\003\uffbe\004\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\025\uffbe\035\uffbe\036\uffbe" +
    "\037\155\040\154\041\uffbe\045\uffbe\046\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\054\uffbe\055\uffbe\001\002\000\004\013\162" +
    "\001\002\000\004\025\164\001\002\000\004\021\165\001" +
    "\002\000\010\027\105\042\101\043\102\001\002\000\012" +
    "\024\046\025\052\033\047\041\051\001\002\000\004\021" +
    "\uffd6\001\002\000\004\021\170\001\002\000\004\025\172" +
    "\001\002\000\004\014\174\001\002\000\004\047\173\001" +
    "\002\000\004\014\uffd3\001\002\000\004\025\uffd5\001\002" +
    "\000\004\025\177\001\002\000\004\012\200\001\002\000" +
    "\006\022\104\034\uffe5\001\002\000\044\003\uffd4\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\016\uffd4\017" +
    "\uffd4\025\uffd4\041\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\055\uffd4\001\002\000\014\002\uffff\026\uffff\027" +
    "\uffff\042\uffff\043\uffff\001\002\000\014\002\uffe9\026\207" +
    "\027\105\042\101\043\102\001\002\000\004\002\ufffe\001" +
    "\002\000\014\002\uffe9\026\207\027\105\042\101\043\102" +
    "\001\002\000\006\022\110\025\234\001\002\000\014\002" +
    "\uffe9\026\207\027\105\042\101\043\102\001\002\000\004" +
    "\025\211\001\002\000\014\002\uffb1\026\uffb1\027\uffb1\042" +
    "\uffb1\043\uffb1\001\002\000\004\013\uffb0\001\002\000\004" +
    "\013\213\001\002\000\012\014\uffac\027\105\042\101\043" +
    "\102\001\002\000\004\014\226\001\002\000\006\022\110" +
    "\025\216\001\002\000\006\014\uffae\020\uffae\001\002\000" +
    "\006\014\uffa9\020\220\001\002\000\010\027\105\042\101" +
    "\043\102\001\002\000\004\014\uffad\001\002\000\006\022" +
    "\110\025\223\001\002\000\006\014\uffab\020\uffab\001\002" +
    "\000\006\014\uffa9\020\220\001\002\000\004\014\uffaa\001" +
    "\002\000\004\015\227\001\002\000\030\003\036\004\uffe4" +
    "\013\015\016\ufff1\025\035\041\016\045\037\046\031\050" +
    "\034\051\uffd2\055\013\001\002\000\004\016\231\001\002" +
    "\000\014\002\uffaf\026\uffaf\027\uffaf\042\uffaf\043\uffaf\001" +
    "\002\000\004\002\uffea\001\002\000\014\002\uffb7\026\uffb7" +
    "\027\uffb7\042\uffb7\043\uffb7\001\002\000\004\013\uffb6\001" +
    "\002\000\004\013\236\001\002\000\012\014\uffac\027\105" +
    "\042\101\043\102\001\002\000\004\014\240\001\002\000" +
    "\004\015\241\001\002\000\030\003\036\004\uffe4\013\015" +
    "\017\ufff1\025\035\041\016\045\037\046\031\050\034\051" +
    "\uffd2\055\013\001\002\000\004\017\245\001\002\000\004" +
    "\016\244\001\002\000\014\002\uffb5\026\uffb5\027\uffb5\042" +
    "\uffb5\043\uffb5\001\002\000\016\013\uffb4\015\uffb4\024\uffb4" +
    "\025\uffb4\041\uffb4\044\uffb4\001\002\000\016\013\015\015" +
    "\117\024\120\025\113\041\016\044\116\001\002\000\004" +
    "\016\uffb3\001\002\000\004\016\uffb2\001\002\000\004\002" +
    "\uffeb\001\002\000\020\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\016\ufff2\017\ufff2\052\ufff2\001\002\000\044\003\036\004" +
    "\uffe4\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\015\016\ufff1" +
    "\017\ufff1\025\035\041\016\045\037\046\031\050\034\051" +
    "\uffd2\052\ufff1\055\013\001\002\000\020\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\016\ufff3\017\ufff3\052\ufff3\001\002\000" +
    "\020\006\ufffc\007\ufffc\010\ufffc\012\ufffc\016\ufffc\017\ufffc" +
    "\052\ufffc\001\002\000\004\013\257\001\002\000\012\024" +
    "\046\025\052\033\047\041\051\001\002\000\004\014\261" +
    "\001\002\000\004\005\uffe3\001\002\000\004\005\263\001" +
    "\002\000\034\003\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1" +
    "\013\015\025\035\041\016\045\037\046\031\050\034\051" +
    "\uffd2\055\013\001\002\000\010\006\270\007\267\010\uffdc" +
    "\001\002\000\004\010\uffdf\001\002\000\004\010\303\001" +
    "\002\000\004\013\274\001\002\000\004\005\271\001\002" +
    "\000\030\003\uffde\004\uffde\010\uffde\013\uffde\025\uffde\041" +
    "\uffde\045\uffde\046\uffde\050\uffde\051\uffde\055\uffde\001\002" +
    "\000\030\003\036\004\uffe4\010\ufff1\013\015\025\035\041" +
    "\016\045\037\046\031\050\034\051\uffd2\055\013\001\002" +
    "\000\004\010\uffdd\001\002\000\012\024\046\025\052\033" +
    "\047\041\051\001\002\000\004\014\276\001\002\000\004" +
    "\005\uffe1\001\002\000\004\005\300\001\002\000\034\003" +
    "\036\004\uffe4\006\ufff1\007\ufff1\010\ufff1\013\015\025\035" +
    "\041\016\045\037\046\031\050\034\051\uffd2\055\013\001" +
    "\002\000\010\006\270\007\267\010\uffdc\001\002\000\004" +
    "\010\uffe0\001\002\000\044\003\uffe2\004\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\012\uffe2\013\uffe2\016\uffe2\017\uffe2\025\uffe2" +
    "\041\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\055" +
    "\uffe2\001\002\000\020\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\016\ufff5\017\ufff5\052\ufff5\001\002\000\020\006\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\016\ufffb\017\ufffb\052\ufffb\001\002" +
    "\000\004\013\307\001\002\000\004\025\310\001\002\000" +
    "\004\014\311\001\002\000\004\053\uffd1\001\002\000\004" +
    "\053\314\001\002\000\004\012\324\001\002\000\016\013" +
    "\015\015\117\024\120\025\113\041\016\044\116\001\002" +
    "\000\004\054\uffcf\001\002\000\004\054\317\001\002\000" +
    "\030\003\036\004\uffe4\013\015\025\035\041\016\045\037" +
    "\046\031\050\034\051\uffd2\052\ufff1\055\013\001\002\000" +
    "\004\052\321\001\002\000\006\012\uffcc\053\314\001\002" +
    "\000\004\012\uffce\001\002\000\004\012\uffcd\001\002\000" +
    "\044\003\uffd0\004\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\016\uffd0\017\uffd0\025\uffd0\041\uffd0\045\uffd0\046" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\001\002\000\020" +
    "\006\ufff6\007\ufff6\010\ufff6\012\ufff6\016\ufff6\017\ufff6\052" +
    "\ufff6\001\002\000\010\014\327\035\152\036\151\001\002" +
    "\000\064\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\025\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\045" +
    "\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8" +
    "\001\002\000\020\006\ufff8\007\ufff8\010\ufff8\012\ufff8\016" +
    "\ufff8\017\ufff8\052\ufff8\001\002\000\020\006\ufff9\007\ufff9" +
    "\010\ufff9\012\ufff9\016\ufff9\017\ufff9\052\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\011\001\001\000\040\003\027\004" +
    "\024\007\020\010\037\012\026\013\016\033\040\035\013" +
    "\042\032\043\021\044\031\045\022\046\025\054\023\065" +
    "\017\001\001\000\040\003\330\004\024\007\020\010\037" +
    "\012\026\013\016\033\040\035\013\042\032\043\021\044" +
    "\031\045\022\046\025\054\023\065\017\001\001\000\040" +
    "\003\327\004\024\007\020\010\037\012\026\013\016\033" +
    "\040\035\013\042\032\043\021\044\031\045\022\046\025" +
    "\054\023\065\017\001\001\000\010\042\325\043\021\044" +
    "\031\001\001\000\002\001\001\000\040\003\324\004\024" +
    "\007\020\010\037\012\026\013\016\033\040\035\013\042" +
    "\032\043\021\044\031\045\022\046\025\054\023\065\017" +
    "\001\001\000\002\001\001\000\040\003\304\004\024\007" +
    "\020\010\037\012\026\013\016\033\040\035\013\042\032" +
    "\043\021\044\031\045\022\046\025\054\023\065\017\001" +
    "\001\000\002\001\001\000\040\003\303\004\024\007\020" +
    "\010\037\012\026\013\016\033\040\035\013\042\032\043" +
    "\021\044\031\045\022\046\025\054\023\065\017\001\001" +
    "\000\002\001\001\000\040\003\254\004\024\007\020\010" +
    "\037\012\026\013\016\033\040\035\013\042\032\043\021" +
    "\044\031\045\022\046\025\054\023\065\017\001\001\000" +
    "\004\053\252\001\001\000\040\003\251\004\024\007\020" +
    "\010\037\012\026\013\016\033\040\035\013\042\032\043" +
    "\021\044\031\045\022\046\025\054\023\065\017\001\001" +
    "\000\002\001\001\000\004\062\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\102" +
    "\041\105\001\001\000\040\003\076\004\024\007\020\010" +
    "\037\012\026\013\016\033\040\035\013\042\032\043\021" +
    "\044\031\045\022\046\025\054\023\065\017\001\001\000" +
    "\004\060\043\001\001\000\040\003\042\004\024\007\020" +
    "\010\037\012\026\013\016\033\040\035\013\042\032\043" +
    "\021\044\031\045\022\046\025\054\023\065\017\001\001" +
    "\000\040\003\041\004\024\007\020\010\037\012\026\013" +
    "\016\033\040\035\013\042\032\043\021\044\031\045\022" +
    "\046\025\054\023\065\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\052\017\047" +
    "\001\001\000\002\001\001\000\004\017\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\054\001\001\000\040\003\055\004" +
    "\024\007\020\010\037\012\026\013\016\033\040\035\013" +
    "\042\032\043\021\044\031\045\022\046\025\054\023\065" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\061\001\001\000\004\021\072\001\001\000\002\001" +
    "\001\000\004\021\071\001\001\000\004\021\064\001\001" +
    "\000\002\001\001\000\006\016\070\017\047\001\001\000" +
    "\006\016\067\017\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\111\040\136\042\032\043\021\044" +
    "\031\045\113\047\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\111\040\114\042\032" +
    "\043\021\044\031\045\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\032\043\021\044\031\045\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\122\001\001\000\004\036" +
    "\123\001\001\000\004\076\130\001\001\000\012\042\032" +
    "\043\021\044\031\045\125\001\001\000\004\077\126\001" +
    "\001\000\004\036\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\111\040\135\042\032\043\021\044\031" +
    "\045\113\001\001\000\002\001\001\000\004\050\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\111\040\143\042\032\043\021\044\031\045" +
    "\113\001\001\000\004\050\144\001\001\000\002\001\001" +
    "\000\016\037\111\040\146\042\032\043\021\044\031\045" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\157\044\031\001\001\000\006\043\152\044\031\001" +
    "\001\000\002\001\001\000\004\044\156\001\001\000\004" +
    "\044\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\162\001\001" +
    "\000\002\001\001\000\004\041\105\001\001\000\006\016" +
    "\165\017\047\001\001\000\004\063\166\001\001\000\002" +
    "\001\001\000\004\011\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\174\001\001" +
    "\000\004\033\175\001\001\000\002\001\001\000\004\034" +
    "\102\001\001\000\002\001\001\000\004\052\201\001\001" +
    "\000\012\022\202\023\203\027\205\041\204\001\001\000" +
    "\002\001\001\000\012\022\250\023\203\027\205\041\204" +
    "\001\001\000\004\024\232\001\001\000\012\022\231\023" +
    "\203\027\205\041\204\001\001\000\004\030\207\001\001" +
    "\000\002\001\001\000\004\072\211\001\001\000\002\001" +
    "\001\000\006\031\213\041\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\216\001\001\000\004\032" +
    "\220\001\001\000\004\041\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\223\001\001\000\004\032" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\227\004\024\007\020\010\037\012\026\013\016\033" +
    "\040\035\013\042\032\043\021\044\031\045\022\046\025" +
    "\054\023\065\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\234" +
    "\001\001\000\002\001\001\000\006\031\236\041\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\241" +
    "\004\024\007\020\010\037\012\026\013\016\026\242\033" +
    "\040\035\013\042\032\043\021\044\031\045\022\046\025" +
    "\054\023\065\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\245\001\001\000\020" +
    "\025\246\037\111\040\247\042\032\043\021\044\031\045" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\253\004\024\007" +
    "\020\010\037\012\026\013\016\033\040\035\013\042\032" +
    "\043\021\044\031\045\022\046\025\054\023\065\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\257\017\047\001\001\000\002\001\001\000" +
    "\004\055\261\001\001\000\002\001\001\000\040\003\263" +
    "\004\024\007\020\010\037\012\026\013\016\033\040\035" +
    "\013\042\032\043\021\044\031\045\022\046\025\054\023" +
    "\065\017\001\001\000\006\005\265\006\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\271\001\001\000\040\003\272\004" +
    "\024\007\020\010\037\012\026\013\016\033\040\035\013" +
    "\042\032\043\021\044\031\045\022\046\025\054\023\065" +
    "\017\001\001\000\002\001\001\000\006\016\274\017\047" +
    "\001\001\000\002\001\001\000\004\056\276\001\001\000" +
    "\002\001\001\000\040\003\300\004\024\007\020\010\037" +
    "\012\026\013\016\033\040\035\013\042\032\043\021\044" +
    "\031\045\022\046\025\054\023\065\017\001\001\000\006" +
    "\005\301\006\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\311\001" +
    "\001\000\004\014\312\001\001\000\002\001\001\000\016" +
    "\037\111\040\314\042\032\043\021\044\031\045\113\001" +
    "\001\000\004\067\315\001\001\000\002\001\001\000\040" +
    "\003\317\004\024\007\020\010\037\012\026\013\016\033" +
    "\040\035\013\042\032\043\021\044\031\045\022\046\025" +
    "\054\023\065\017\001\001\000\002\001\001\000\006\014" +
    "\322\015\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";
        public int hayErrores = 0;
        public int contadorNodo = 0;
        public static Nodo padre;

        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                hayErrores = 1;
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                hayErrores = 1;
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                hayErrores = 1;
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
                hayErrores = 1;
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= INIT EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= FCALL NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= WRITE EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FCALL ::= id parIzq FCALLARGS parDer 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = call; System.out.println("\tLlamado a funcion: "+call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INIT ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= id ASIG2 opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\tAsignacion: id: "+i+", valor: "+v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG2 ::= openBrk number closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= NT$3 ifstart parIzq COND parDer NT$4 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSIF ::= elseif parIzq COND parDer NT$5 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= elseclause ifthen NT$6 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= whilestart NT$7 parIzq COND parDer NT$8 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WRITE ::= writestart parIzq VALS parDer 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("\tWRITE Valor:"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= forstart NT$9 parIzq INIT pcoma COND NT$10 pcoma CONTADOR parDer NT$11 ASIG end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTADOR ::= id contador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t Contador: id: "+i+", contador: "+cont);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECT ::= NT$12 selectstart parIzq id parDer NT$13 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPT ::= options VALS NT$14 colon EXP breaks OPT2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPT2 ::= OPT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPT2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT2",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND2 ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND3 ::= booleano COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETFUNC ::= TIPO RETFUNC2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$15 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("FUNCTION "+val+" START ");  calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETFUNC2 ::= id NT$15 parIzq ARGS parDer cbOpen RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$16 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETFUNCBODY ::= EXP ret NT$16 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VOIDFUNC ::= voidType VOIDFUNC2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("VOID FUNCTION "+val+" START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VOIDFUNC2 ::= id NT$17 parIzq ARGS parDer cbOpen EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		 
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$18 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\tArgumento - tipo: "+t+", id: "+i); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGS ::= TIPO id NT$18 ARGS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$19 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("\tArgumento - tipo: "+t+", id: "+i); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGS2 ::= coma TIPO id NT$19 ARGS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= TIPO openBrk closeBrk 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = t+" array"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= charval 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ch; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALS ::= ARRVAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$20 ::= 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$21 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 RESULT = arrayValue; arrayValue = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRVAL ::= cbOpen S NT$20 ARRVAL2 NT$21 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRVAL ::= cbOpen cbClose 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$22 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue += (", " + val); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARRVAL2 ::= coma S NT$22 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
