
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package amuse;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Amuse.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\045\002\000\002\046" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\047\002\000\002\003\005\000\002\003\002\000\002\050" +
    "\002\000\002\042\007\000\002\043\004\000\002\043\002" +
    "\000\002\044\005\000\002\044\002\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\002\000\002" +
    "\030\006\000\002\030\005\000\002\030\007\000\002\030" +
    "\006\000\002\051\002\000\002\033\006\000\002\033\004" +
    "\000\002\052\002\000\002\053\002\000\002\004\014\000" +
    "\002\054\002\000\002\005\012\000\002\005\003\000\002" +
    "\055\002\000\002\006\006\000\002\006\002\000\002\056" +
    "\002\000\002\057\002\000\002\007\012\000\002\060\002" +
    "\000\002\061\002\000\002\062\002\000\002\010\017\000" +
    "\002\063\002\000\002\064\002\000\002\011\012\000\002" +
    "\012\010\000\002\012\007\000\002\013\004\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\015\004" +
    "\000\002\015\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\002\000\002\041\003\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\003\000\002\040\003\000\002\040\005" +
    "\000\002\065\002\000\002\020\005\000\002\066\002\000" +
    "\002\067\002\000\002\021\013\000\002\070\002\000\002" +
    "\023\006\000\002\022\003\000\002\071\002\000\002\024" +
    "\005\000\002\072\002\000\002\025\012\000\002\026\005" +
    "\000\002\026\002\000\002\027\006\000\002\027\002\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\073\002\000\002\034\006\000\002\074\002" +
    "\000\002\031\005\000\002\031\002\000\002\075\002\000" +
    "\002\032\006\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\011\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\026\003\000\004\000\014\000\017\000\026\000\043\000" +
    "\047\000\050\000\051\000\055\000\001\002\000\026\003" +
    "\034\004\uffe1\014\015\017\ufff3\026\033\043\014\047\uffd8" +
    "\050\uffd5\051\uffd1\055\013\001\002\000\042\003\034\004" +
    "\uffe1\006\ufff3\007\ufff3\010\ufff3\013\ufff3\014\015\017\ufff3" +
    "\020\ufff3\026\033\043\014\047\uffd8\050\uffd5\051\uffd1\052" +
    "\ufff3\055\013\001\002\000\062\003\uffbc\004\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\026\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054" +
    "\uffbc\055\uffbc\001\002\000\006\014\015\043\014\001\002" +
    "\000\004\047\310\001\002\000\004\051\273\001\002\000" +
    "\042\003\034\004\uffe1\006\ufff3\007\ufff3\010\ufff3\013\ufff3" +
    "\014\015\017\ufff3\020\ufff3\026\033\043\014\047\uffd8\050" +
    "\uffd5\051\uffd1\052\ufff3\055\013\001\002\000\004\050\255" +
    "\001\002\000\042\003\034\004\uffe1\006\ufff3\007\ufff3\010" +
    "\ufff3\013\ufff3\014\015\017\ufff3\020\ufff3\026\033\043\014" +
    "\047\uffd8\050\uffd5\051\uffd1\052\ufff3\055\013\001\002\000" +
    "\062\003\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\026" +
    "\uffc0\037\uffc0\040\uffc0\041\121\042\120\043\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001\002\000" +
    "\004\004\205\001\002\000\042\003\034\004\uffe1\006\ufff3" +
    "\007\ufff3\010\ufff3\013\ufff3\014\015\017\ufff3\020\ufff3\026" +
    "\033\043\014\047\uffd8\050\uffd5\051\uffd1\052\ufff3\055\013" +
    "\001\002\000\042\003\034\004\uffe1\006\ufff3\007\ufff3\010" +
    "\ufff3\013\ufff3\014\015\017\ufff3\020\ufff3\026\033\043\014" +
    "\047\uffd8\050\uffd5\051\uffd1\052\ufff3\055\013\001\002\000" +
    "\042\003\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\013\ufff5" +
    "\014\ufff5\017\ufff5\020\ufff5\026\ufff5\043\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002\000\004\017\125" +
    "\001\002\000\062\003\uffbd\004\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\026\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd" +
    "\001\002\000\056\003\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\026\uffc3\037\116\040\115\043\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\001\002\000\016" +
    "\014\ufff2\023\047\030\050\036\045\044\043\045\046\001" +
    "\002\000\042\003\034\004\uffe1\006\ufff3\007\ufff3\010\ufff3" +
    "\013\ufff3\014\015\017\ufff3\020\ufff3\026\033\043\014\047" +
    "\uffd8\050\uffd5\051\uffd1\052\ufff3\055\013\001\002\000\042" +
    "\003\034\004\uffe1\006\ufff3\007\ufff3\010\ufff3\013\ufff3\014" +
    "\015\017\ufff3\020\ufff3\026\033\043\014\047\uffd8\050\uffd5" +
    "\051\uffd1\052\ufff3\055\013\001\002\000\042\003\034\004" +
    "\uffe1\006\ufff3\007\ufff3\010\ufff3\013\ufff3\014\015\017\ufff3" +
    "\020\ufff3\026\033\043\014\047\uffd8\050\uffd5\051\uffd1\052" +
    "\ufff3\055\013\001\002\000\020\006\ufffb\007\ufffb\010\ufffb" +
    "\013\ufffb\017\ufffb\020\ufffb\052\ufffb\001\002\000\020\006" +
    "\ufff8\007\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\052\ufff8" +
    "\001\002\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\017" +
    "\ufffa\020\ufffa\052\ufffa\001\002\000\004\014\105\001\002" +
    "\000\010\023\uffaa\026\uffaa\036\uffaa\001\002\000\004\036" +
    "\103\001\002\000\016\014\015\016\060\025\061\026\054" +
    "\043\014\046\057\001\002\000\010\023\uffa9\026\uffa9\036" +
    "\uffa9\001\002\000\006\024\077\043\076\001\002\000\010" +
    "\023\uffa8\026\uffa8\036\uffa8\001\002\000\006\023\047\036" +
    "\053\001\002\000\004\036\074\001\002\000\016\014\015" +
    "\016\060\025\061\026\054\043\014\046\057\001\002\000" +
    "\052\003\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\026" +
    "\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\054\uffa7" +
    "\055\uffa7\001\002\000\052\003\uffa4\004\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\026\uffa4\043\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\054\uffa4\055\uffa4\001\002\000\044\003\uffe8" +
    "\004\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\026\uffe8\043\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\055\uffe8\001\002\000\052\003\uffa5\004" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\043\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\001\002" +
    "\000\010\014\015\017\uff9f\043\014\001\002\000\052\003" +
    "\uffa6\004\uffa6\006\uffa6\007\uffa6\010\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\026\uffa6\043" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6" +
    "\001\002\000\004\017\uffa3\001\002\000\006\017\uffa1\021" +
    "\uffa1\001\002\000\006\017\uff9c\021\066\001\002\000\004" +
    "\017\uffa0\001\002\000\006\014\015\043\014\001\002\000" +
    "\006\017\uff9e\021\uff9e\001\002\000\006\017\uff9c\021\066" +
    "\001\002\000\004\017\uff9d\001\002\000\004\017\073\001" +
    "\002\000\052\003\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\026\uffa2\043\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\054\uffa2\055\uffa2\001\002\000\016\014\015\016\060\025" +
    "\061\026\054\043\014\046\057\001\002\000\044\003\uffe6" +
    "\004\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\026\uffe6\043\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\055\uffe6\001\002\000\004\024\uffe4\001" +
    "\002\000\004\036\uffe2\001\002\000\004\024\101\001\002" +
    "\000\004\036\uffe3\001\002\000\044\003\uffe7\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\026\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\001\002\000\016\014\015\016\060\025\061" +
    "\026\054\043\014\046\057\001\002\000\044\003\uffe5\004" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\026\uffe5\043\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\055\uffe5\001\002\000\020\014\015\015\uffef" +
    "\016\060\025\061\026\054\043\014\046\057\001\002\000" +
    "\006\015\uffed\021\112\001\002\000\004\015\110\001\002" +
    "\000\042\003\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\013" +
    "\ufff1\014\ufff1\017\ufff1\020\ufff1\026\ufff1\043\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002\000\004\015" +
    "\ufff0\001\002\000\016\014\015\016\060\025\061\026\054" +
    "\043\014\046\057\001\002\000\006\015\uffed\021\112\001" +
    "\002\000\004\015\uffee\001\002\000\006\014\015\043\014" +
    "\001\002\000\006\014\015\043\014\001\002\000\062\003" +
    "\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\026\uffc2\037" +
    "\uffc2\040\uffc2\041\121\042\120\043\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\054\uffc2\055\uffc2\001\002\000\006\014" +
    "\015\043\014\001\002\000\006\014\015\043\014\001\002" +
    "\000\062\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\026\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002" +
    "\000\062\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\026\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\001\002" +
    "\000\062\003\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\026\uffc1\037\uffc1\040\uffc1\041\121\042\120\043\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002" +
    "\000\016\002\uffff\003\uffff\027\uffff\030\uffff\044\uffff\045" +
    "\uffff\001\002\000\016\002\uffe9\003\132\027\133\030\050" +
    "\044\043\045\046\001\002\000\016\002\uffe9\003\132\027" +
    "\133\030\050\044\043\045\046\001\002\000\004\002\ufffe" +
    "\001\002\000\016\002\uffe9\003\132\027\133\030\050\044" +
    "\043\045\046\001\002\000\016\002\uffe9\003\132\027\133" +
    "\030\050\044\043\045\046\001\002\000\004\026\uffb2\001" +
    "\002\000\004\026\uffba\001\002\000\004\026\137\001\002" +
    "\000\016\002\uffb9\003\uffb9\027\uffb9\030\uffb9\044\uffb9\045" +
    "\uffb9\001\002\000\004\014\140\001\002\000\012\015\uffad" +
    "\030\050\044\043\045\046\001\002\000\004\015\uffb8\001" +
    "\002\000\004\026\143\001\002\000\006\015\uffab\021\144" +
    "\001\002\000\010\030\050\044\043\045\046\001\002\000" +
    "\004\015\uffae\001\002\000\004\026\147\001\002\000\006" +
    "\015\uffab\021\144\001\002\000\004\015\uffac\001\002\000" +
    "\004\015\152\001\002\000\004\016\153\001\002\000\026" +
    "\003\uffb7\004\uffb7\014\uffb7\020\uffb7\026\uffb7\043\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\055\uffb7\001\002\000\026\003\034" +
    "\004\uffe1\014\015\020\ufff3\026\033\043\014\047\uffd8\050" +
    "\uffd5\051\uffd1\055\013\001\002\000\004\020\160\001\002" +
    "\000\004\017\157\001\002\000\016\002\uffb6\003\uffb6\027" +
    "\uffb6\030\uffb6\044\uffb6\045\uffb6\001\002\000\016\014\uffb5" +
    "\016\uffb5\025\uffb5\026\uffb5\043\uffb5\046\uffb5\001\002\000" +
    "\016\014\015\016\060\025\061\026\054\043\014\046\057" +
    "\001\002\000\004\017\uffb4\001\002\000\004\017\uffb3\001" +
    "\002\000\004\026\166\001\002\000\016\002\uffb1\003\uffb1" +
    "\027\uffb1\030\uffb1\044\uffb1\045\uffb1\001\002\000\004\014" +
    "\167\001\002\000\012\015\uffad\030\050\044\043\045\046" +
    "\001\002\000\004\015\uffb0\001\002\000\004\015\172\001" +
    "\002\000\004\016\173\001\002\000\026\003\034\004\uffe1" +
    "\014\015\017\ufff3\026\033\043\014\047\uffd8\050\uffd5\051" +
    "\uffd1\055\013\001\002\000\004\017\175\001\002\000\016" +
    "\002\uffaf\003\uffaf\027\uffaf\030\uffaf\044\uffaf\045\uffaf\001" +
    "\002\000\004\002\uffea\001\002\000\004\002\uffec\001\002" +
    "\000\004\002\uffeb\001\002\000\042\003\034\004\uffe1\006" +
    "\ufff3\007\ufff3\010\ufff3\013\ufff3\014\015\017\ufff3\020\ufff3" +
    "\026\033\043\014\047\uffd8\050\uffd5\051\uffd1\052\ufff3\055" +
    "\013\001\002\000\020\006\ufff4\007\ufff4\010\ufff4\013\ufff4" +
    "\017\ufff4\020\ufff4\052\ufff4\001\002\000\020\006\ufffd\007" +
    "\ufffd\010\ufffd\013\ufffd\017\ufffd\020\ufffd\052\ufffd\001\002" +
    "\000\020\006\ufff6\007\ufff6\010\ufff6\013\ufff6\017\ufff6\020" +
    "\ufff6\052\ufff6\001\002\000\004\014\206\001\002\000\010" +
    "\026\212\035\207\043\211\001\002\000\006\026\212\043" +
    "\211\001\002\000\006\015\uffcb\022\uffcb\001\002\000\004" +
    "\031\251\001\002\000\004\031\237\001\002\000\004\015" +
    "\214\001\002\000\004\005\uffe0\001\002\000\004\005\216" +
    "\001\002\000\032\003\034\004\uffe1\006\ufff3\007\ufff3\010" +
    "\ufff3\014\015\026\033\043\014\047\uffd8\050\uffd5\051\uffd1" +
    "\055\013\001\002\000\010\006\223\007\222\010\uffd9\001" +
    "\002\000\004\010\uffdc\001\002\000\004\010\236\001\002" +
    "\000\004\014\227\001\002\000\004\005\224\001\002\000" +
    "\026\003\uffdb\004\uffdb\010\uffdb\014\uffdb\026\uffdb\043\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\055\uffdb\001\002\000\026\003" +
    "\034\004\uffe1\010\ufff3\014\015\026\033\043\014\047\uffd8" +
    "\050\uffd5\051\uffd1\055\013\001\002\000\004\010\uffda\001" +
    "\002\000\010\026\212\035\207\043\211\001\002\000\004" +
    "\015\231\001\002\000\004\005\uffde\001\002\000\004\005" +
    "\233\001\002\000\032\003\034\004\uffe1\006\ufff3\007\ufff3" +
    "\010\ufff3\014\015\026\033\043\014\047\uffd8\050\uffd5\051" +
    "\uffd1\055\013\001\002\000\010\006\223\007\222\010\uffd9" +
    "\001\002\000\004\010\uffdd\001\002\000\042\003\uffdf\004" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\017\uffdf" +
    "\020\uffdf\026\uffdf\043\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\055\uffdf\001\002\000\006\026\242\043\241\001\002" +
    "\000\006\015\uffca\022\uffca\001\002\000\012\015\uffc4\022" +
    "\uffc4\033\245\034\244\001\002\000\012\015\uffc4\022\uffc4" +
    "\033\245\034\244\001\002\000\006\015\uffc8\022\uffc8\001" +
    "\002\000\010\026\212\035\207\043\211\001\002\000\010" +
    "\026\212\035\207\043\211\001\002\000\006\015\uffc6\022" +
    "\uffc6\001\002\000\006\015\uffc5\022\uffc5\001\002\000\006" +
    "\015\uffc7\022\uffc7\001\002\000\006\026\242\043\241\001" +
    "\002\000\006\015\uffc9\022\uffc9\001\002\000\006\015\uffcc" +
    "\022\uffcc\001\002\000\020\006\ufffc\007\ufffc\010\ufffc\013" +
    "\ufffc\017\ufffc\020\ufffc\052\ufffc\001\002\000\004\014\256" +
    "\001\002\000\004\026\260\001\002\000\004\022\261\001" +
    "\002\000\014\023\047\030\050\036\045\044\043\045\046" +
    "\001\002\000\010\026\212\035\207\043\211\001\002\000" +
    "\004\022\uffd4\001\002\000\004\022\264\001\002\000\010" +
    "\026\212\035\207\043\211\001\002\000\004\015\266\001" +
    "\002\000\026\003\uffd3\004\uffd3\013\uffd3\014\uffd3\026\uffd3" +
    "\043\uffd3\047\uffd3\050\uffd3\051\uffd3\055\uffd3\001\002\000" +
    "\026\003\034\004\uffe1\013\ufff3\014\015\026\033\043\014" +
    "\047\uffd8\050\uffd5\051\uffd1\055\013\001\002\000\004\013" +
    "\271\001\002\000\042\003\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\013\uffd2\014\uffd2\017\uffd2\020\uffd2\026\uffd2\043" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002" +
    "\000\020\006\ufff7\007\ufff7\010\ufff7\013\ufff7\017\ufff7\020" +
    "\ufff7\052\ufff7\001\002\000\004\014\274\001\002\000\004" +
    "\026\275\001\002\000\004\015\276\001\002\000\004\053" +
    "\uffd0\001\002\000\004\053\301\001\002\000\004\013\307" +
    "\001\002\000\016\014\015\016\060\025\061\026\054\043" +
    "\014\046\057\001\002\000\004\054\303\001\002\000\026" +
    "\003\034\004\uffe1\014\015\026\033\043\014\047\uffd8\050" +
    "\uffd5\051\uffd1\052\ufff3\055\013\001\002\000\004\052\305" +
    "\001\002\000\006\013\uffcd\053\301\001\002\000\004\013" +
    "\uffce\001\002\000\042\003\uffcf\004\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\026\uffcf\043" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002" +
    "\000\004\014\311\001\002\000\010\026\212\035\207\043" +
    "\211\001\002\000\004\015\313\001\002\000\026\003\uffd7" +
    "\004\uffd7\013\uffd7\014\uffd7\026\uffd7\043\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\055\uffd7\001\002\000\026\003\034\004\uffe1" +
    "\013\ufff3\014\015\026\033\043\014\047\uffd8\050\uffd5\051" +
    "\uffd1\055\013\001\002\000\004\013\316\001\002\000\042" +
    "\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\014" +
    "\uffd6\017\uffd6\020\uffd6\026\uffd6\043\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\055\uffd6\001\002\000\010\015\320\037" +
    "\116\040\115\001\002\000\062\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\026\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\055\uffbb\001\002\000\020\006\ufff9\007\ufff9\010\ufff9" +
    "\013\ufff9\017\ufff9\020\ufff9\052\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\011\001\001\000\040\003\027\004" +
    "\025\007\021\010\034\011\017\030\035\036\031\037\022" +
    "\040\030\041\024\042\026\052\023\056\015\060\020\063" +
    "\016\001\001\000\040\003\320\004\025\007\021\010\034" +
    "\011\017\030\035\036\031\037\022\040\030\041\024\042" +
    "\026\052\023\056\015\060\020\063\016\001\001\000\002" +
    "\001\001\000\010\036\316\037\022\040\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\271\004\025" +
    "\007\021\010\034\011\017\030\035\036\031\037\022\040" +
    "\030\041\024\042\026\052\023\056\015\060\020\063\016" +
    "\001\001\000\002\001\001\000\040\003\253\004\025\007" +
    "\021\010\034\011\017\030\035\036\031\037\022\040\030" +
    "\041\024\042\026\052\023\056\015\060\020\063\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\203" +
    "\004\025\007\021\010\034\011\017\030\035\036\031\037" +
    "\022\040\030\041\024\042\026\052\023\056\015\060\020" +
    "\063\016\001\001\000\040\003\202\004\025\007\021\010" +
    "\034\011\017\030\035\036\031\037\022\040\030\041\024" +
    "\042\026\052\023\056\015\060\020\063\016\001\001\000" +
    "\004\047\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\043\035\050\050\041\001" +
    "\001\000\040\003\040\004\025\007\021\010\034\011\017" +
    "\030\035\036\031\037\022\040\030\041\024\042\026\052" +
    "\023\056\015\060\020\063\016\001\001\000\040\003\037" +
    "\004\025\007\021\010\034\011\017\030\035\036\031\037" +
    "\022\040\030\041\024\042\026\052\023\056\015\060\020" +
    "\063\016\001\001\000\040\003\036\004\025\007\021\010" +
    "\034\011\017\030\035\036\031\037\022\040\030\041\024" +
    "\042\026\052\023\056\015\060\020\063\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\101\036\031\037\022\040\030\041\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\051\001\001\000\002\001\001\000\014\034\055\036\031" +
    "\037\022\040\030\041\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\061\036\031\037\022\040\030\041\062\001\001\000" +
    "\002\001\001\000\004\073\071\001\001\000\004\074\063" +
    "\001\001\000\004\032\064\001\001\000\002\001\001\000" +
    "\012\036\031\037\022\040\030\041\066\001\001\000\004" +
    "\075\067\001\001\000\004\032\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\074" +
    "\036\031\037\022\040\030\041\054\001\001\000\002\001" +
    "\001\000\004\051\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\103\036\031\037\022\040\030\041\054\001\001\000\002" +
    "\001\001\000\016\034\105\036\031\037\022\040\030\041" +
    "\054\043\106\001\001\000\004\044\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\112\036\031\037\022\040\030\041\054\001\001\000\004" +
    "\044\113\001\001\000\002\001\001\000\006\037\123\040" +
    "\030\001\001\000\006\037\116\040\030\001\001\000\002" +
    "\001\001\000\004\040\122\001\001\000\004\040\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\125\001\001\000\012\017\127\020\130\024" +
    "\126\035\133\001\001\000\012\017\177\020\130\024\126" +
    "\035\133\001\001\000\002\001\001\000\012\017\176\020" +
    "\130\024\126\035\133\001\001\000\012\017\175\020\130" +
    "\024\126\035\133\001\001\000\004\071\163\001\001\000" +
    "\004\065\134\001\001\000\004\021\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\140\035\141\001" +
    "\001\000\004\066\150\001\001\000\002\001\001\000\004" +
    "\027\144\001\001\000\004\035\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\153\001\001\000\042\003\154\004\025\007\021\010\034" +
    "\011\017\023\155\030\035\036\031\037\022\040\030\041" +
    "\024\042\026\052\023\056\015\060\020\063\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\160\001\001\000\016\022\161\034\162\036\031" +
    "\037\022\040\030\041\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\167\035\141\001\001\000" +
    "\004\072\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\173\004\025\007\021\010\034\011\017\030" +
    "\035\036\031\037\022\040\030\041\024\042\026\052\023" +
    "\056\015\060\020\063\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\201\004\025\007\021\010\034\011" +
    "\017\030\035\036\031\037\022\040\030\041\024\042\026" +
    "\052\023\056\015\060\020\063\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\212\014\207\001\001\000\004\014\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\214\001\001\000\002\001" +
    "\001\000\040\003\216\004\025\007\021\010\034\011\017" +
    "\030\035\036\031\037\022\040\030\041\024\042\026\052" +
    "\023\056\015\060\020\063\016\001\001\000\006\005\220" +
    "\006\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\224\001\001" +
    "\000\040\003\225\004\025\007\021\010\034\011\017\030" +
    "\035\036\031\037\022\040\030\041\024\042\026\052\023" +
    "\056\015\060\020\063\016\001\001\000\002\001\001\000" +
    "\006\013\227\014\207\001\001\000\002\001\001\000\004" +
    "\054\231\001\001\000\002\001\001\000\040\003\233\004" +
    "\025\007\021\010\034\011\017\030\035\036\031\037\022" +
    "\040\030\041\024\042\026\052\023\056\015\060\020\063" +
    "\016\001\001\000\006\005\234\006\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\237\001\001\000" +
    "\002\001\001\000\004\016\247\001\001\000\004\016\242" +
    "\001\001\000\002\001\001\000\006\013\246\014\207\001" +
    "\001\000\006\013\245\014\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\256\001\001\000\002\001" +
    "\001\000\006\033\043\035\050\001\001\000\006\013\261" +
    "\014\207\001\001\000\004\061\262\001\001\000\002\001" +
    "\001\000\006\013\264\014\207\001\001\000\002\001\001" +
    "\000\004\062\266\001\001\000\040\003\267\004\025\007" +
    "\021\010\034\011\017\030\035\036\031\037\022\040\030" +
    "\041\024\042\026\052\023\056\015\060\020\063\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\276\001\001\000\004\012\277\001\001\000\002" +
    "\001\001\000\014\034\301\036\031\037\022\040\030\041" +
    "\054\001\001\000\002\001\001\000\040\003\303\004\025" +
    "\007\021\010\034\011\017\030\035\036\031\037\022\040" +
    "\030\041\024\042\026\052\023\056\015\060\020\063\016" +
    "\001\001\000\002\001\001\000\004\012\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\311\014\207\001\001\000\002\001\001\000\004\057" +
    "\313\001\001\000\040\003\314\004\025\007\021\010\034" +
    "\011\017\030\035\036\031\037\022\040\030\041\024\042" +
    "\026\052\023\056\015\060\020\063\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public ArrayList<String> calls = new ArrayList();
        public String arrayValue="";
        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio main");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 System.out.println("Fin main"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= MainProgram parIzq parDer cbOpen NT$0 EXP cbClose NT$1 FUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= IF EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= WHILE EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= error EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= comment EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= FOR EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= SELECT EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= S EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 calls.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= FCALL NT$2 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 RESULT = call; System.out.println("Llamado a funcion: "+call);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FCALL ::= id NT$3 parIzq FCALLARGS parDer 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALL",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FCALLARGS ::= VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FCALLARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FCALLARGS2 ::= coma VALS FCALLARGS2 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FCALLARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FCALLARGS2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= RETFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= VOIDFUNC FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= error FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIG ::= id TIPO opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= id opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= id TIPO BRKS opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Inicializacion: Tipo "+t+", id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG ::= id BRKS opAsig VALS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("\t Asignacion:  id: "+i+", valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BRKS ::= openBrk number NT$4 closeBrk 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BRKS ::= openBrk closeBrk 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BRKS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 System.out.println("\tCondicion if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= NT$5 ifstart parIzq COND parDer NT$6 ifthen EXP ELSIF endif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("Fin if"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("\tCondicion elseif"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSIF ::= elseif parIzq COND parDer NT$7 ifthen EXP ELSIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSIF ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSIF",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("\tElse"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= elseclause ifthen NT$8 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
System.out.println("\tCondicion while");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= NT$9 whilestart parIzq COND parDer NT$10 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin while"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio FOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
System.out.println("\tCondicion for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= NT$11 forstart parIzq ASIG pcoma COND NT$12 pcoma COND parDer NT$13 EXP end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("fin for"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$14 ::= 
            {
              Object RESULT =null;
 System.out.println("Inicio Select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("\tVariable:"+i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SELECT ::= NT$14 selectstart parIzq id parDer NT$15 OPT end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("fin select"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECT",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPT ::= options VALS colon EXP breaks OPT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPT ::= options VALS colon EXP breaks 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 System.out.println("\t\tOpcion-valor: "+v); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND ::= opNot COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND ::= COND2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND2 ::= id opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND2 ::= number opRel COND3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND3 ::= id COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND3 ::= number COND4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND4 ::= opOr COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND4 ::= opAnd COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND4",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // S ::= E 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E opSuma T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Integer(e.intValue()+t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E opResta T 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(e.intValue()-t.intValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= T 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T ::= T opMult F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() * f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T ::= T opDiv F 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Integer(t.intValue() / f.intValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T ::= F 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // F ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Integer(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // F ::= parIzq E parDer 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$16 ::= 
            {
              Object RESULT =null;
System.out.println("FUNCTION START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETFUNC ::= TIPO NT$16 RETFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 System.out.println("\tFUNCTION HEADER "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETFUNC2 ::= id parIzq ARGS NT$17 parDer cbOpen NT$18 RETFUNCBODY cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNC2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.print("\tRETURN - ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETFUNCBODY ::= EXP ret NT$19 RETVAL 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETFUNCBODY",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETVAL ::= VALS 
            {
              Object RESULT =null;
		int retValleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retValright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String retVal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Return value: "+retVal); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETVAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$20 ::= 
            {
              Object RESULT =null;
System.out.println("VOID FUNCTION START"); calls.clear(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VOIDFUNC ::= voidType NT$20 VOIDFUNC2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$21 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("\tArgumentos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VOIDFUNC2 ::= id parIzq ARGS NT$21 parDer cbOpen EXP cbClose 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		 
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VOIDFUNC2",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARGS ::= TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGS2 ::= coma TIPO id ARGS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARGS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARGS2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= bool 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= num 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "num"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= character 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALS ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALS ::= booleano 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALS ::= charval 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ch; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALS ::= S 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = val.intValue() + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$22 ::= 
            {
              String RESULT =null;
RESULT = arrayValue;arrayValue="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALS ::= cbOpen ARRVAL NT$22 cbClose 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$23 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = val + ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARRVAL ::= S NT$23 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARRVAL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$24 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 arrayValue = ", " + val; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARRVAL2 ::= coma S NT$24 ARRVAL2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARRVAL2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRVAL2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
