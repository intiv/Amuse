package amuse;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;

parser code {:
        public ArrayList<String> calls = new ArrayList();
        public String valObject="";
        public int hayErrores = 0;
        public int contadorNodo = 0;
        public static Nodo padre;

        public void report_error(String message,Object info){
                StringBuffer m=new StringBuffer("Error ");
                if(info instanceof Symbol){
                        Symbol s=((Symbol)info);

                        if(s.left>=0){
                                m.append("en linea "+(s.left+1));
                                if(s.right>=0)
                                        m.append(", columna "+(s.right+1));
                        }
                }
                m.append(": "+message);
                System.err.println(m);
                hayErrores = 1;
        }

        public void report_fatal_error(String message, Object info){
                report_error(message, info);
                hayErrores = 1;
                // System.exit(1);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
                System.out.println(cur_token.toString());
                System.err.println("At line "+(cur_token.left)+", column "+cur_token.right);
                hayErrores = 1;
                // System.exit(1);
        }

        protected void report_expected_token_ids() {
                hayErrores = 1;
	        List<Integer> ids = expected_token_ids();
	        LinkedList<String> list = new LinkedList<String>();
	        for (Integer expected : ids)
		        list.add(symbl_name_from_id(expected));
                // System.err.println("Se esperaba: "+list);
	}
        
:};

action code
{:
:}

/**************
 * Terminales *
 **************/

//If
terminal String ifstart, ifthen, elseclause, elseif, endif;

//Estructura 
terminal String MainProgram, end, parIzq, parDer, cbOpen, cbClose, ret, coma, pcoma, openBrk, closeBrk;

//Tipos
terminal String booleano, id, voidType, character;

//Operadores
terminal String opRel, opOr, opAnd, opNot, opAsig;
terminal opSuma, opResta, opMult, opDiv;
terminal String number;


//Valores
terminal String bool, num, charval;

//While                
terminal String whilestart;

//For                
terminal String forstart, contador;

//Write                
terminal String writestart;

//Select             
terminal String selectstart, breaks, options, colon;

terminal String comment;



/*****************
 * No Terminales *
 *****************/

//Inicial y Expresion
non terminal START, EXP;

//If
non terminal IF, ELSIF, ELSE;

//While
non terminal WHILE;

//For
non terminal FOR, CONTADOR;

//Write
non terminal WRITE;

//Select
non terminal SELECT, OPT, OPT2;

//Condiciones multipes, negadas o normales
non terminal COND, COND2, COND3, COND4;

//Funcion con retorno
non terminal FUNC, RETFUNC, RETFUNC2, RETVAL;
non terminal String RETFUNCBODY;
//Funcion void
non terminal VOIDFUNC, VOIDFUNC2;

non terminal ARGS, ARGS2, ASIG, ASIG2, INIT, ARRVAL2;
non terminal String ARRVAL;
non terminal VALS, TIPO;

non terminal Integer E,T,F;
non terminal Integer S;

non terminal FCALL;
non terminal FCALLARGS, FCALLARGS2, MAIN;
//Operadores
// non terminal Object EXP_ARIT, EXPRresp;
// non terminal Integer EXPS, FACT, TERM;
precedence left opSuma, opResta;
precedence left opMult, opDiv;
precedence left opAsig;

start with START;





START           ::= MAIN:n1 {:
                        Nodo nd = new Nodo();
                        nd.setEtiqueta("Inicio");
                        nd.setIdNod(parser.contadorNodo);
                        nd.addHijos((Nodo)n1);             
                        parser.padre = (Nodo)nd;
                        parser.contadorNodo++;
                        RESULT = nd; :};

MAIN            ::= MainProgram parIzq parDer cbOpen EXP:n1 cbClose FUNC:n2 {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Main Function");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("VALS");
                        nd1.addHijos((Nodo)n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        // Nodo nd2 = new Nodo();
                        // nd2.setEtiqueta("Expresion");
                        // nd2.addHijos((Nodo)n2);
                        // nd2.setIdNod(parser.contadorNodo);        
                        // parser.contadorNodo++; 
                        
                        nd0.addHijos((Nodo)nd1);
                        //nd0.addHijos((Nodo)nd2);
                        
                        RESULT = nd0; :};

//No terminal para todas las expresiones que pueden haber. Aqui van ifs, for, switch, while, asignaciones, etc
EXP             ::= error EXP
                | IF EXP
                | WHILE EXP
                | ASIG EXP
                | comment EXP
                | INIT EXP
                | FOR EXP
                | SELECT EXP
                | S EXP
                | FCALL EXP
                | WRITE EXP 
                |;



FCALL ::= id:n1 parIzq FCALLARGS:n2 parDer 
                {: 
                        //llamado de funcion
                        //ID    Parametros
                        //i     Parametro
                        //      VALS    FCALLARGS
                        //              Parametro
                        //              VALS    FCALLARGS
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Llamado de Funcion");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd3 = new Nodo();
                        nd3.setEtiqueta("ID");
                        nd3.addHijos(nd1);
                        nd3.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("Parametros");
                        nd2.addHijos((Nodo)n2);
                        nd2.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++; 
                        
                        nd0.addHijos(nd1);
                        nd0.addHijos(nd3);
                        
                        RESULT = nd0;
                        System.out.println("\tLlamado a funcion: "+n1);
                :};

FCALLARGS ::=   VALS:n1 FCALLARGS2:n2 
                        {:
                                Nodo nd0 = new Nodo();
                                nd0.setEtiqueta("Parametro");
                                nd0.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++;
        
                                Nodo nd1 = new Nodo();
                                nd1.setEtiqueta("VALS");
                                nd1.addHijos((Nodo)n1);
                                nd1.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++;
                                
                                Nodo nd2 = new Nodo();
                                nd2.setEtiqueta("FCALLARGS2");
                                nd2.addHijos((Nodo)n2);
                                nd2.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++; 
                                
                                nd0.addHijos((Nodo)nd1);
                                nd0.addHijos((Nodo)nd2);
                                
                                RESULT = nd0;                                
                        :}
                | ;
FCALLARGS2 ::=  coma VALS:n1 FCALLARGS2:n2 
                        {:
                                Nodo nd0 = new Nodo();
                                nd0.setEtiqueta("VALS");
                                nd0.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++;

                                Nodo nd1 = new Nodo();
                                nd1.setEtiqueta("VALS");
                                nd1.addHijos((Nodo)n1);
                                nd1.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++;
                                
                                Nodo nd2 = new Nodo();
                                nd2.setEtiqueta("FCALLARGS2");
                                nd2.addHijos((Nodo)n2);
                                nd2.setIdNod(parser.contadorNodo);        
                                parser.contadorNodo++; 
                                
                                nd0.addHijos((Nodo)nd1);
                                nd0.addHijos((Nodo)nd2);
                                
                                RESULT = nd0;
                        :}
                | ; 
                
//No terminal que maneja todas las funciones despues del main
FUNC            ::= RETFUNC FUNC
                | VOIDFUNC FUNC
                | ;

//Asignacion / Inicializacion

INIT            ::= id:i TIPO:t opAsig VALS:v {:System.out.println("\tInicializacion: id: "+i+", tipo: "+t+", valor: "+v);:};


ASIG            ::= id:i ASIG2 opAsig VALS:v {: System.out.println("\tAsignacion: id: "+i+", valor: "+v);:} ;
ASIG2           ::= openBrk number closeBrk
                | ;

//If
IF              ::=
                ifstart parIzq COND:n1 parDer
                ifthen EXP:n2 ELSIF:n3 endif 
                {:
                        //If statement
                        //Condicion             Body            ELSE
                        //i>2                   IF      EXP     Body     
                              
                        //If statement
                        //Condicion             Body            ELSEIF
                        //i>2                   IF      EXP     Condicion             Body              ELSE 
                        //                                      i>2                   IF      EXP       Body                 
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("If Statement");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("Condicion");
                        nd1.addHijos((Nodo)n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("Body");
                        nd2.addHijos((Nodo)n2);
                        nd2.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++; 

                        Nodo nd3 = new Nodo();
                        nd3.setEtiqueta("CONTINUACION");
                        nd3.addHijos((Nodo)n3);
                        nd3.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++; 
                        
                        nd0.addHijos(nd1);
                        nd0.addHijos(nd2);
                        nd0.addHijos(nd3);
                        
                        RESULT = nd0;                                
                :};
ELSIF           ::= elseif parIzq COND:n1 parDer 
                ifthen EXP:n2 ELSIF:n3 
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Else If");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("Condicion");
                        nd1.addHijos((Nodo)n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("Body");
                        nd2.addHijos((Nodo)n2);
                        nd2.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd3 = new Nodo();
                        nd3.setEtiqueta("CONTINUACION");
                        nd3.addHijos((Nodo)n3);
                        nd3.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++; 
                        
                        nd0.addHijos(nd1);
                        nd0.addHijos(nd2);
                        nd0.addHijos(nd3);
                        
                        RESULT = nd0;                                
                :}
                | 
                ELSE:n1 {:RESULT = n1;:};
ELSE            ::= elseclause ifthen EXP:n1
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Else");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("Body");
                        nd1.addHijos((Nodo)n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                                                
                        nd0.addHijos(nd1);
                        
                        RESULT = nd0;                                
                :}
                | ;

//While
WHILE           ::= 
                whilestart {: System.out.println("Inicio WHILE"); :}  parIzq COND parDer 
                {:System.out.println("\tCondicion while");:} 
                EXP end {: System.out.println("fin while"); :};

//Write
WRITE           ::= 
                writestart parIzq VALS:val parDer 
                {:System.out.println("\tWRITE Valor:"+val);:};

//For
FOR             ::= 
                forstart {: System.out.println("Inicio FOR"); :} parIzq INIT pcoma COND 
                {:System.out.println("\tCondicion for");:}
                pcoma CONTADOR parDer
                {:System.out.println("\tCondicion for");:}
                ASIG 
                end {: System.out.println("fin for"); :};

CONTADOR        ::= 
                id:i contador:cont {:System.out.println("\t Contador: id: "+i+", contador: "+cont);:};

//Select
SELECT          ::= {: System.out.println("Inicio Select"); :}
                selectstart parIzq id:i parDer
                {:System.out.println("\tVariable:"+i);:}
                OPT
                end 
                {: System.out.println("fin select"); :};

OPT             ::= options VALS:v {: System.out.println("\t\tOpcion-valor: "+v); :} colon EXP breaks OPT2;
OPT2            ::= OPT | ;
        
//Condiciones negadas, normales, con OR o AND
COND            ::= opNot COND2:n1
                {:
                        //!
                        //true

                        //!
                        //Condicion
                        //id<id

                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("!");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("Condicion");
                        nd1.addHijos((Nodo)n1);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}  
                |
                COND2:n1
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Condicion");
                        nd0.addHijos((Nodo)n0);
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :};
COND2           ::= id:i opRel:o COND3:n1
                {:
                        //>
                        //i     Condicion
                        //      i

                        //>
                        //i     Condicion
                        //      and
                        //      i
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta(o);
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(i);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("Condicion");
                        nd2.addHijos((Nodo)n1);
                        nd2.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        nd0.addHijos((Nodo)nd2);
                        
                        RESULT = nd0;
                :}
                | 
                booleano:b
                {:
                        //true
                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(b);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        RESULT = nd1;
                :}
                |
                number:n opRel:o COND3:n1
                {:
                        //>
                        //i     Condicion
                        //      i                    
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta(o);
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(n);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("Condicion");
                        nd2.addHijos((Nodo)n1);
                        nd2.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        nd0.addHijos((Nodo)nd2);
                        
                        RESULT = nd0;
                :};
COND3           ::= id:i COND4:n1 
                {:
                        //Condicion 
                        //i     and     Condicion
                        //
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta(i);
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(b);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                | 
                booleano COND4:n1
                {:
                        //Condicion 
                        //i     and     Boolean
                        //
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Condicion");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(b);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                |
                number COND4:n1
                {:
                        //Condicion 
                        //i     and     Boolean
                        //
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Condicion");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(b);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :};
COND4           ::= opOr COND 
                | 
                opAnd COND 
                | ;

// //Expresion Aritmetica
S               ::= E:e {: RESULT = e;:};
E               ::= E:e opSuma T:t {: RESULT= new Integer(e.intValue()+t.intValue()); :}
                | 
                E:e opResta T:t {: RESULT = new Integer(e.intValue()-t.intValue()); :}
                | 
                T:t{:RESULT = t;:};
T               ::= T:t opMult F:f {: RESULT = new Integer(t.intValue() * f.intValue());:}
                | 
                T:t opDiv F:f {: RESULT = new Integer(t.intValue() / f.intValue());:}
                | 
                F:f {:RESULT=f;:};
F               ::= number:n {:RESULT = new Integer(n);:}
                |
                parIzq E:e parDer {:RESULT = e;:};


//Funcion con retorno
RETFUNC         ::= TIPO  RETFUNC2;
RETFUNC2        ::= id:val {: System.out.println("FUNCTION "+val+" START ");  calls.clear(); :} parIzq ARGS parDer 
                cbOpen  RETFUNCBODY cbClose 
                {:
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                :};
RETFUNCBODY     ::= EXP:exp ret {:System.out.print("\tRETURN - ");:} RETVAL;
RETVAL          ::= VALS:retVal {: System.out.println("Return value: "+retVal); :};

//Funcion void
VOIDFUNC        ::= voidType  VOIDFUNC2;
VOIDFUNC2       ::= id:val {:System.out.println("VOID FUNCTION "+val+" START"); calls.clear(); :} parIzq ARGS parDer
                cbOpen EXP cbClose {: 
                        boolean rec = false;
                        for(int i = 0; i < calls.size(); i++){
                                if(calls.get(i).equals(val)){
                                        rec = true;
                                        break;
                                }
                        }
                        if(rec){
                                System.out.println("La funcion "+val+" es recursiva");
                        }
                        System.out.println("FIN FUNCTION");
                :};


//Argumentos para funciones
ARGS            ::= TIPO:t id:i {: System.out.println("\tArgumento - tipo: "+t+", id: "+i); :} ARGS2 
                | ;
ARGS2           ::=  coma TIPO:t id:i {: System.out.println("\tArgumento - tipo: "+t+", id: "+i); :} ARGS2
                | ;

//Tipos, falta array
TIPO            ::= 
                TIPO:t openBrk closeBrk {: RESULT = t+" array"; :}
                |
                bool:val {: RESULT = "bool"; :}
                | 
                num:val {: RESULT = "num"; :}
                | 
                character:val {: RESULT = "char"; :}
                ;

//Posibles valores que pueden haber: ids, numeros, booleans, strings/char (estos faltan)
VALS            ::= 
                id:val 
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("ID");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(val);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                | 
                booleano:val 
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Boolean");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(val);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                |
                charval:ch 
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Char");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(ch);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                |
                S:val
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Num");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(val.intValue() + "");
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :}
                |
                ARRVAL:val
                {:
                        Nodo nd0 = new Nodo();
                        nd0.setEtiqueta("Array");
                        nd0.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;

                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta(val);
                        nd1.setIdNod(parser.contadorNodo);        
                        parser.contadorNodo++;
                        
                        nd0.addHijos((Nodo)nd1);
                        
                        RESULT = nd0;
                :};

//Valores para array
ARRVAL            ::= cbOpen S:val {: valObject = val + ""; :} ARRVAL2 {: RESULT = valObject; valObject = ""; :} cbClose 
                | cbOpen  cbClose {: RESULT = ""; :};
ARRVAL2           ::=  coma S:val {: valObject += (", " + val); :} ARRVAL2
                | ;
                //| comilla letra:val{: System.out.println("val es:"+String.valueOf(val)); RESULT = String.valueOf(val); :} comilla;
